{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///indico/web/client/js/jquery/compat/jqplot.js","webpack:///node_modules/jqplot/src/jqplot.axisLabelRenderer.js","webpack:///node_modules/jqplot/src/jqplot.axisTickRenderer.js","webpack:///node_modules/jqplot/src/jqplot.canvasGridRenderer.js","webpack:///node_modules/jqplot/src/jqplot.core.js","webpack:///node_modules/jqplot/src/jqplot.divTitleRenderer.js","webpack:///node_modules/jqplot/src/jqplot.effects.blind.js","webpack:///node_modules/jqplot/src/jqplot.effects.core.js","webpack:///node_modules/jqplot/src/jqplot.linePattern.js","webpack:///node_modules/jqplot/src/jqplot.lineRenderer.js","webpack:///node_modules/jqplot/src/jqplot.linearAxisRenderer.js","webpack:///node_modules/jqplot/src/jqplot.linearTickGenerator.js","webpack:///node_modules/jqplot/src/jqplot.markerRenderer.js","webpack:///node_modules/jqplot/src/jqplot.shadowRenderer.js","webpack:///node_modules/jqplot/src/jqplot.shapeRenderer.js","webpack:///node_modules/jqplot/src/jqplot.sprintf.js","webpack:///node_modules/jqplot/src/jqplot.tableLegendRenderer.js","webpack:///node_modules/jqplot/src/jqplot.themeEngine.js","webpack:///node_modules/jqplot/src/jqplot.toImage.js","webpack:///node_modules/jqplot/src/jquery.jqplot.css","webpack:///node_modules/jqplot/src/jsdate.js","webpack:///node_modules/jqplot/src/plugins/jqplot.barRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.canvasAxisLabelRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.canvasAxisTickRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.canvasTextRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.categoryAxisRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.cursor.js","webpack:///node_modules/jqplot/src/plugins/jqplot.dateAxisRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.highlighter.js","webpack:///node_modules/jqplot/src/plugins/jqplot.logAxisRenderer.js","webpack:///node_modules/jqplot/src/plugins/jqplot.pointLabels.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/data_loader.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/drag_and_drop_handler.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/elements_renderer.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/key_handler.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/mouse.widget.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/node.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/node_element.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/save_state_handler.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/scroll_handler.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/select_node_handler.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/simple.widget.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/tree.jquery.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/util.js","webpack:///../plugins/base/piwik/node_modules/jqtree/lib/version.js","webpack:///../plugins/base/piwik/indico_piwik/client/index.js","webpack:///../plugins/base/piwik/indico_piwik/client/main.css","webpack:///external \"jQuery\""],"names":["$","$t","$T","domain","treeDOMTarget","draw_jqplot_graph","source","DOMTarget","replot","html","plotOptions","axes","xaxis","renderer","jqplot","DateAxisRenderer","min","window","piwikReportDates","start","max","end","yaxis","numberTicks","cursor","show","zoom","showTooltip","highlighter","sizeAdjust","legend","location","grid","background","shadow","series","showMarker","lineWidth","color","label","gettext","draw_jqTree","treeData","tree","data","autoOpen","saveState","onCanSelectNode","node","children","length","onCreateLi","$li","id","undefined","find","addClass","get_api_params","params","val","contrib_id","get_updated_uri","param","get_jqplot_array_values","key","with_date","output","date","hits","value","push","load_material_graph","uri","graph_params","download_url","ajax","url","build_url","PiwikPlugin","urls","data_downloads","type","dataType","success","handleAjaxError","materialHits","metrics","downloads","individual","cumulative","total","load_material_tree","progressIndicator","dom","material","load_visits_graph","data_visits","load_graphs","graph_requests","each","index","request","endpoint","graph_holder","graphs","report","attr","error","text","replaceWith","init","click","e","preventDefault","$this","filter","is","slideToggle","datepicker","dateFormat","defaultDate","format","href","bind","event","name","dialog","modal","resizable","buttons","Ok"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,U;;;;;;;;;;;AChqBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,U;;;;;;;;;;;AC9LD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAwC;;AAEhE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,mHAAmH;AACtN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,8GAA8G;AACpN;AACA,8DAA8D,6BAA6B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,mHAAmH;AACtN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,8GAA8G;AACpN;AACA,8DAA8D,6BAA6B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,4CAA4C;AAChH;AACA;AACA,kFAAkF,yEAAyE;AAC3J;AACA,wCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,8GAA8G;AAC1L;AACA;AACA,kDAAkD,6BAA6B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,wFAAwF;AAC9J,0EAA0E,wFAAwF;AAClK,4EAA4E,sFAAsF;AAClK,wEAAwE,sFAAsF;AAC9J;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;AC9XD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,cAAc;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,uBAAuB,OAAO,kBAAkB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,6BAA6B;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,2EAA2E,OAAO;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,a;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,a;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,4BAA4B,8BAA8B;AAC1D,6BAA6B,SAAS;AACtgCAAgC,iCAAiC;AACjE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,mFAAmF;AACjH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAyC,KAAK,O;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gD;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,sCAAsC;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAkD;AACvE,qBAAqB;AACrlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;;AAEA;;AAEA;AACA;AACA,iBAAiB,sCAAsC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,uCAAuC;AACxD;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C;AAC9C;;AAEA;;AAEA;AACA;AACA,iBAAiB,4CAA4C;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,6CAA6C;AAC9D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA,gD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,yEAAyE;;AAEjG;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC,0BAA0B,gBAAgB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,mBAAmB,QAAQ,UAAU,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,WAAW,cAAc;AACtJ;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4B;AACA,gCAAgC;AAChC,6BAA6B;AAC7B,oCAAoC;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gCAAgC;AACzD;AACA;;AAEA,yBAAyB,kCAAkC;AAC3D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,KAAK;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oGAAoG;AACpG;AACA;AACA;AACA;AACA;;AAEA,oGAAoG,mBAAmB,kBAAkB,mBAAmB;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA,6BAA6B,sCAAsC;AACnE;AACA;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAuC;AACpE;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,iCAAiC;AAC1D;AACA;;AAEA,yBAAyB,mCAAmC;AAC5D;AACA;AACA,U;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;;AAE3C;AACA;;AAEA,yBAAyB,gCAAgC;AACzD;AACA;;AAEA,yBAAyB,kCAAkC;AAC3D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8CAA8C,KAAK;AACnD;AACA;;AAEA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;AACA;AACA,6BAA6B,sCAAsC;AACnE;AACA;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAuC;AACpE;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,KAAK;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0DAA0D,KAAK;AAC/D;AACA;;AAEA,4DAA4D,KAAK;AACjE;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE;AACzE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA,6BAA6B,KAAK;AAClC;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oBAAoB,EAAE;AACxE;AACA;AACA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oBAAoB,EAAE;AACxE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,sBAAsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,yBAAyB,0CAA0C;AACnE;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,MAAM;AAC/B;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D;AACA,oB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,KAAK;AACjD;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,oBAAoB;AAC7C,4CAA4C,SAAS,GAAG,+EAA+E,wDAAwD,iBAAiB,WAAW,qBAAqB;AAChP;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2BAA2B;AAC7E,uC;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,yCAAyC;AAClE;AACA;AACA,yBAAyB,2CAA2C;AACpE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,KAAK;AAC9D;AACA;AACA,2DAA2D,KAAK;AAChE;AACA;AACA;AACA,kEAAkE,iCAAiC;AACnG;AACA;AACA,iCAAiC,cAAc;;AAE/C;AACA;AACA,oDAAoD;;AAEpD,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,uGAAuG,GAAG,sEAAsE;AAC/M,+BAA+B,mGAAmG,GAAG,wEAAwE;AAC7M,gCAAgC,kGAAkG,GAAG,sEAAsE;AAC3M,yBAAyB,KAAK;AAC9B,sCAAsC,uEAAuE,GAAG,wEAAwE;AACxL;AACA;AACA,kCAAkC,sEAAsE,GAAG,wEAAwE;;AAEnL;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0C;AACA;AACA;AACA;AACA,yCAAyC,YAAY,wLAAwL;AAC7O;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,oD;AACA;;AAEA;AACA,mEAAmE,KAAK;AACxE;AACA;AACA,oFAAoF,UAAU;AAC9F;;AAEA;AACA,qEAAqE,KAAK;AAC1E;AACA;AACA,sFAAsF,UAAU;AAChG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,yBAAyB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,KAAK;AACnE;AACA;;AAEA,gEAAgE,KAAK;AACrE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,mDAAmD;AACrH,wEAAwE,mDAAmD;AAC3H;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,UAAU;AAC5D,qDAAqD,UAAU;AAC/D,sDAAsD,UAAU;AAChE,sDAAsD,UAAU;AAChE,uDAAuD,UAAU;AACjE,uDAAuD,UAAU;AACjE;AACA,wDAAwD,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA,wDAAwD,UAAU;AAClE;AACA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA,wCAAwC;AACxC;AACA,yB;AACA,8B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2I;AACA;;AAEA;AACA;AACA;;AAEA,iDAAiD,gBAAgB,Q;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,iC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,6B;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,IAAI,wBAAwB,IAAI,wBAAwB,IAAI;AAC/F;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI,wBAAwB,IAAI,wBAAwB,IAAI;AAC/F;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,CAAC;;;;;;;;;;;;AC7iID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,6EAA6E;AAC7E,2EAA2E;AAC3E,8EAA8E,uBAAuB;AACrG,uDAAuD;AACvD,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;ACvHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA,CAAC;;;;;;;;;;;;ACnFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,uCAAuC;;AAEvC;AACA;AACA,6BAA6B,uBAAuB;AACpD,6BAA6B,uBAAuB;AACpD,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;;AAEL,CAAC;;;;;;;;;;;;AC9QD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;ACpJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,qBAAqB;;AAErB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,iIAAiI;;AAEnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oCAAoC,KAAK;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,OAAO;;AAE7C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA,yC;;AAEA,8B;AACA,wD;AACA;AACA,iBAAiB;AACjB,sD;AACA,sD;AACA;AACA,8B;AACA,uD;AACA;AACA,iBAAiB;AACjB,uD;AACA,uD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0E;AACA,oF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,mE;AACA;AACA;AACA;AACA;AACA,mDAAmD,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gE;AACA;AACA;AACA;AACA;AACA,mDAAmD,KAAK;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wE;AACA;AACA;AACA,uDAAuD,SAAS,4BAA4B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,M;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD,UAAU,iBAAiB,2BAA2B,EAAE;AAC3G,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,U;;;;;;;;;;;AC7sCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wD;AACA;AACA;AACA;AACA,gCAAgC,4CAA4C;AAC5E;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA;AACA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA;AACA;AACA,S;AACA,M;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,oBAAoB;AACzkH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8F;AACA;AACA;AACA;AACA;AACA,sDAAsD,GAAG;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iCAAiC,mBAAmB;AACpD;AACA,8CAA8C,qBAAqB,qDAAqD;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxgBAAgB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA,gD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;AC7+BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,KAAK;AACtsDAAsD;AACtD,qDAAqD;AACrD,sDAAsD;AACtD,4CAA4C;AAC5C,0BAA0B;AAC1B;;AAEA;AACA,gCAAgC;AAChC,mEAAmE;AACnE,kDAAkD;AAClD;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA,gCAAgC;AAChC,mEAAmE;AACnE,kDAAkD;AAClD;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,qDAAqD;AACrD,8DAA8D;AAC9D,4CAA4C;AAC5C,0BAA0B;;AAE1B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,gCAAgC;AAChC,mCAAmC;AACnC,6BAA6B;AAC7B,+CAA+C;AAC/C,gDAAgD;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC,U;;;;;;;;;;;ACxYD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB,gBAAgB;AACrE;AACA,oDAAoD,gBAAgB;AACpE,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB,gBAAgB;AACrE;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;ACpOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA,qF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;AC3ID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;ACrKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,0BAA0B,KAAK;AAC/B,2EAA2E,EAAE;AAC7E;AACA,6B;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB,EAAE;AACnD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,gCAAgC;AAC1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oCAAoC,YAAY;;AAEhD;AACA;AACA,2BAA2B,2BAA2B;AACtD,+CAA+C;AAC/C,+CAA+C;AAC/C,6CAA6C;AAC7C,yCAAyC;AACzC,6CAA6C;AAC7C,2CAA2C;AAC3C,qDAAqD;AACrD;;AAEA;AACA;;AAEA;AACA;AACA,a;AACA;AACA;AACA,a;AACA;AACA;AACA,a;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,a;AACA;AACA;AACA,a;AACA;AACA;AACA,agBAAgB,4FAA4F;AAC5G;;AAEA;AACA;AACA;;AAEA,CAAC,U;;;;;;;;;;;;ACrUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,oCAAoC;;AAExD;AACA;AACA;AACA;AACA,sBAAsB,2CAA2C;;AAEjE;;AAEA,2EAA2E,mBAAmB;AAC9F,+FAA+F,uBAAuB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qCAAqC;AACtE;AACA;AACA;AACA;AACA,yB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wBAAwB;AAChE;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA,wCAAwC,2BAA2B;AACnE;AACA;AACA,wCAAwC,2CAA2C;AACnF;AACA;AACA;AACA,wCAAwC,+BAA+B;AACvE;AACA;AACA,wCAAwC,yCAAyC;AACjF;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA,wCAAwC,2CAA2C;AACnF;AACA;AACA;AACA,S;AACA;AACA,CAAC,U;;;;;;;;;;;AClUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,0BAA0B;AAC1B;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,0BAA0B;AAC1B,kBAAkB;AAClB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,YAAY;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,a;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,S;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,EAAE;AACpnp5BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sCAAsC;AACtC,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,kBAAkB;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA,oD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oDAAoD;AACpD,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;ACnWD,yC;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAoC,sBAAsB,OAAO;AACjF;AACA,oDAAoD,+BAA+B;AACnF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,O;AACjB;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,mCAAmC,kBAAkB,OAAO;AAC3E,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2F;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,8C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA,gD;AACA,sC;AACA,6B;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,sE;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA,M;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,M;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uEAAuE;AACvF;AACA;AACA,kEAAkE,+BAA+B;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,aAAa,qBAAqB;AAClC,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,6DAA6D,qCAAqC;AAClG,yDAAyD,wBAAwB;AACjF;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,2DAA2D;AAC3D;AACA,6DAA6D,+DAA+D;AAC5H,0EAA0E;AAC1E;AACA,SAAS;;AAET;AACA,2DAA2D;AAC3D;AACA,6DAA6D,+DAA+D;AAC5H,0EAA0E;AAC1E;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,S;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sCAAsC,mBAAmB,OAAO;AAC/E,eAAe,OAAO;AACtB,aAAa,qBAAqB;AAClC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6CAA6C,IAAI,SAAS,IAAI,SAAS,IAAI;;AAE3E;AACA;AACA;AACA;AACA;;AAEA;AACA,kEAAkE,GAAG,UAAU,EAAE;;AAEjF;AACA,iEAAiE,GAAG,UAAU,EAAE;AAChF;AACA;AACA;AACA;;AAEA;AACA,sEAAsE,GAAG,UAAU,EAAE;;AAErF;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,IAAI,aAAa,IAAI,aAAa,IAAI;;AAE9E;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8CAA8C,IAAI,aAAa,IAAI,aAAa,IAAI;;AAEpF;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C,IAAI,aAAa,IAAI,aAAa,IAAI;;AAElF;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,EAAE;AAChE;AACA,mBAAmB,EAAE;AACrB;AACA,uB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0DAA0D,EAAE,aAAa,IAAI,aAAa,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA;;AAEA,CAAC,U;;;;;;;;;;;ACpoBAAoB;AACpB;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6EAA6E;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uB;AACA;;AAEA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,wE;AACA;AACA;;AAEA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA,S;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA,a;;AAEA;AACA;;AAEA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC;AACpC;;AAEA;AACA;AACA,mDAAmD,UAAU,iBAAiB,2BAA2B,EAAE;AAC3G,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,CAAC;;;;;;;;;;;;AChyBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;;AAEhC;;AAEA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4E;AACA;AACA;AACA;AACA,wE;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,iKAAiK;AAClM;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wBAAwB,sBAAsB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC,U;;;;;;;;;;;AC1MD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;;AAEhC;;AAEA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4E;AACA;AACA;AACA;AACA,wE;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,iKAAiK;AAClM;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC,U;;;;;;;;;;;AC5PD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,c;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,oCAAoC;AACpC,mCAAmC;AACnC,+B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,wBAAwB;AACvC,eAAe,0EAA0E;AACzF,eAAe,6DAA6D;AAC5E,eAAe,0GAA0G;AACzH,eAAe,kNAAkN;AACjO,eAAe,yPAAyP;AACxQ,eAAe,2QAA2Q;AAC1R,gBAAgB,wEAAwE;AACxF,eAAe,6FAA6F;AAC5G,eAAe,6FAA6F;AAC5G,eAAe,kFAAkF;AACjG,eAAe,2DAA2D;AAC1E,eAAe,0EAA0E;AACzF,eAAe,oCAAoC;AACnD,eAAe,qDAAqD;AACpE,eAAe,sCAAsC;AACrD,eAAe,8IAA8I;AAC7J,eAAe,oDAAoD;AACnE,eAAe,+HAA+H;AAC9I,eAAe,iIAAiI;AAChJ,eAAe,mEAAmE;AAClF,eAAe,8IAA8I;AAC7J,eAAe,4LAA4L;AAC3M,eAAe,4DAA4D;AAC3E,eAAe,oOAAoO;AACnP,eAAe,yLAAyL;AACxM,eAAe,gGAAgG;AAC/G,WAAW,IAAI,qHAAqH;AACpI,eAAe,4CAA4C;AAC3D,eAAe,2DAA2D;AAC1E,eAAe,2CAA2C;AAC1D,eAAe,sKAAsK;AACrL,eAAe,oaAAoa;AACnb,eAAe,+EAA+E;AAC9F,eAAe,kMAAkM;AACjN,eAAe,oJAAoJ;AACnK,eAAe,oIAAoI;AACnJ,eAAe,uGAAuG;AACtH,eAAe,kFAAkF;AACjG,eAAe,iLAAiL;AAChM,eAAe,kFAAkF;AACjG,eAAe,mCAAmC;AAClD,eAAe,wFAAwF;AACvG,eAAe,gFAAgF;AAC/F,eAAe,yDAAyD;AACxE,eAAe,wGAAwG;AACvH,eAAe,iFAAiF;AAChG,eAAe,0KAA0K;AACzL,eAAe,0HAA0H;AACzI,eAAe,iMAAiM;AAChN,eAAe,iJAAiJ;AAChK,eAAe,oKAAoK;AACnL,eAAe,2DAA2D;AAC1E,eAAe,2FAA2F;AAC1G,eAAe,0DAA0D;AACzE,eAAe,wGAAwG;AACvH,eAAe,2DAA2D;AAC1E,eAAe,kEAAkE;AACjF,eAAe,iFAAiF;AAChG,eAAe,yGAAyG;AACxH,gBAAgB,sCAAsC;AACtD,eAAe,2GAA2G;AAC1H,eAAe,gGAAgG;AAC/G,eAAe,sCAAsC;AACrD,eAAe,wEAAwE;AACvF,eAAe,8IAA8I;AAC7J,eAAe,8IAA8I;AAC7J,eAAe,uHAAuH;AACtI,eAAe,8IAA8I;AAC7J,eAAe,4IAA4I;AAC3J,eAAe,gFAAgF;AAC/F,eAAe,qLAAqL;AACpM,eAAe,gGAAgG;AAC/G,eAAe,8EAA8E;AAC7F,eAAe,qGAAqG;AACpH,eAAe,+EAA+E;AAC9F,eAAe,mCAAmC;AAClD,eAAe,+JAA+J;AAC9K,eAAe,gGAAgG;AAC/G,eAAe,4IAA4I;AAC3J,eAAe,+IAA+I;AAC9J,eAAe,+IAA+I;AAC9J,eAAe,+EAA+E;AAC9F,eAAe,4IAA4I;AAC3J,eAAe,6EAA6E;AAC5F,eAAe,4FAA4F;AAC3G,eAAe,0DAA0D;AACzE,eAAe,wGAAwG;AACvH,eAAe,2DAA2D;AAC1E,eAAe,sFAAsF;AACrG,eAAe,iFAAiF;AAChG,WAAW,IAAI,+RAA+R;AAC9S,eAAe,oCAAoC;AACnD,WAAW,IAAI,gSAAgS;AAC/S,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8EAA8E;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC,U;;;;;;;;;;;AChcD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,yDAAyD;AACnF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,aAAa,mBAAmB;AAC9D;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,YAAY,O;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,+CAA+C,cAAc,EAAE;AAC/D;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,uBAAuB;AAChD;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iHAAiH;;AAEjH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wD;AACA;AACA;AACA;AACA,gCAAgC,4CAA4C;AAC5E;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA;AACA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA,sCAAsC,cAAc;AACpD,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uDAAuD;AACrG;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA,gD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;;AAEA;AACA,4EAA4E;AAC5E,yBAAyB,4BAA4B;AACrD;AACA;AACA,sCAAsC,cAAc,OAAO;AAC3D,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,iDAAiD;AAC/F;;AAEA;AACA;AACA;AACA,M;;;AAGA,CAAC;;;;;;;;;;;;ACtqsBAAsB,uEAAuE,QAAQ,SAAS,YAAY;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,oCAAoC;;;AAGhE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,S;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,kK;AACA;AACA,yC;AACA,iD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mLAAmL,IAAI;;AAEvL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qC;AACA;AACA;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;AACA;AACA,2CAA2C,yDAAyD;AACpG;AACA;AACA,iB;AACA;AACA;AACA;AACA;;AAEA;AACA,oC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oC;AACA;AACA,qC;AACA;AACA,kC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,UAAU;AACjE,SAAS;AACT,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA;AACA;AACA,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;AACA;AACA,6DAA6D,UAAU,kB;AACvE,aAAa;AACb,4DAA4D,UAAU,kB;AACtE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,UAAU;AACzC,wCAAwC,cAAc;AACtD,+BAA+B,UAAU;AACzC,yCAAyC,eAAe;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qCAAqC;AACtE;AACA;AACA;AACA;AACA,yB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F,sDAAsD,cAAc;AACpE,4FAA4F;AAC5F;AACA,0GAA0G,mBAAmB;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;ACnlCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,uBAAuB;AAC5C,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,YAAY,O;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4B;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA,6B;AACA,yB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA,6B;AACA,yB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,2CAA2C;AACvF;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iDAAiD,qBAAqB,6BAA6B;AACnG;AACA;AACA;AACA;;AAEA,gCAAgC,YAAY;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,c;AACA;AACA;AACA;;AAEA,wCAAwC,qBAAqB,6BAA6B;;AAE1F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,YAAY;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,c;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uD;AACA;;AAEA;AACA;;AAEA,CAAC;;;;;;;;;;;;;ACnuBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,oCAAoC;;AAEvF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;;AAEA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,iqB;AACA,iB;AACA;AACA;AACA;AACA,CAAC,U;;;;;;;;;;;AChdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,eAAe;AACxC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA,a;AACA;;AAEA;AACA;AACA,wCAAwC,qBAAqB,6BAA6B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,6BAA6B,MAAM;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,MAAM;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE,qCAAqC,2CAA2C;AAChF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA,gD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA,S;AACA;AACA,CAAC,U;;;;;;;;;;;ACrhBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2D;AACA,yC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0D;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,OAAO;AACpD;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;AC1XY;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0CAA0C,gBAAgB,iCAAiC,eAAe;AAC1G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACpFa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,aAAa,mBAAO,CAAC,sBAAQ;AAC7B,aAAa,mBAAO,CAAC,qDAAQ;AAC7B,aAAa,mBAAO,CAAC,qaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACleY;AACb;AACA,aAAa,mBAAO,CAAC,qDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvtMa;AACbrHa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,uEAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC9Ja;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,uDAAuD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA,iCAAiC,iBAAiB;AAClD,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iBAAiB,sBAAsB;;AAEvC,iBAAiB,sCAAsC;;AAEvD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2BAA2B,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,6BAA6B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACthBa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,aAAa,mBAAO,CAAC,qDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AChNY;AACb;AACA,aAAa,mBAAO,CAAC,qDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0EAA0E,aAAa,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;ACtNa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,8BAA8B;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,gBAAgB;AACxa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0BAA0B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC3Ga;AACb;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,sCAAsC,uCAAuC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AClGa;AACb;AACA;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA,gBAAgB,mBAAO,CAAC,2DAAW;AACnC,aAAa,mBAAO,CAAC,sBAAQ;AAC7B,8BAA8B,mBAAO,CAAC,uFAAyB;AAC/D,0BAA0B,mBAAO,CAAC,+EAAqB;AACvD,oBAAoB,mBAAO,CAAC,mEAAe;AAC3C,oBAAoB,mBAAO,CAAC,mEAAe;AAC3C,qBAAqB,mBAAO,CAAC,qEAAgB;AAC7C,2BAA2B,mBAAO,CAAC,iFAAsB;AACzD,uBAAuB,mBAAO,CAAC,yEAAkB;AACjD,4BAA4B,mBAAO,CAAC,mFAAuB;AAC3D,sBAAsB,mBAAO,CAAC,uEAAiB;AAC/C,aAAa,mBAAO,CAAC,qDAAQ;AAC7B,aAAa,mBAAO,CAAC,qDAAQ;AAC7B,qBAAqB,mBAAO,CAAC,qEAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yBAAyB,EAAE;AAClF,sDAAsD,yBAAyB,EAAE;;AAEjF;AACA;AACA;AACA,0CAA0C,yBAAyB,EAAE;AACrE,2CAA2C,yBAAyB,EAAE;AACtqEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAcsCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,2CAA2C;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;AC15Ba;AACb;AACA,8BAA8B,6CAA6C;AAC3E,mCAAmC,gCAAgC;AACnE,0CAA0C;AAC1C;AACA;AACA,6BAA6B;AAC7B,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA,0CAA0C,mCAAmC;;;;;;;;;;;;;ACdhE;AACb;AACA;AACA;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEAA,CAAC,CAAC,YAAW;AACT,MAAIC,EAAE,GAAGC,EAAE,CAACC,MAAH,CAAU,OAAV,CAAT;AACA,MAAIC,aAAa,GAAG,eAApB;AAEA;;;;;;;AAMA,MAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAASC,MAAT,EAAiBC,SAAjB,EAA4BC,MAA5B,EAAoC;AACxDR,KAAC,CAAC,MAAMO,SAAP,CAAD,CAAmBE,IAAnB,CAAwB,EAAxB;AAEA,QAAIC,WAAW,GAAG;AACdC,UAAI,EAAE;AACFC,aAAK,EAAE;AACHC,kBAAQ,EAAEb,CAAC,CAACc,MAAF,CAASC,gBADhB;AAEHC,aAAG,EAAEC,MAAM,CAACC,gBAAP,CAAwBC,KAF1B;AAGHC,aAAG,EAAEH,MAAM,CAACC,gBAAP,CAAwBG;AAH1B,SADL;AAMFC,aAAK,EAAE;AACHN,aAAG,EAAE,CADF;AAEHO,qBAAW,EAAE;AAFV;AANL,OADQ;AAYdC,YAAM,EAAE;AACJC,YAAI,EAAE,IADF;AAEJC,YAAI,EAAE,IAFF;AAGJC,mBAAW,EAAE;AAHT,OAZM;AAiBdC,iBAAW,EAAE;AACTH,YAAI,EAAE,IADG;AAETI,kBAAU,EAAE;AAFH,OAjBC;AAqBdC,YAAM,EAAE;AACJL,YAAI,EAAE,IADF;AAEJM,gBAAQ,EAAE;AAFN,OArBM;AAyBdC,UAAI,EAAE;AACFC,kBAAU,EAAE,SADV;AAEFC,cAAM,EAAE;AAFN,OAzBQ;AA6BdC,YAAM,EAAE,CAAC;AACLC,kBAAU,EAAC,KADN;AAELC,iBAAS,EAAE,CAFN;AAGLC,aAAK,EAAE,SAHF;AAILC,aAAK,EAAEtC,EAAE,CAACuC,OAAH,CAAW,YAAX;AAJF,OAAD,EAKL;AACCJ,kBAAU,EAAC,KADZ;AAECC,iBAAS,EAAE,CAFZ;AAGCC,aAAK,EAAE,SAHR;AAICC,aAAK,EAAEtC,EAAE,CAACuC,OAAH,CAAW,aAAX;AAJR,OALK;AA7BM,KAAlB;;AA0CA,QAAIhC,MAAJ,EAAY;AACRR,OAAC,CAACc,MAAF,CAASP,SAAT,EAAoBD,MAApB,EAA4BI,WAA5B,EAAyCF,MAAzC;AACH,KAFD,MAEO;AACHR,OAAC,CAACc,MAAF,CAASP,SAAT,EAAoBD,MAApB,EAA4BI,WAA5B;AACH;AACJ,GAlDD;AAoDA;;;;;AAGA,MAAI+B,WAAW,GAAG,SAAdA,WAAc,CAASC,QAAT,EAAmB;AACjC1C,KAAC,CAACI,aAAD,CAAD,CAAiBuC,IAAjB,CAAsB;AAClBC,UAAI,EAAEF,QADY;AAElBG,cAAQ,EAAE,CAFQ;AAGlBC,eAAS,EAAE,IAHO;AAIlBC,qBAAe,EAAE,yBAASC,IAAT,EAAe;AAC5B;AACA,eAAQA,IAAI,CAACC,QAAL,CAAcC,MAAd,KAAyB,CAAjC;AACH,OAPiB;AAQlBC,gBAAU,EAAE,oBAASH,IAAT,EAAeI,GAAf,EAAoB;AAC5B,YAAIJ,IAAI,CAACK,EAAL,KAAYC,SAAhB,EAA2B;AACvBF,aAAG,CAACG,IAAJ,CAAS,QAAT,EAAmBC,QAAnB,CAA4B,gBAA5B;AACH;AACJ;AAZiB,KAAtB;AAcH,GAfD;AAiBA;;;;;AAGA,MAAIC,cAAc,GAAG,SAAjBA,cAAiB,GAAW;AAC5B,QAAIC,MAAM,GAAG;AAAC,gBAAU1D,CAAC,CAAC,SAAD,CAAD,CAAa2D,GAAb,EAAX;AACC,oBAAe3D,CAAC,CAAC,uBAAD,CAAD,CAA2B2D,GAA3B,EADhB;AAEC,kBAAa3D,CAAC,CAAC,qBAAD,CAAD,CAAyB2D,GAAzB;AAFd,KAAb;AAIA,QAAIC,UAAU,GAAG5D,CAAC,CAAC,YAAD,CAAD,CAAgB2D,GAAhB,EAAjB;;AACA,QAAIC,UAAU,IAAI,MAAlB,EAA0B;AACtBF,YAAM,CAACE,UAAP,GAAoBA,UAApB;AACH;;AAED,WAAOF,MAAP;AACH,GAXD;AAaA;;;;;AAGA,MAAIG,eAAe,GAAG,SAAlBA,eAAkB,GAAW;AAC7B,QAAIH,MAAM,GAAG;AAAC,oBAAe1D,CAAC,CAAC,uBAAD,CAAD,CAA2B2D,GAA3B,EAAhB;AACC,kBAAa3D,CAAC,CAAC,qBAAD,CAAD,CAAyB2D,GAAzB;AADd,KAAb;AAEA,QAAIC,UAAU,GAAG5D,CAAC,CAAC,qBAAD,CAAD,CAAyB2D,GAAzB,EAAjB;;AACA,QAAIC,UAAU,IAAI,MAAlB,EAA0B;AACtBF,YAAM,CAACE,UAAP,GAAoBA,UAApB;AACH;;AACD,WAAO5D,CAAC,CAAC8D,KAAF,CAAQJ,MAAR,CAAP;AACH,GARD;AAUA;;;;;;;AAKA,MAAIK,uBAAuB,GAAG,SAA1BA,uBAA0B,CAASnB,IAAT,EAAeoB,GAAf,EAAoBC,SAApB,EAA+B;AACzD,QAAMC,MAAM,GAAG,EAAf;AACAD,aAAS,GAAG,OAAOA,SAAP,KAAqB,WAArB,GAAmCA,SAAnC,GAA+C,IAA3D;;AAEA,SAAK,IAAIE,IAAT,IAAiBvB,IAAjB,EAAuB;AACnB,UAAMwB,IAAI,GAAGxB,IAAI,CAACuB,IAAD,CAAjB;AACA,UAAME,KAAK,GAAIJ,SAAD,GAAc,CAACE,IAAD,EAAOC,IAAI,CAACJ,GAAD,CAAX,CAAd,GAAkCI,IAAI,CAACJ,GAAD,CAApD;AACAE,YAAM,CAACI,IAAP,CAAYD,KAAZ;AACH;;AAED,WAAOH,MAAP;AACH,GAXD;AAaA;;;;;AAGA,MAAIK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAASC,GAAT,EAAchE,MAAd,EAAsB;AAC5CA,UAAM,GAAG,OAAOA,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,KAAlD;AACA,QAAID,SAAS,GAAG,uBAAhB;AACA,QAAIkE,YAAY,GAAGhB,cAAc,EAAjC;AACAgB,gBAAY,CAACC,YAAb,GAA4BF,GAA5B;AAEAxE,KAAC,CAAC2E,IAAF,CAAO;AACHC,SAAG,EAAEC,SAAS,CAACC,WAAW,CAACC,IAAZ,CAAiBC,cAAlB,EAAkCP,YAAlC,CADX;AAEHQ,UAAI,EAAE,MAFH;AAGHC,cAAQ,EAAE,MAHP;AAIHC,aAAO,EAAE,iBAASvC,IAAT,EAAe;AACpB,YAAIwC,eAAe,CAACxC,IAAD,CAAnB,EAA2B;AACvB;AACH;;AACD,YAAIyC,YAAY,GAAG,CAACtB,uBAAuB,CAACnB,IAAI,CAAC0C,OAAL,CAAaC,SAAb,CAAuBC,UAAxB,EAAoC,OAApC,CAAxB,EACCzB,uBAAuB,CAACnB,IAAI,CAAC0C,OAAL,CAAaC,SAAb,CAAuBC,UAAxB,EAAoC,QAApC,CADxB,CAAnB;AAEAnF,yBAAiB,CAACgF,YAAD,EAAe9E,SAAf,EAA0BC,MAA1B,CAAjB;AACAR,SAAC,CAAC,yBAAD,CAAD,CAA6BS,IAA7B,CAAkCmC,IAAI,CAAC0C,OAAL,CAAaC,SAAb,CAAuBE,UAAvB,CAAkCC,KAApE;AACH;AAZE,KAAP;AAcH,GApBD;AAsBA;;;;;AAGA,MAAIC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAW;AAChC3F,KAAC,CAACI,aAAD,CAAD,CAAiBK,IAAjB,CAAsBmF,iBAAiB,CAAC,IAAD,EAAO,IAAP,CAAjB,CAA8BC,GAApD;AAEA7F,KAAC,CAAC2E,IAAF,CAAO;AACHC,SAAG,EAAEC,SAAS,CAACC,WAAW,CAACC,IAAZ,CAAiBe,QAAlB,EAA4BrC,cAAc,EAA1C,CADX;AAEHwB,UAAI,EAAE,MAFH;AAGHC,cAAQ,EAAE,MAHP;AAIHC,aAAO,EAAE,iBAASvC,IAAT,EAAe;AACpB,YAAIwC,eAAe,CAACxC,IAAD,CAAnB,EAA2B;AACvB;AACH;;AACD,YAAIA,IAAI,CAACkD,QAAL,CAAcnD,IAAd,KAAuB,IAA3B,EAAiC;AAC7BF,qBAAW,CAACG,IAAI,CAACkD,QAAL,CAAcnD,IAAf,CAAX;AACH,SAFD,MAEO;AACH3C,WAAC,CAACI,aAAD,CAAD,CAAiBK,IAAjB,CAAsBR,EAAE,CAACuC,OAAH,CAAW,mBAAX,CAAtB;AACH;AACJ;AAbE,KAAP;AAeH,GAlBD;AAoBA;;;;;AAGA,MAAIuD,iBAAiB,GAAG,SAApBA,iBAAoB,CAASnD,IAAT,EAAe;AACnC,QAAIrC,SAAS,GAAG,cAAhB;AACAP,KAAC,CAAC,MAAMO,SAAP,CAAD,CAAmBE,IAAnB,CAAwBmF,iBAAiB,CAAC,IAAD,EAAO,IAAP,CAAjB,CAA8BC,GAAtD;AAEA7F,KAAC,CAAC2E,IAAF,CAAO;AACHC,SAAG,EAAEC,SAAS,CAACC,WAAW,CAACC,IAAZ,CAAiBiB,WAAlB,EAA+BvC,cAAc,EAA7C,CADX;AAEHwB,UAAI,EAAE,MAFH;AAGHC,cAAQ,EAAE,MAHP;AAIHC,aAAO,EAAE,iBAASvC,IAAT,EAAe;AACpB,YAAIwC,eAAe,CAACxC,IAAD,CAAnB,EAA2B;AACvB;AACH;;AACD,YAAItC,MAAM,GAAG,CAACyD,uBAAuB,CAACnB,IAAI,CAAC0C,OAAN,EAAe,OAAf,CAAxB,EACCvB,uBAAuB,CAACnB,IAAI,CAAC0C,OAAN,EAAe,QAAf,CADxB,CAAb;AAEAjF,yBAAiB,CAACC,MAAD,EAASC,SAAT,EAAoB,KAApB,CAAjB;AACH;AAXE,KAAP;AAaH,GAjBD;AAmBA;;;;;AAGA,MAAI0F,WAAW,GAAG,SAAdA,WAAc,GAAW;AACzB,QAAIC,cAAc,GAAG,CAAC;AAAC,kBAAY,iBAAb;AAAgC,gBAAU;AAA1C,KAAD,EACC;AAAC,kBAAY,eAAb;AAA8B,gBAAU;AAAxC,KADD,CAArB;AAEAlG,KAAC,CAACmG,IAAF,CAAOD,cAAP,EAAuB,UAASE,KAAT,EAAgBC,OAAhB,EAAyB;AAC5CrG,OAAC,CAAC2E,IAAF,CAAO;AACHC,WAAG,EAAEC,SAAS,CAACC,WAAW,CAACC,IAAZ,CAAiBsB,OAAO,CAACC,QAAzB,CAAD,EAAqC7C,cAAc,EAAnD,CADX;AAEHwB,YAAI,EAAE,MAFH;AAGHC,gBAAQ,EAAE,MAHP;AAIHC,eAAO,EAAE,iBAASvC,IAAT,EAAe;AACpB,cAAIwC,eAAe,CAACxC,IAAD,CAAnB,EAA2B;AACvB;AACH;;AACD,cAAI2D,YAAY,GAAIvG,CAAC,CAAC,MAAMqG,OAAO,CAACC,QAAf,CAArB;;AACA,cAAI1D,IAAI,CAAC4D,MAAL,CAAYH,OAAO,CAACI,MAApB,MAAgC,IAApC,EAA0C;AACtCF,wBAAY,CAACG,IAAb,CAAkB,KAAlB,EAAyB9D,IAAI,CAAC4D,MAAL,CAAYH,OAAO,CAACI,MAApB,CAAzB;AACH,WAFD,MAEO;AACH,gBAAIE,KAAK,GAAG3G,CAAC,CAAC,OAAD,CAAD,CAAW4G,IAAX,CAAgB3G,EAAE,CAACuC,OAAH,CAAW,wBAAX,CAAhB,CAAZ;AACA+D,wBAAY,CAACM,WAAb,CAAyBF,KAAzB;AACH;AACJ;AAfE,OAAP;AAiBH,KAlBD;AAmBH,GAtBD;;AAwBA,MAAIG,IAAI,GAAG,SAAPA,IAAO,GAAW;AAClB9G,KAAC,CAAC,cAAD,CAAD,CAAkB+G,KAAlB,CAAwB,UAASC,CAAT,EAAY;AAChCA,OAAC,CAACC,cAAF;AACA,UAAIC,KAAK,GAAGlH,CAAC,CAAC,IAAD,CAAb;AACA,UAAImH,MAAM,GAAGnH,CAAC,CAAC,cAAD,CAAd;;AACA,UAAImH,MAAM,CAACC,EAAP,CAAU,UAAV,CAAJ,EAA2B;AAAG;AAC1BF,aAAK,CAACN,IAAN,CAAWM,KAAK,CAACtE,IAAN,CAAW,SAAX,CAAX;AACH,OAFD,MAEO;AACHsE,aAAK,CAACN,IAAN,CAAWM,KAAK,CAACtE,IAAN,CAAW,SAAX,CAAX;AACH;;AACDuE,YAAM,CAACE,WAAP,CAAmB,MAAnB;AACH,KAVD;AAYArH,KAAC,CAAC,aAAD,CAAD,CAAiBsH,UAAjB,CAA4B;AACxBC,gBAAU,EAAG,UADW;AAExBC,iBAAW,EAAGxH,CAAC,CAAC,IAAD,CAAD,CAAQ0G,IAAR,CAAa,cAAb;AAFU,KAA5B;AAKA1G,KAAC,CAAC,cAAD,CAAD,CAAkB+G,KAAlB,CAAwB,YAAW;AAC/B,UAAInC,GAAG,GAAG,OAAO6C,MAAP,CAAc5D,eAAe,EAA7B,CAAV;AACA5C,YAAM,CAACc,QAAP,CAAgB2F,IAAhB,GAAuB9C,GAAvB;AACH,KAHD,EAlBkB,CAuBlB;;AACA5E,KAAC,CAACI,aAAD,CAAD,CAAiBuH,IAAjB,CAAsB,YAAtB,EAAoC,UAASC,KAAT,EAAgB;AAChD5H,OAAC,CAAC,gBAAD,CAAD,CAAoBS,IAApB,CAAyBmH,KAAK,CAAC5E,IAAN,CAAW6E,IAApC;AACA7H,OAAC,CAAC,wBAAD,CAAD,CAA4BS,IAA5B,CAAiCmF,iBAAiB,CAAC,IAAD,EAAO,IAAP,CAAjB,CAA8BC,GAA/D;AACAtB,yBAAmB,CAACqD,KAAK,CAAC5E,IAAN,CAAWK,EAAZ,EAAgB,IAAhB,CAAnB;AACH,KAJD,EAxBkB,CA8BlB;;AACArD,KAAC,CAAC,oBAAD,CAAD,CAAwB8H,MAAxB,CAA+B;AAC3BC,WAAK,EAAE,IADoB;AAE3BC,eAAS,EAAE,KAFgB;AAG3BnF,cAAQ,EAAE,KAHiB;AAI3BoF,aAAO,EAAE;AACLC,UAAE,EAAE,cAAW;AACXlI,WAAC,CAAC,IAAD,CAAD,CAAQ8H,MAAR,CAAe,OAAf;AACH;AAHI;AAJkB,KAA/B;AAWA7B,eAAW;AACXF,qBAAiB;AACjBJ,sBAAkB;AACrB,GA7CD;;AA+CAmB,MAAI;AACP,CAlRA,CAAD,C;;;;;;;;;;;ACLA,yC;;;;;;;;;;;ACAA,wB","file":"js/main.2960ca49.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/plugins/piwik/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","/* This file is part of Indico.\n * Copyright (C) 2002 - 2018 European Organization for Nuclear Research (CERN).\n *\n * Indico is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation; either version 3 of the\n * License, or (at your option) any later version.\n *\n * Indico is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Indico; if not, see <http://www.gnu.org/licenses/>.\n */\n\n// jqplot compatibility module:\n// imports all necesssay jqplot files,\n// $ is automatically extended with jqplot functionality.\n\nimport 'jqplot/src/jqplot.core';\nimport 'jqplot/src/jqplot.axisLabelRenderer';\nimport 'jqplot/src/jqplot.axisTickRenderer';\nimport 'jqplot/src/jqplot.canvasGridRenderer';\nimport 'jqplot/src/jqplot.divTitleRenderer';\nimport 'jqplot/src/jqplot.effects.core';\nimport 'jqplot/src/jqplot.effects.blind';\nimport 'jqplot/src/jqplot.linePattern';\nimport 'jqplot/src/jqplot.lineRenderer';\nimport 'jqplot/src/jqplot.linearAxisRenderer';\nimport 'jqplot/src/jqplot.linearTickGenerator';\nimport 'jqplot/src/jqplot.markerRenderer';\nimport 'jqplot/src/jqplot.shadowRenderer';\nimport 'jqplot/src/jqplot.shapeRenderer';\nimport 'jqplot/src/jqplot.sprintf';\nimport 'jqplot/src/jqplot.tableLegendRenderer';\nimport 'jqplot/src/jqplot.themeEngine';\nimport 'jqplot/src/jqplot.toImage';\nimport 'jqplot/src/jsdate';\n\nimport 'jqplot/src/plugins/jqplot.barRenderer';\nimport 'jqplot/src/plugins/jqplot.barRenderer.js';\nimport 'jqplot/src/plugins/jqplot.canvasAxisLabelRenderer';\nimport 'jqplot/src/plugins/jqplot.canvasAxisLabelRenderer.js';\nimport 'jqplot/src/plugins/jqplot.canvasAxisTickRenderer';\nimport 'jqplot/src/plugins/jqplot.canvasAxisTickRenderer.js';\nimport 'jqplot/src/plugins/jqplot.canvasTextRenderer';\nimport 'jqplot/src/plugins/jqplot.canvasTextRenderer.js';\nimport 'jqplot/src/plugins/jqplot.categoryAxisRenderer';\nimport 'jqplot/src/plugins/jqplot.categoryAxisRenderer.js';\nimport 'jqplot/src/plugins/jqplot.cursor';\nimport 'jqplot/src/plugins/jqplot.cursor.js';\nimport 'jqplot/src/plugins/jqplot.dateAxisRenderer';\nimport 'jqplot/src/plugins/jqplot.dateAxisRenderer.js';\nimport 'jqplot/src/plugins/jqplot.highlighter';\nimport 'jqplot/src/plugins/jqplot.highlighter.js';\nimport 'jqplot/src/plugins/jqplot.logAxisRenderer';\nimport 'jqplot/src/plugins/jqplot.logAxisRenderer.js';\nimport 'jqplot/src/plugins/jqplot.pointLabels';\nimport 'jqplot/src/plugins/jqplot.pointLabels.js';\n\nimport 'jqplot/src/jquery.jqplot.css';\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class: $.jqplot.AxisLabelRenderer\n    // Renderer to place labels on the axes.\n    $.jqplot.AxisLabelRenderer = function(options) {\n        // Group: Properties\n        $.jqplot.ElemContainer.call(this);\n        // name of the axis associated with this tick\n        this.axis;\n        // prop: show\n        // whether or not to show the tick (mark and label).\n        this.show = true;\n        // prop: label\n        // The text or html for the label.\n        this.label = '';\n        this.fontFamily = null;\n        this.fontSize = null;\n        this.textColor = null;\n        this._elem;\n        // prop: escapeHTML\n        // true to escape HTML entities in the label.\n        this.escapeHTML = false;\n        \n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.AxisLabelRenderer.prototype = new $.jqplot.ElemContainer();\n    $.jqplot.AxisLabelRenderer.prototype.constructor = $.jqplot.AxisLabelRenderer;\n    \n    $.jqplot.AxisLabelRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.AxisLabelRenderer.prototype.draw = function(ctx, plot) {\n        // Memory Leaks patch\n        if (this._elem) {\n            this._elem.emptyForce();\n            this._elem = null;\n        }\n\n        this._elem = $('<div style=\"position:absolute;\" class=\"jqplot-'+this.axis+'-label\"></div>');\n        \n        if (Number(this.label)) {\n            this._elem.css('white-space', 'nowrap');\n        }\n        \n        if (!this.escapeHTML) {\n            this._elem.html(this.label);\n        }\n        else {\n            this._elem.text(this.label);\n        }\n        if (this.fontFamily) {\n            this._elem.css('font-family', this.fontFamily);\n        }\n        if (this.fontSize) {\n            this._elem.css('font-size', this.fontSize);\n        }\n        if (this.textColor) {\n            this._elem.css('color', this.textColor);\n        }\n        \n        return this._elem;\n    };\n    \n    $.jqplot.AxisLabelRenderer.prototype.pack = function() {\n    };\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class: $.jqplot.AxisTickRenderer\n    // A \"tick\" object showing the value of a tick/gridline on the plot.\n    $.jqplot.AxisTickRenderer = function(options) {\n        // Group: Properties\n        $.jqplot.ElemContainer.call(this);\n        // prop: mark\n        // tick mark on the axis.  One of 'inside', 'outside', 'cross', '' or null.\n        this.mark = 'outside';\n        // name of the axis associated with this tick\n        this.axis;\n        // prop: showMark\n        // whether or not to show the mark on the axis.\n        this.showMark = true;\n        // prop: showGridline\n        // whether or not to draw the gridline on the grid at this tick.\n        this.showGridline = true;\n        // prop: isMinorTick\n        // if this is a minor tick.\n        this.isMinorTick = false;\n        // prop: size\n        // Length of the tick beyond the grid in pixels.\n        // DEPRECATED: This has been superceeded by markSize\n        this.size = 4;\n        // prop:  markSize\n        // Length of the tick marks in pixels.  For 'cross' style, length\n        // will be stoked above and below axis, so total length will be twice this.\n        this.markSize = 6;\n        // prop: show\n        // whether or not to show the tick (mark and label).\n        // Setting this to false requires more testing.  It is recommended\n        // to set showLabel and showMark to false instead.\n        this.show = true;\n        // prop: showLabel\n        // whether or not to show the label.\n        this.showLabel = true;\n        this.label = null;\n        this.value = null;\n        this._styles = {};\n        // prop: formatter\n        // A class of a formatter for the tick text.  sprintf by default.\n        this.formatter = $.jqplot.DefaultTickFormatter;\n        // prop: prefix\n        // String to prepend to the tick label.\n        // Prefix is prepended to the formatted tick label.\n        this.prefix = '';\n        // prop: suffix\n        // String to append to the tick label.\n        // Suffix is appended to the formatted tick label.\n        this.suffix = '';\n        // prop: formatString\n        // string passed to the formatter.\n        this.formatString = '';\n        // prop: fontFamily\n        // css spec for the font-family css attribute.\n        this.fontFamily;\n        // prop: fontSize\n        // css spec for the font-size css attribute.\n        this.fontSize;\n        // prop: textColor\n        // css spec for the color attribute.\n        this.textColor;\n        // prop: escapeHTML\n        // true to escape HTML entities in the label.\n        this.escapeHTML = false;\n        this._elem;\n        this._breakTick = false;\n        \n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.AxisTickRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.AxisTickRenderer.prototype = new $.jqplot.ElemContainer();\n    $.jqplot.AxisTickRenderer.prototype.constructor = $.jqplot.AxisTickRenderer;\n    \n    $.jqplot.AxisTickRenderer.prototype.setTick = function(value, axisName, isMinor) {\n        this.value = value;\n        this.axis = axisName;\n        if (isMinor) {\n            this.isMinorTick = true;\n        }\n        return this;\n    };\n    \n    $.jqplot.AxisTickRenderer.prototype.draw = function() {\n        if (this.label === null) {\n            this.label = this.prefix + this.formatter(this.formatString, this.value) + this.suffix;\n        }\n        var style = {position: 'absolute'};\n        if (Number(this.label)) {\n            style['whitSpace'] = 'nowrap';\n        }\n        \n        // Memory Leaks patch\n        if (this._elem) {\n            this._elem.emptyForce();\n            this._elem = null;\n        }\n\n        this._elem = $(document.createElement('div'));\n        this._elem.addClass(\"jqplot-\"+this.axis+\"-tick\");\n        \n        if (!this.escapeHTML) {\n            this._elem.html(this.label);\n        }\n        else {\n            this._elem.text(this.label);\n        }\n        \n        this._elem.css(style);\n\n        for (var s in this._styles) {\n            this._elem.css(s, this._styles[s]);\n        }\n        if (this.fontFamily) {\n            this._elem.css('font-family', this.fontFamily);\n        }\n        if (this.fontSize) {\n            this._elem.css('font-size', this.fontSize);\n        }\n        if (this.textColor) {\n            this._elem.css('color', this.textColor);\n        }\n        if (this._breakTick) {\n          this._elem.addClass('jqplot-breakTick');\n        }\n        \n        return this._elem;\n    };\n        \n    $.jqplot.DefaultTickFormatter = function (format, val) {\n        if (typeof val == 'number') {\n            if (!format) {\n                format = $.jqplot.config.defaultTickFormatString;\n            }\n            return $.jqplot.sprintf(format, val);\n        }\n        else {\n            return String(val);\n        }\n    };\n        \n    $.jqplot.PercentTickFormatter = function (format, val) {\n        if (typeof val == 'number') {\n            val = 100 * val;\n            if (!format) {\n                format = $.jqplot.config.defaultTickFormatString;\n            }\n            return $.jqplot.sprintf(format, val);\n        }\n        else {\n            return String(val);\n        }\n    };\n    \n    $.jqplot.AxisTickRenderer.prototype.pack = function() {\n    };\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {     \n    // Class: $.jqplot.CanvasGridRenderer\n    // The default jqPlot grid renderer, creating a grid on a canvas element.\n    // The renderer has no additional options beyond the <Grid> class.\n    $.jqplot.CanvasGridRenderer = function(){\n        this.shadowRenderer = new $.jqplot.ShadowRenderer();\n    };\n    \n    // called with context of Grid object\n    $.jqplot.CanvasGridRenderer.prototype.init = function(options) {\n        this._ctx;\n        $.extend(true, this, options);\n        // set the shadow renderer options\n        var sopts = {lineJoin:'miter', lineCap:'round', fill:false, isarc:false, angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, depth:this.shadowDepth, lineWidth:this.shadowWidth, closePath:false, strokeStyle:this.shadowColor};\n        this.renderer.shadowRenderer.init(sopts);\n    };\n    \n    // called with context of Grid.\n    $.jqplot.CanvasGridRenderer.prototype.createElement = function(plot) {\n        var elem;\n        // Memory Leaks patch\n        if (this._elem) {\n          if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n            elem = this._elem.get(0);\n            window.G_vmlCanvasManager.uninitElement(elem);\n            elem = null;\n          }\n          \n          this._elem.emptyForce();\n          this._elem = null;\n        }\n      \n        elem = plot.canvasManager.getCanvas();\n\n        var w = this._plotDimensions.width;\n        var h = this._plotDimensions.height;\n        elem.width = w;\n        elem.height = h;\n        this._elem = $(elem);\n        this._elem.addClass('jqplot-grid-canvas');\n        this._elem.css({ position: 'absolute', left: 0, top: 0 });\n        \n        elem = plot.canvasManager.initCanvas(elem);\n\n        this._top = this._offsets.top;\n        this._bottom = h - this._offsets.bottom;\n        this._left = this._offsets.left;\n        this._right = w - this._offsets.right;\n        this._width = this._right - this._left;\n        this._height = this._bottom - this._top;\n        // avoid memory leak\n        elem = null;\n        return this._elem;\n    };\n    \n    $.jqplot.CanvasGridRenderer.prototype.draw = function() {\n        this._ctx = this._elem.get(0).getContext(\"2d\");\n        var ctx = this._ctx;\n        var axes = this._axes;\n        // Add the grid onto the grid canvas.  This is the bottom most layer.\n        ctx.save();\n        ctx.clearRect(0, 0, this._plotDimensions.width, this._plotDimensions.height);\n        ctx.fillStyle = this.backgroundColor || this.background;\n        ctx.fillRect(this._left, this._top, this._width, this._height);\n        \n        ctx.save();\n        ctx.lineJoin = 'miter';\n        ctx.lineCap = 'butt';\n        ctx.lineWidth = this.gridLineWidth;\n        ctx.strokeStyle = this.gridLineColor;\n        var b, e, s, m;\n        var ax = ['xaxis', 'yaxis', 'x2axis', 'y2axis'];\n        for (var i=4; i>0; i--) {\n            var name = ax[i-1];\n            var axis = axes[name];\n            var ticks = axis._ticks;\n            var numticks = ticks.length;\n            if (axis.show) {\n                if (axis.drawBaseline) {\n                    var bopts = {};\n                    if (axis.baselineWidth !== null) {\n                        bopts.lineWidth = axis.baselineWidth;\n                    }\n                    if (axis.baselineColor !== null) {\n                        bopts.strokeStyle = axis.baselineColor;\n                    }\n                    switch (name) {\n                        case 'xaxis':\n                            drawLine (this._left, this._bottom, this._right, this._bottom, bopts);\n                            break;\n                        case 'yaxis':\n                            drawLine (this._left, this._bottom, this._left, this._top, bopts);\n                            break;\n                        case 'x2axis':\n                            drawLine (this._left, this._bottom, this._right, this._bottom, bopts);\n                            break;\n                        case 'y2axis':\n                            drawLine (this._right, this._bottom, this._right, this._top, bopts);\n                            break;\n                    }\n                }\n                for (var j=numticks; j>0; j--) {\n                    var t = ticks[j-1];\n                    if (t.show) {\n                        var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                        switch (name) {\n                            case 'xaxis':\n                                // draw the grid line if we should\n                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {\n                                    drawLine(pos, this._top, pos, this._bottom);\n                                }\n                                // draw the mark\n                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {\n                                    s = t.markSize;\n                                    m = t.mark;\n                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                    switch (m) {\n                                        case 'outside':\n                                            b = this._bottom;\n                                            e = this._bottom+s;\n                                            break;\n                                        case 'inside':\n                                            b = this._bottom-s;\n                                            e = this._bottom;\n                                            break;\n                                        case 'cross':\n                                            b = this._bottom-s;\n                                            e = this._bottom+s;\n                                            break;\n                                        default:\n                                            b = this._bottom;\n                                            e = this._bottom+s;\n                                            break;\n                                    }\n                                    // draw the shadow\n                                    if (this.shadow) {\n                                        this.renderer.shadowRenderer.draw(ctx, [[pos,b],[pos,e]], {lineCap:'butt', lineWidth:this.gridLineWidth, offset:this.gridLineWidth*0.75, depth:2, fill:false, closePath:false});\n                                    }\n                                    // draw the line\n                                    drawLine(pos, b, pos, e);\n                                }\n                                break;\n                            case 'yaxis':\n                                // draw the grid line\n                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {\n                                    drawLine(this._right, pos, this._left, pos);\n                                }\n                                // draw the mark\n                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {\n                                    s = t.markSize;\n                                    m = t.mark;\n                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                    switch (m) {\n                                        case 'outside':\n                                            b = this._left-s;\n                                            e = this._left;\n                                            break;\n                                        case 'inside':\n                                            b = this._left;\n                                            e = this._left+s;\n                                            break;\n                                        case 'cross':\n                                            b = this._left-s;\n                                            e = this._left+s;\n                                            break;\n                                        default:\n                                            b = this._left-s;\n                                            e = this._left;\n                                            break;\n                                            }\n                                    // draw the shadow\n                                    if (this.shadow) {\n                                        this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});\n                                    }\n                                    drawLine(b, pos, e, pos, {strokeStyle:axis.borderColor});\n                                }\n                                break;\n                            case 'x2axis':\n                                // draw the grid line\n                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {\n                                    drawLine(pos, this._bottom, pos, this._top);\n                                }\n                                // draw the mark\n                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {\n                                    s = t.markSize;\n                                    m = t.mark;\n                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                    switch (m) {\n                                        case 'outside':\n                                            b = this._top-s;\n                                            e = this._top;\n                                            break;\n                                        case 'inside':\n                                            b = this._top;\n                                            e = this._top+s;\n                                            break;\n                                        case 'cross':\n                                            b = this._top-s;\n                                            e = this._top+s;\n                                            break;\n                                        default:\n                                            b = this._top-s;\n                                            e = this._top;\n                                            break;\n                                            }\n                                    // draw the shadow\n                                    if (this.shadow) {\n                                        this.renderer.shadowRenderer.draw(ctx, [[pos,b],[pos,e]], {lineCap:'butt', lineWidth:this.gridLineWidth, offset:this.gridLineWidth*0.75, depth:2, fill:false, closePath:false});\n                                    }\n                                    drawLine(pos, b, pos, e);\n                                }\n                                break;\n                            case 'y2axis':\n                                // draw the grid line\n                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {\n                                    drawLine(this._left, pos, this._right, pos);\n                                }\n                                // draw the mark\n                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {\n                                    s = t.markSize;\n                                    m = t.mark;\n                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                                    switch (m) {\n                                        case 'outside':\n                                            b = this._right;\n                                            e = this._right+s;\n                                            break;\n                                        case 'inside':\n                                            b = this._right-s;\n                                            e = this._right;\n                                            break;\n                                        case 'cross':\n                                            b = this._right-s;\n                                            e = this._right+s;\n                                            break;\n                                        default:\n                                            b = this._right;\n                                            e = this._right+s;\n                                            break;\n                                            }\n                                    // draw the shadow\n                                    if (this.shadow) {\n                                        this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});\n                                    }\n                                    drawLine(b, pos, e, pos, {strokeStyle:axis.borderColor});\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n                t = null;\n            }\n            axis = null;\n            ticks = null;\n        }\n        // Now draw grid lines for additional y axes\n        //////\n        // TO DO: handle yMidAxis\n        //////\n        ax = ['y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];\n        for (var i=7; i>0; i--) {\n            var axis = axes[ax[i-1]];\n            var ticks = axis._ticks;\n            if (axis.show) {\n                var tn = ticks[axis.numberTicks-1];\n                var t0 = ticks[0];\n                var left = axis.getLeft();\n                var points = [[left, tn.getTop() + tn.getHeight()/2], [left, t0.getTop() + t0.getHeight()/2 + 1.0]];\n                // draw the shadow\n                if (this.shadow) {\n                    this.renderer.shadowRenderer.draw(ctx, points, {lineCap:'butt', fill:false, closePath:false});\n                }\n                // draw the line\n                drawLine(points[0][0], points[0][1], points[1][0], points[1][1], {lineCap:'butt', strokeStyle:axis.borderColor, lineWidth:axis.borderWidth});\n                // draw the tick marks\n                for (var j=ticks.length; j>0; j--) {\n                    var t = ticks[j-1];\n                    s = t.markSize;\n                    m = t.mark;\n                    var pos = Math.round(axis.u2p(t.value)) + 0.5;\n                    if (t.showMark && t.mark) {\n                        switch (m) {\n                            case 'outside':\n                                b = left;\n                                e = left+s;\n                                break;\n                            case 'inside':\n                                b = left-s;\n                                e = left;\n                                break;\n                            case 'cross':\n                                b = left-s;\n                                e = left+s;\n                                break;\n                            default:\n                                b = left;\n                                e = left+s;\n                                break;\n                        }\n                        points = [[b,pos], [e,pos]];\n                        // draw the shadow\n                        if (this.shadow) {\n                            this.renderer.shadowRenderer.draw(ctx, points, {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});\n                        }\n                        // draw the line\n                        drawLine(b, pos, e, pos, {strokeStyle:axis.borderColor});\n                    }\n                    t = null;\n                }\n                t0 = null;\n            }\n            axis = null;\n            ticks =  null;\n        }\n        \n        ctx.restore();\n        \n        function drawLine(bx, by, ex, ey, opts) {\n            ctx.save();\n            opts = opts || {};\n            if (opts.lineWidth == null || opts.lineWidth != 0){\n                $.extend(true, ctx, opts);\n                ctx.beginPath();\n                ctx.moveTo(bx, by);\n                ctx.lineTo(ex, ey);\n                ctx.stroke();\n                ctx.restore();\n            }\n        }\n        \n        if (this.shadow) {\n            var points = [[this._left, this._bottom], [this._right, this._bottom], [this._right, this._top]];\n            this.renderer.shadowRenderer.draw(ctx, points);\n        }\n        // Now draw border around grid.  Use axis border definitions. start at\n        // upper left and go clockwise.\n        if (this.borderWidth != 0 && this.drawBorder) {\n            drawLine (this._left, this._top, this._right, this._top, {lineCap:'round', strokeStyle:axes.x2axis.borderColor, lineWidth:axes.x2axis.borderWidth});\n            drawLine (this._right, this._top, this._right, this._bottom, {lineCap:'round', strokeStyle:axes.y2axis.borderColor, lineWidth:axes.y2axis.borderWidth});\n            drawLine (this._right, this._bottom, this._left, this._bottom, {lineCap:'round', strokeStyle:axes.xaxis.borderColor, lineWidth:axes.xaxis.borderWidth});\n            drawLine (this._left, this._bottom, this._left, this._top, {lineCap:'round', strokeStyle:axes.yaxis.borderColor, lineWidth:axes.yaxis.borderWidth});\n        }\n        // ctx.lineWidth = this.borderWidth;\n        // ctx.strokeStyle = this.borderColor;\n        // ctx.strokeRect(this._left, this._top, this._width, this._height);\n        \n        ctx.restore();\n        ctx =  null;\n        axes = null;\n    };\n})(jQuery); ","/**\n * Title: jqPlot Charts\n * \n * Pure JavaScript plotting plugin for jQuery.\n * \n * About: Version\n * \n * version: @VERSION \n * revision: @REVISION\n * \n * About: Copyright & License\n * \n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT and GPL version 2.0 licenses. This means that you can \n * choose the license that best suits your project and use it accordingly.\n * \n * See <GPL Version 2> and <MIT License> contained within this distribution for further information. \n *\n * The author would appreciate an email letting him know of any substantial\n * use of jqPlot.  You can reach the author at: chris at jqplot dot com \n * or see http://www.jqplot.com/info.php.  This is, of course, not required.\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php.\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n * \n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n * \n * About: Introduction\n * \n * jqPlot requires jQuery (1.4+ required for certain features). jQuery 1.4.2 is included in the distribution.  \n * To use jqPlot include jQuery, the jqPlot jQuery plugin, the jqPlot css file and optionally \n * the excanvas script for IE support in your web page:\n * \n * > <!--[if lt IE 9]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.js\"></script><![endif]-->\n * > <script language=\"javascript\" type=\"text/javascript\" src=\"jquery-1.4.4.min.js\"></script>\n * > <script language=\"javascript\" type=\"text/javascript\" src=\"jquery.jqplot.min.js\"></script>\n * > <link rel=\"stylesheet\" type=\"text/css\" href=\"jquery.jqplot.css\" />\n * \n * jqPlot can be customized by overriding the defaults of any of the objects which make\n * up the plot. The general usage of jqplot is:\n * \n * > chart = $.jqplot('targetElemId', [dataArray,...], {optionsObject});\n * \n * The options available to jqplot are detailed in <jqPlot Options> in the jqPlotOptions.txt file.\n * \n * An actual call to $.jqplot() may look like the \n * examples below:\n * \n * > chart = $.jqplot('chartdiv',  [[[1, 2],[3,5.12],[5,13.1],[7,33.6],[9,85.9],[11,219.9]]]);\n * \n * or\n * \n * > dataArray = [34,12,43,55,77];\n * > chart = $.jqplot('targetElemId', [dataArray, ...], {title:'My Plot', axes:{yaxis:{min:20, max:100}}});\n * \n * For more inforrmation, see <jqPlot Usage>.\n * \n * About: Usage\n * \n * See <jqPlot Usage>\n * \n * About: Available Options \n * \n * See <jqPlot Options> for a list of options available thorugh the options object (not complete yet!)\n * \n * About: Options Usage\n * \n * See <Options Tutorial>\n * \n * About: Changes\n * \n * See <Change Log>\n * \n */\n\n(function($) {\n    // make sure undefined is undefined\n    var undefined;\n    \n    $.fn.emptyForce = function() {\n      for ( var i = 0, elem; (elem = $(this)[i]) != null; i++ ) {\n        // Remove element nodes and prevent memory leaks\n        if ( elem.nodeType === 1 ) {\n          $.cleanData( elem.getElementsByTagName(\"*\") );\n        }\n  \n        // Remove any remaining nodes\n        if ($.jqplot.use_excanvas) {\n          elem.outerHTML = \"\";\n        }\n        else {\n          while ( elem.firstChild ) {\n            elem.removeChild( elem.firstChild );\n          }\n        }\n\n        elem = null;\n      }\n  \n      return $(this);\n    };\n  \n    $.fn.removeChildForce = function(parent) {\n      while ( parent.firstChild ) {\n        this.removeChildForce( parent.firstChild );\n        parent.removeChild( parent.firstChild );\n      }\n    };\n\n    $.fn.jqplot = function() {\n        var datas = [];\n        var options = [];\n        // see how many data arrays we have\n        for (var i=0, l=arguments.length; i<l; i++) {\n            if ($.isArray(arguments[i])) {\n                datas.push(arguments[i]);\n            }\n            else if ($.isPlainObject(arguments[i])) {\n                options.push(arguments[i]);\n            }\n        }\n\n        return this.each(function(index) {\n            var tid, \n                plot, \n                $this = $(this),\n                dl = datas.length,\n                ol = options.length,\n                data, \n                opts;\n\n            if (index < dl) {\n                data = datas[index];\n            }\n            else {\n                data = dl ? datas[dl-1] : null;\n            }\n\n            if (index < ol) {\n                opts = options[index];\n            }\n            else {\n                opts = ol ? options[ol-1] : null;\n            }\n\n            // does el have an id?\n            // if not assign it one.\n            tid = $this.attr('id');\n            if (tid === undefined) {\n                tid = 'jqplot_target_' + $.jqplot.targetCounter++;\n                $this.attr('id', tid);\n            }\n\n            plot = $.jqplot(tid, data, opts);\n\n            $this.data('jqplot', plot);\n        });\n    };\n\n\n    /**\n     * Namespace: $.jqplot\n     * jQuery function called by the user to create a plot.\n     *  \n     * Parameters:\n     * target - ID of target element to render the plot into.\n     * data - an array of data series.\n     * options - user defined options object.  See the individual classes for available options.\n     * \n     * Properties:\n     * config - object to hold configuration information for jqPlot plot object.\n     * \n     * attributes:\n     * enablePlugins - False to disable plugins by default.  Plugins must then be explicitly \n     *   enabled in the individual plot options.  Default: false.\n     *   This property sets the \"show\" property of certain plugins to true or false.\n     *   Only plugins that can be immediately active upon loading are affected.  This includes\n     *   non-renderer plugins like cursor, dragable, highlighter, and trendline.\n     * defaultHeight - Default height for plots where no css height specification exists.  This\n     *   is a jqplot wide default.\n     * defaultWidth - Default height for plots where no css height specification exists.  This\n     *   is a jqplot wide default.\n     */\n\n    $.jqplot = function(target, data, options) {\n        var _data = null, _options = null;\n\n        if (arguments.length === 3) {\n            _data = data;\n            _options = options;\n        }\n\n        else if (arguments.length === 2) {\n            if ($.isArray(data)) {\n                _data = data;\n            }\n\n            else if ($.isPlainObject(data)) {\n                _options = data;\n            }\n        }\n\n        if (_data === null && _options !== null && _options.data) {\n            _data = _options.data;\n        }\n\n        var plot = new jqPlot();\n        // remove any error class that may be stuck on target.\n        $('#'+target).removeClass('jqplot-error');\n        \n        if ($.jqplot.config.catchErrors) {\n            try {\n                plot.init(target, _data, _options);\n                plot.draw();\n                plot.themeEngine.init.call(plot);\n                return plot;\n            }\n            catch(e) {\n                var msg = $.jqplot.config.errorMessage || e.message;\n                $('#'+target).append('<div class=\"jqplot-error-message\">'+msg+'</div>');\n                $('#'+target).addClass('jqplot-error');\n                document.getElementById(target).style.background = $.jqplot.config.errorBackground;\n                document.getElementById(target).style.border = $.jqplot.config.errorBorder;\n                document.getElementById(target).style.fontFamily = $.jqplot.config.errorFontFamily;\n                document.getElementById(target).style.fontSize = $.jqplot.config.errorFontSize;\n                document.getElementById(target).style.fontStyle = $.jqplot.config.errorFontStyle;\n                document.getElementById(target).style.fontWeight = $.jqplot.config.errorFontWeight;\n            }\n        }\n        else {        \n            plot.init(target, _data, _options);\n            plot.draw();\n            plot.themeEngine.init.call(plot);\n            return plot;\n        }\n    };\n\n    $.jqplot.version = \"@VERSION\";\n    $.jqplot.revision = \"@REVISION\";\n\n    $.jqplot.targetCounter = 1;\n\n    // canvas manager to reuse canvases on the plot.\n    // Should help solve problem of canvases not being freed and\n    // problem of waiting forever for firefox to decide to free memory.\n    $.jqplot.CanvasManager = function() {\n        // canvases are managed globally so that they can be reused\n        // across plots after they have been freed\n        if (typeof $.jqplot.CanvasManager.canvases == 'undefined') {\n            $.jqplot.CanvasManager.canvases = [];\n            $.jqplot.CanvasManager.free = [];\n        }\n        \n        var myCanvases = [];\n        \n        this.getCanvas = function() {\n            var canvas;\n            var makeNew = true;\n            \n            if (!$.jqplot.use_excanvas) {\n                for (var i = 0, l = $.jqplot.CanvasManager.canvases.length; i < l; i++) {\n                    if ($.jqplot.CanvasManager.free[i] === true) {\n                        makeNew = false;\n                        canvas = $.jqplot.CanvasManager.canvases[i];\n                        // $(canvas).removeClass('jqplot-canvasManager-free').addClass('jqplot-canvasManager-inuse');\n                        $.jqplot.CanvasManager.free[i] = false;\n                        myCanvases.push(i);\n                        break;\n                    }\n                }\n            }\n\n            if (makeNew) {\n                canvas = document.createElement('canvas');\n                myCanvases.push($.jqplot.CanvasManager.canvases.length);\n                $.jqplot.CanvasManager.canvases.push(canvas);\n                $.jqplot.CanvasManager.free.push(false);\n            }   \n            \n            return canvas;\n        };\n        \n        // this method has to be used after settings the dimesions\n        // on the element returned by getCanvas()\n        this.initCanvas = function(canvas) {\n            if ($.jqplot.use_excanvas) {\n                return window.G_vmlCanvasManager.initElement(canvas);\n            }\n\n            var cctx = canvas.getContext('2d');\n\n            var canvasBackingScale = 1;\n            if (window.devicePixelRatio > 1 && (cctx.webkitBackingStorePixelRatio === undefined || \n                                                cctx.webkitBackingStorePixelRatio < 2)) {\n                canvasBackingScale = window.devicePixelRatio;\n            }\n            var oldWidth = canvas.width;\n            var oldHeight = canvas.height;\n\n            canvas.width = canvasBackingScale * canvas.width;\n            canvas.height = canvasBackingScale * canvas.height;\n            canvas.style.width = oldWidth + 'px';\n            canvas.style.height = oldHeight + 'px';\n            cctx.save();\n\n            cctx.scale(canvasBackingScale, canvasBackingScale);\n\n            return canvas;\n        };\n\n        this.freeAllCanvases = function() {\n            for (var i = 0, l=myCanvases.length; i < l; i++) {\n                this.freeCanvas(myCanvases[i]);\n            }\n            myCanvases = [];\n        };\n\n        this.freeCanvas = function(idx) {\n            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                // excanvas can't be reused, but properly unset\n                window.G_vmlCanvasManager.uninitElement($.jqplot.CanvasManager.canvases[idx]);\n                $.jqplot.CanvasManager.canvases[idx] = null;\n            } \n            else {\n                var canvas = $.jqplot.CanvasManager.canvases[idx];\n                canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n                $(canvas).unbind().removeAttr('class').removeAttr('style');\n                // Style attributes seemed to be still hanging around.  wierd.  Some ticks\n                // still retained a left: 0px attribute after reusing a canvas.\n                $(canvas).css({left: '', top: '', position: ''});\n                // setting size to 0 may save memory of unused canvases?\n                canvas.width = 0;\n                canvas.height = 0;\n                $.jqplot.CanvasManager.free[idx] = true;\n            }\n        };\n        \n    };\n\n            \n    // Convienence function that won't hang IE or FF without FireBug.\n    $.jqplot.log = function() {\n        if (window.console) {\n            window.console.log.apply(window.console, arguments);\n        }\n    };\n        \n    $.jqplot.config = {\n        addDomReference: false,\n        enablePlugins:false,\n        defaultHeight:300,\n        defaultWidth:400,\n        UTCAdjust:false,\n        timezoneOffset: new Date(new Date().getTimezoneOffset() * 60000),\n        errorMessage: '',\n        errorBackground: '',\n        errorBorder: '',\n        errorFontFamily: '',\n        errorFontSize: '',\n        errorFontStyle: '',\n        errorFontWeight: '',\n        catchErrors: false,\n        defaultTickFormatString: \"%.1f\",\n        defaultColors: [ \"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n        defaultNegativeColors: [ \"#498991\", \"#C08840\", \"#9F9274\", \"#546D61\", \"#646C4A\", \"#6F6621\", \"#6E3F5F\", \"#4F64B0\", \"#A89050\", \"#C45923\", \"#187399\", \"#945381\", \"#959E5C\", \"#C7AF7B\", \"#478396\", \"#907294\"],\n        dashLength: 4,\n        gapLength: 4,\n        dotGapLength: 2.5,\n        srcLocation: 'jqplot/src/',\n        pluginLocation: 'jqplot/src/plugins/'\n    };\n    \n    \n    $.jqplot.arrayMax = function( array ){\n        return Math.max.apply( Math, array );\n    };\n    \n    $.jqplot.arrayMin = function( array ){\n        return Math.min.apply( Math, array );\n    };\n    \n    $.jqplot.enablePlugins = $.jqplot.config.enablePlugins;\n    \n    // canvas related tests taken from modernizer:\n    // Copyright (c) 2009 - 2010 Faruk Ates.\n    // http://www.modernizr.com\n    \n    $.jqplot.support_canvas = function() {\n        if (typeof $.jqplot.support_canvas.result == 'undefined') {\n            $.jqplot.support_canvas.result = !!document.createElement('canvas').getContext; \n        }\n        return $.jqplot.support_canvas.result;\n    };\n            \n    $.jqplot.support_canvas_text = function() {\n        if (typeof $.jqplot.support_canvas_text.result == 'undefined') {\n            if (window.G_vmlCanvasManager !== undefined && window.G_vmlCanvasManager._version > 887) {\n                $.jqplot.support_canvas_text.result = true;\n            }\n            else {\n                $.jqplot.support_canvas_text.result = !!(document.createElement('canvas').getContext && typeof document.createElement('canvas').getContext('2d').fillText == 'function');\n            }\n             \n        }\n        return $.jqplot.support_canvas_text.result;\n    };\n    \n    $.jqplot.use_excanvas = ((!$.support.boxModel || !$.support.objectAll || !$support.leadingWhitespace) && !$.jqplot.support_canvas()) ? true : false;\n    \n    /**\n     * \n     * Hooks: jqPlot Pugin Hooks\n     * \n     * $.jqplot.preInitHooks - called before initialization.\n     * $.jqplot.postInitHooks - called after initialization.\n     * $.jqplot.preParseOptionsHooks - called before user options are parsed.\n     * $.jqplot.postParseOptionsHooks - called after user options are parsed.\n     * $.jqplot.preDrawHooks - called before plot draw.\n     * $.jqplot.postDrawHooks - called after plot draw.\n     * $.jqplot.preDrawSeriesHooks - called before each series is drawn.\n     * $.jqplot.postDrawSeriesHooks - called after each series is drawn.\n     * $.jqplot.preDrawLegendHooks - called before the legend is drawn.\n     * $.jqplot.addLegendRowHooks - called at the end of legend draw, so plugins\n     *     can add rows to the legend table.\n     * $.jqplot.preSeriesInitHooks - called before series is initialized.\n     * $.jqplot.postSeriesInitHooks - called after series is initialized.\n     * $.jqplot.preParseSeriesOptionsHooks - called before series related options\n     *     are parsed.\n     * $.jqplot.postParseSeriesOptionsHooks - called after series related options\n     *     are parsed.\n     * $.jqplot.eventListenerHooks - called at the end of plot drawing, binds\n     *     listeners to the event canvas which lays on top of the grid area.\n     * $.jqplot.preDrawSeriesShadowHooks - called before series shadows are drawn.\n     * $.jqplot.postDrawSeriesShadowHooks - called after series shadows are drawn.\n     * \n     */\n    \n    $.jqplot.preInitHooks = [];\n    $.jqplot.postInitHooks = [];\n    $.jqplot.preParseOptionsHooks = [];\n    $.jqplot.postParseOptionsHooks = [];\n    $.jqplot.preDrawHooks = [];\n    $.jqplot.postDrawHooks = [];\n    $.jqplot.preDrawSeriesHooks = [];\n    $.jqplot.postDrawSeriesHooks = [];\n    $.jqplot.preDrawLegendHooks = [];\n    $.jqplot.addLegendRowHooks = [];\n    $.jqplot.preSeriesInitHooks = [];\n    $.jqplot.postSeriesInitHooks = [];\n    $.jqplot.preParseSeriesOptionsHooks = [];\n    $.jqplot.postParseSeriesOptionsHooks = [];\n    $.jqplot.eventListenerHooks = [];\n    $.jqplot.preDrawSeriesShadowHooks = [];\n    $.jqplot.postDrawSeriesShadowHooks = [];\n\n    // A superclass holding some common properties and methods.\n    $.jqplot.ElemContainer = function() {\n        this._elem;\n        this._plotWidth;\n        this._plotHeight;\n        this._plotDimensions = {height:null, width:null};\n    };\n    \n    $.jqplot.ElemContainer.prototype.createElement = function(el, offsets, clss, cssopts, attrib) {\n        this._offsets = offsets;\n        var klass = clss || 'jqplot';\n        var elem = document.createElement(el);\n        this._elem = $(elem);\n        this._elem.addClass(klass);\n        this._elem.css(cssopts);\n        this._elem.attr(attrib);\n        // avoid memory leak;\n        elem = null;\n        return this._elem;\n    };\n    \n    $.jqplot.ElemContainer.prototype.getWidth = function() {\n        if (this._elem) {\n            return this._elem.outerWidth(true);\n        }\n        else {\n            return null;\n        }\n    };\n    \n    $.jqplot.ElemContainer.prototype.getHeight = function() {\n        if (this._elem) {\n            return this._elem.outerHeight(true);\n        }\n        else {\n            return null;\n        }\n    };\n    \n    $.jqplot.ElemContainer.prototype.getPosition = function() {\n        if (this._elem) {\n            return this._elem.position();\n        }\n        else {\n            return {top:null, left:null, bottom:null, right:null};\n        }\n    };\n    \n    $.jqplot.ElemContainer.prototype.getTop = function() {\n        return this.getPosition().top;\n    };\n    \n    $.jqplot.ElemContainer.prototype.getLeft = function() {\n        return this.getPosition().left;\n    };\n    \n    $.jqplot.ElemContainer.prototype.getBottom = function() {\n        return this._elem.css('bottom');\n    };\n    \n    $.jqplot.ElemContainer.prototype.getRight = function() {\n        return this._elem.css('right');\n    };\n    \n\n    /**\n     * Class: Axis\n     * An individual axis object.  Cannot be instantiated directly, but created\n     * by the Plot object.  Axis properties can be set or overridden by the \n     * options passed in from the user.\n     * \n     */\n    function Axis(name) {\n        $.jqplot.ElemContainer.call(this);\n        // Group: Properties\n        //\n        // Axes options are specified within an axes object at the top level of the \n        // plot options like so:\n        // > {\n        // >    axes: {\n        // >        xaxis: {min: 5},\n        // >        yaxis: {min: 2, max: 8, numberTicks:4},\n        // >        x2axis: {pad: 1.5},\n        // >        y2axis: {ticks:[22, 44, 66, 88]}\n        // >        }\n        // > }\n        // There are 2 x axes, 'xaxis' and 'x2axis', and \n        // 9 yaxes, 'yaxis', 'y2axis'. 'y3axis', ...  Any or all of which may be specified.\n        this.name = name;\n        this._series = [];\n        // prop: show\n        // Wether to display the axis on the graph.\n        this.show = false;\n        // prop: tickRenderer\n        // A class of a rendering engine for creating the ticks labels displayed on the plot, \n        // See <$.jqplot.AxisTickRenderer>.\n        this.tickRenderer = $.jqplot.AxisTickRenderer;\n        // prop: tickOptions\n        // Options that will be passed to the tickRenderer, see <$.jqplot.AxisTickRenderer> options.\n        this.tickOptions = {};\n        // prop: labelRenderer\n        // A class of a rendering engine for creating an axis label.\n        this.labelRenderer = $.jqplot.AxisLabelRenderer;\n        // prop: labelOptions\n        // Options passed to the label renderer.\n        this.labelOptions = {};\n        // prop: label\n        // Label for the axis\n        this.label = null;\n        // prop: showLabel\n        // true to show the axis label.\n        this.showLabel = true;\n        // prop: min\n        // minimum value of the axis (in data units, not pixels).\n        this.min = null;\n        // prop: max\n        // maximum value of the axis (in data units, not pixels).\n        this.max = null;\n        // prop: autoscale\n        // DEPRECATED\n        // the default scaling algorithm produces superior results.\n        this.autoscale = false;\n        // prop: pad\n        // Padding to extend the range above and below the data bounds.\n        // The data range is multiplied by this factor to determine minimum and maximum axis bounds.\n        // A value of 0 will be interpreted to mean no padding, and pad will be set to 1.0.\n        this.pad = 1.2;\n        // prop: padMax\n        // Padding to extend the range above data bounds.\n        // The top of the data range is multiplied by this factor to determine maximum axis bounds.\n        // A value of 0 will be interpreted to mean no padding, and padMax will be set to 1.0.\n        this.padMax = null;\n        // prop: padMin\n        // Padding to extend the range below data bounds.\n        // The bottom of the data range is multiplied by this factor to determine minimum axis bounds.\n        // A value of 0 will be interpreted to mean no padding, and padMin will be set to 1.0.\n        this.padMin = null;\n        // prop: ticks\n        // 1D [val, val, ...] or 2D [[val, label], [val, label], ...] array of ticks for the axis.\n        // If no label is specified, the value is formatted into an appropriate label.\n        this.ticks = [];\n        // prop: numberTicks\n        // Desired number of ticks.  Default is to compute automatically.\n        this.numberTicks;\n        // prop: tickInterval\n        // number of units between ticks.  Mutually exclusive with numberTicks.\n        this.tickInterval;\n        // prop: renderer\n        // A class of a rendering engine that handles tick generation, \n        // scaling input data to pixel grid units and drawing the axis element.\n        this.renderer = $.jqplot.LinearAxisRenderer;\n        // prop: rendererOptions\n        // renderer specific options.  See <$.jqplot.LinearAxisRenderer> for options.\n        this.rendererOptions = {};\n        // prop: showTicks\n        // Wether to show the ticks (both marks and labels) or not.\n        // Will not override showMark and showLabel options if specified on the ticks themselves.\n        this.showTicks = true;\n        // prop: showTickMarks\n        // Wether to show the tick marks (line crossing grid) or not.\n        // Overridden by showTicks and showMark option of tick itself.\n        this.showTickMarks = true;\n        // prop: showMinorTicks\n        // Wether or not to show minor ticks.  This is renderer dependent.\n        this.showMinorTicks = true;\n        // prop: drawMajorGridlines\n        // True to draw gridlines for major axis ticks.\n        this.drawMajorGridlines = true;\n        // prop: drawMinorGridlines\n        // True to draw gridlines for minor ticks.\n        this.drawMinorGridlines = false;\n        // prop: drawMajorTickMarks\n        // True to draw tick marks for major axis ticks.\n        this.drawMajorTickMarks = true;\n        // prop: drawMinorTickMarks\n        // True to draw tick marks for minor ticks.  This is renderer dependent.\n        this.drawMinorTickMarks = true;\n        // prop: useSeriesColor\n        // Use the color of the first series associated with this axis for the\n        // tick marks and line bordering this axis.\n        this.useSeriesColor = false;\n        // prop: borderWidth\n        // width of line stroked at the border of the axis.  Defaults\n        // to the width of the grid boarder.\n        this.borderWidth = null;\n        // prop: borderColor\n        // color of the border adjacent to the axis.  Defaults to grid border color.\n        this.borderColor = null;\n        // prop: scaleToHiddenSeries\n        // True to include hidden series when computing axes bounds and scaling.\n        this.scaleToHiddenSeries = false;\n        // minimum and maximum values on the axis.\n        this._dataBounds = {min:null, max:null};\n        // statistics (min, max, mean) as well as actual data intervals for each series attached to axis.\n        // holds collection of {intervals:[], min:, max:, mean: } objects for each series on axis.\n        this._intervalStats = [];\n        // pixel position from the top left of the min value and max value on the axis.\n        this._offsets = {min:null, max:null};\n        this._ticks=[];\n        this._label = null;\n        // prop: syncTicks\n        // true to try and synchronize tick spacing across multiple axes so that ticks and\n        // grid lines line up.  This has an impact on autoscaling algorithm, however.\n        // In general, autoscaling an individual axis will work better if it does not\n        // have to sync ticks.\n        this.syncTicks = null;\n        // prop: tickSpacing\n        // Approximate pixel spacing between ticks on graph.  Used during autoscaling.\n        // This number will be an upper bound, actual spacing will be less.\n        this.tickSpacing = 75;\n        // Properties to hold the original values for min, max, ticks, tickInterval and numberTicks\n        // so they can be restored if altered by plugins.\n        this._min = null;\n        this._max = null;\n        this._tickInterval = null;\n        this._numberTicks = null;\n        this.__ticks = null;\n        // hold original user options.\n        this._options = {};\n    }\n    \n    Axis.prototype = new $.jqplot.ElemContainer();\n    Axis.prototype.constructor = Axis;\n    \n    Axis.prototype.init = function() {\n        if ($.isFunction(this.renderer)) {\n            this.renderer = new this.renderer();  \n        }\n        // set the axis name\n        this.tickOptions.axis = this.name;\n        // if showMark or showLabel tick options not specified, use value of axis option.\n        // showTicks overrides showTickMarks.\n        if (this.tickOptions.showMark == null) {\n            this.tickOptions.showMark = this.showTicks;\n        }\n        if (this.tickOptions.showMark == null) {\n            this.tickOptions.showMark = this.showTickMarks;\n        }\n        if (this.tickOptions.showLabel == null) {\n            this.tickOptions.showLabel = this.showTicks;\n        }\n        \n        if (this.label == null || this.label == '') {\n            this.showLabel = false;\n        }\n        else {\n            this.labelOptions.label = this.label;\n        }\n        if (this.showLabel == false) {\n            this.labelOptions.show = false;\n        }\n        // set the default padMax, padMin if not specified\n        // special check, if no padding desired, padding\n        // should be set to 1.0\n        if (this.pad == 0) {\n            this.pad = 1.0;\n        }\n        if (this.padMax == 0) {\n            this.padMax = 1.0;\n        }\n        if (this.padMin == 0) {\n            this.padMin = 1.0;\n        }\n        if (this.padMax == null) {\n            this.padMax = (this.pad-1)/2 + 1;\n        }\n        if (this.padMin == null) {\n            this.padMin = (this.pad-1)/2 + 1;\n        }\n        // now that padMin and padMax are correctly set, reset pad in case user has supplied \n        // padMin and/or padMax\n        this.pad = this.padMax + this.padMin - 1;\n        if (this.min != null || this.max != null) {\n            this.autoscale = false;\n        }\n        // if not set, sync ticks for y axes but not x by default.\n        if (this.syncTicks == null && this.name.indexOf('y') > -1) {\n            this.syncTicks = true;\n        }\n        else if (this.syncTicks == null){\n            this.syncTicks = false;\n        }\n        this.renderer.init.call(this, this.rendererOptions);\n        \n    };\n    \n    Axis.prototype.draw = function(ctx, plot) {\n        // Memory Leaks patch\n        if (this.__ticks) {\n          this.__ticks = null;\n        }\n\n        return this.renderer.draw.call(this, ctx, plot);\n        \n    };\n    \n    Axis.prototype.set = function() {\n        this.renderer.set.call(this);\n    };\n    \n    Axis.prototype.pack = function(pos, offsets) {\n        if (this.show) {\n            this.renderer.pack.call(this, pos, offsets);\n        }\n        // these properties should all be available now.\n        if (this._min == null) {\n            this._min = this.min;\n            this._max = this.max;\n            this._tickInterval = this.tickInterval;\n            this._numberTicks = this.numberTicks;\n            this.__ticks = this._ticks;\n        }\n    };\n    \n    // reset the axis back to original values if it has been scaled, zoomed, etc.\n    Axis.prototype.reset = function() {\n        this.renderer.reset.call(this);\n    };\n    \n    Axis.prototype.resetScale = function(opts) {\n        $.extend(true, this, {min: null, max: null, numberTicks: null, tickInterval: null, _ticks: [], ticks: []}, opts);\n        this.resetDataBounds();\n    };\n    \n    Axis.prototype.resetDataBounds = function() {\n        // Go through all the series attached to this axis and find\n        // the min/max bounds for this axis.\n        var db = this._dataBounds;\n        db.min = null;\n        db.max = null;\n        var l, s, d;\n        // check for when to force min 0 on bar series plots.\n        var doforce = (this.show) ? true : false;\n        for (var i=0; i<this._series.length; i++) {\n            s = this._series[i];\n            if (s.show || this.scaleToHiddenSeries) {\n                d = s._plotData;\n                if (s._type === 'line' && s.renderer.bands.show && this.name.charAt(0) !== 'x') {\n                    d = [[0, s.renderer.bands._min], [1, s.renderer.bands._max]];\n                }\n\n                var minyidx = 1, maxyidx = 1;\n\n                if (s._type != null && s._type == 'ohlc') {\n                    minyidx = 3;\n                    maxyidx = 2;\n                }\n                \n                for (var j=0, l=d.length; j<l; j++) { \n                    if (this.name == 'xaxis' || this.name == 'x2axis') {\n                        if ((d[j][0] != null && d[j][0] < db.min) || db.min == null) {\n                            db.min = d[j][0];\n                        }\n                        if ((d[j][0] != null && d[j][0] > db.max) || db.max == null) {\n                            db.max = d[j][0];\n                        }\n                    }              \n                    else {\n                        if ((d[j][minyidx] != null && d[j][minyidx] < db.min) || db.min == null) {\n                            db.min = d[j][minyidx];\n                        }\n                        if ((d[j][maxyidx] != null && d[j][maxyidx] > db.max) || db.max == null) {\n                            db.max = d[j][maxyidx];\n                        }\n                    }              \n                }\n\n                // Hack to not pad out bottom of bar plots unless user has specified a padding.\n                // every series will have a chance to set doforce to false.  once it is set to \n                // false, it cannot be reset to true.\n                // If any series attached to axis is not a bar, wont force 0.\n                if (doforce && s.renderer.constructor !== $.jqplot.BarRenderer) {\n                    doforce = false;\n                }\n\n                else if (doforce && this._options.hasOwnProperty('forceTickAt0') && this._options.forceTickAt0 == false) {\n                    doforce = false;\n                }\n\n                else if (doforce && s.renderer.constructor === $.jqplot.BarRenderer) {\n                    if (s.barDirection == 'vertical' && this.name != 'xaxis' && this.name != 'x2axis') { \n                        if (this._options.pad != null || this._options.padMin != null) {\n                            doforce = false;\n                        }\n                    }\n\n                    else if (s.barDirection == 'horizontal' && (this.name == 'xaxis' || this.name == 'x2axis')) {\n                        if (this._options.pad != null || this._options.padMin != null) {\n                            doforce = false;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        if (doforce && this.renderer.constructor === $.jqplot.LinearAxisRenderer && db.min >= 0) {\n            this.padMin = 1.0;\n            this.forceTickAt0 = true;\n        }\n    };\n\n    /**\n     * Class: Legend\n     * Legend object.  Cannot be instantiated directly, but created\n     * by the Plot object.  Legend properties can be set or overridden by the \n     * options passed in from the user.\n     */\n    function Legend(options) {\n        $.jqplot.ElemContainer.call(this);\n        // Group: Properties\n        \n        // prop: show\n        // Wether to display the legend on the graph.\n        this.show = false;\n        // prop: location\n        // Placement of the legend.  one of the compass directions: nw, n, ne, e, se, s, sw, w\n        this.location = 'ne';\n        // prop: labels\n        // Array of labels to use.  By default the renderer will look for labels on the series.\n        // Labels specified in this array will override labels specified on the series.\n        this.labels = [];\n        // prop: showLabels\n        // true to show the label text on the  legend.\n        this.showLabels = true;\n        // prop: showSwatch\n        // true to show the color swatches on the legend.\n        this.showSwatches = true;\n        // prop: placement\n        // \"insideGrid\" places legend inside the grid area of the plot.\n        // \"outsideGrid\" places the legend outside the grid but inside the plot container, \n        // shrinking the grid to accomodate the legend.\n        // \"inside\" synonym for \"insideGrid\", \n        // \"outside\" places the legend ouside the grid area, but does not shrink the grid which\n        // can cause the legend to overflow the plot container.\n        this.placement = \"insideGrid\";\n        // prop: xoffset\n        // DEPRECATED.  Set the margins on the legend using the marginTop, marginLeft, etc. \n        // properties or via CSS margin styling of the .jqplot-table-legend class.\n        this.xoffset = 0;\n        // prop: yoffset\n        // DEPRECATED.  Set the margins on the legend using the marginTop, marginLeft, etc. \n        // properties or via CSS margin styling of the .jqplot-table-legend class.\n        this.yoffset = 0;\n        // prop: border\n        // css spec for the border around the legend box.\n        this.border;\n        // prop: background\n        // css spec for the background of the legend box.\n        this.background;\n        // prop: textColor\n        // css color spec for the legend text.\n        this.textColor;\n        // prop: fontFamily\n        // css font-family spec for the legend text.\n        this.fontFamily; \n        // prop: fontSize\n        // css font-size spec for the legend text.\n        this.fontSize ;\n        // prop: rowSpacing\n        // css padding-top spec for the rows in the legend.\n        this.rowSpacing = '0.5em';\n        // renderer\n        // A class that will create a DOM object for the legend,\n        // see <$.jqplot.TableLegendRenderer>.\n        this.renderer = $.jqplot.TableLegendRenderer;\n        // prop: rendererOptions\n        // renderer specific options passed to the renderer.\n        this.rendererOptions = {};\n        // prop: predraw\n        // Wether to draw the legend before the series or not.\n        // Used with series specific legend renderers for pie, donut, mekko charts, etc.\n        this.preDraw = false;\n        // prop: marginTop\n        // CSS margin for the legend DOM element. This will set an element \n        // CSS style for the margin which will override any style sheet setting.\n        // The default will be taken from the stylesheet.\n        this.marginTop = null;\n        // prop: marginRight\n        // CSS margin for the legend DOM element. This will set an element \n        // CSS style for the margin which will override any style sheet setting.\n        // The default will be taken from the stylesheet.\n        this.marginRight = null;\n        // prop: marginBottom\n        // CSS margin for the legend DOM element. This will set an element \n        // CSS style for the margin which will override any style sheet setting.\n        // The default will be taken from the stylesheet.\n        this.marginBottom = null;\n        // prop: marginLeft\n        // CSS margin for the legend DOM element. This will set an element \n        // CSS style for the margin which will override any style sheet setting.\n        // The default will be taken from the stylesheet.\n        this.marginLeft = null;\n        // prop: escapeHtml\n        // True to escape special characters with their html entity equivalents\n        // in legend text.  \"<\" becomes &lt; and so on, so html tags are not rendered.\n        this.escapeHtml = false;\n        this._series = [];\n        \n        $.extend(true, this, options);\n    }\n    \n    Legend.prototype = new $.jqplot.ElemContainer();\n    Legend.prototype.constructor = Legend;\n    \n    Legend.prototype.setOptions = function(options) {\n        $.extend(true, this, options);\n        \n        // Try to emulate deprecated behaviour\n        // if user has specified xoffset or yoffset, copy these to\n        // the margin properties.\n        \n        if (this.placement ==  'inside') {\n            this.placement = 'insideGrid';\n        }\n        \n        if (this.xoffset >0) {\n            if (this.placement == 'insideGrid') {\n                switch (this.location) {\n                    case 'nw':\n                    case 'w':\n                    case 'sw':\n                        if (this.marginLeft == null) {\n                            this.marginLeft = this.xoffset + 'px';\n                        }\n                        this.marginRight = '0px';\n                        break;\n                    case 'ne':\n                    case 'e':\n                    case 'se':\n                    default:\n                        if (this.marginRight == null) {\n                            this.marginRight = this.xoffset + 'px';\n                        }\n                        this.marginLeft = '0px';\n                        break;\n                }\n            }\n            else if (this.placement == 'outside') {\n                switch (this.location) {\n                    case 'nw':\n                    case 'w':\n                    case 'sw':\n                        if (this.marginRight == null) {\n                            this.marginRight = this.xoffset + 'px';\n                        }\n                        this.marginLeft = '0px';\n                        break;\n                    case 'ne':\n                    case 'e':\n                    case 'se':\n                    default:\n                        if (this.marginLeft == null) {\n                            this.marginLeft = this.xoffset + 'px';\n                        }\n                        this.marginRight = '0px';\n                        break;\n                }\n            }\n            this.xoffset = 0;\n        }\n        \n        if (this.yoffset >0) {\n            if (this.placement == 'outside') {\n                switch (this.location) {\n                    case 'sw':\n                    case 's':\n                    case 'se':\n                        if (this.marginTop == null) {\n                            this.marginTop = this.yoffset + 'px';\n                        }\n                        this.marginBottom = '0px';\n                        break;\n                    case 'ne':\n                    case 'n':\n                    case 'nw':\n                    default:\n                        if (this.marginBottom == null) {\n                            this.marginBottom = this.yoffset + 'px';\n                        }\n                        this.marginTop = '0px';\n                        break;\n                }\n            }\n            else if (this.placement == 'insideGrid') {\n                switch (this.location) {\n                    case 'sw':\n                    case 's':\n                    case 'se':\n                        if (this.marginBottom == null) {\n                            this.marginBottom = this.yoffset + 'px';\n                        }\n                        this.marginTop = '0px';\n                        break;\n                    case 'ne':\n                    case 'n':\n                    case 'nw':\n                    default:\n                        if (this.marginTop == null) {\n                            this.marginTop = this.yoffset + 'px';\n                        }\n                        this.marginBottom = '0px';\n                        break;\n                }\n            }\n            this.yoffset = 0;\n        }\n        \n        // TO-DO:\n        // Handle case where offsets are < 0.\n        //\n    };\n    \n    Legend.prototype.init = function() {\n        if ($.isFunction(this.renderer)) {\n            this.renderer = new this.renderer();  \n        }\n        this.renderer.init.call(this, this.rendererOptions);\n    };\n    \n    Legend.prototype.draw = function(offsets, plot) {\n        for (var i=0; i<$.jqplot.preDrawLegendHooks.length; i++){\n            $.jqplot.preDrawLegendHooks[i].call(this, offsets);\n        }\n        return this.renderer.draw.call(this, offsets, plot);\n    };\n    \n    Legend.prototype.pack = function(offsets) {\n        this.renderer.pack.call(this, offsets);\n    };\n\n    /**\n     * Class: Title\n     * Plot Title object.  Cannot be instantiated directly, but created\n     * by the Plot object.  Title properties can be set or overridden by the \n     * options passed in from the user.\n     * \n     * Parameters:\n     * text - text of the title.\n     */\n    function Title(text) {\n        $.jqplot.ElemContainer.call(this);\n        // Group: Properties\n        \n        // prop: text\n        // text of the title;\n        this.text = text;\n        // prop: show\n        // whether or not to show the title\n        this.show = true;\n        // prop: fontFamily\n        // css font-family spec for the text.\n        this.fontFamily;\n        // prop: fontSize\n        // css font-size spec for the text.\n        this.fontSize ;\n        // prop: textAlign\n        // css text-align spec for the text.\n        this.textAlign;\n        // prop: textColor\n        // css color spec for the text.\n        this.textColor;\n        // prop: renderer\n        // A class for creating a DOM element for the title,\n        // see <$.jqplot.DivTitleRenderer>.\n        this.renderer = $.jqplot.DivTitleRenderer;\n        // prop: rendererOptions\n        // renderer specific options passed to the renderer.\n        this.rendererOptions = {};   \n        // prop: escapeHtml\n        // True to escape special characters with their html entity equivalents\n        // in title text.  \"<\" becomes &lt; and so on, so html tags are not rendered.\n        this.escapeHtml = false;\n    }\n    \n    Title.prototype = new $.jqplot.ElemContainer();\n    Title.prototype.constructor = Title;\n    \n    Title.prototype.init = function() {\n        if ($.isFunction(this.renderer)) {\n            this.renderer = new this.renderer();  \n        }\n        this.renderer.init.call(this, this.rendererOptions);\n    };\n    \n    Title.prototype.draw = function(width) {\n        return this.renderer.draw.call(this, width);\n    };\n    \n    Title.prototype.pack = function() {\n        this.renderer.pack.call(this);\n    };\n\n\n    /**\n     * Class: Series\n     * An individual data series object.  Cannot be instantiated directly, but created\n     * by the Plot object.  Series properties can be set or overridden by the \n     * options passed in from the user.\n     */\n    function Series(options) {\n        options = options || {};\n        $.jqplot.ElemContainer.call(this);\n        // Group: Properties\n        // Properties will be assigned from a series array at the top level of the\n        // options.  If you had two series and wanted to change the color and line\n        // width of the first and set the second to use the secondary y axis with\n        // no shadow and supply custom labels for each:\n        // > {\n        // >    series:[\n        // >        {color: '#ff4466', lineWidth: 5, label:'good line'},\n        // >        {yaxis: 'y2axis', shadow: false, label:'bad line'}\n        // >    ]\n        // > }\n\n        // prop: show\n        // whether or not to draw the series.\n        this.show = true;\n        // prop: xaxis\n        // which x axis to use with this series, either 'xaxis' or 'x2axis'.\n        this.xaxis = 'xaxis';\n        this._xaxis;\n        // prop: yaxis\n        // which y axis to use with this series, either 'yaxis' or 'y2axis'.\n        this.yaxis = 'yaxis';\n        this._yaxis;\n        this.gridBorderWidth = 2.0;\n        // prop: renderer\n        // A class of a renderer which will draw the series, \n        // see <$.jqplot.LineRenderer>.\n        this.renderer = $.jqplot.LineRenderer;\n        // prop: rendererOptions\n        // Options to pass on to the renderer.\n        this.rendererOptions = {};\n        this.data = [];\n        this.gridData = [];\n        // prop: label\n        // Line label to use in the legend.\n        this.label = '';\n        // prop: showLabel\n        // true to show label for this series in the legend.\n        this.showLabel = true;\n        // prop: color\n        // css color spec for the series\n        this.color;\n        // prop: negativeColor\n        // css color spec used for filled (area) plots that are filled to zero and\n        // the \"useNegativeColors\" option is true.\n        this.negativeColor;\n        // prop: lineWidth\n        // width of the line in pixels.  May have different meanings depending on renderer.\n        this.lineWidth = 2.5;\n        // prop: lineJoin\n        // Canvas lineJoin style between segments of series.\n        this.lineJoin = 'round';\n        // prop: lineCap\n        // Canvas lineCap style at ends of line.\n        this.lineCap = 'round';\n        // prop: linePattern\n        // line pattern 'dashed', 'dotted', 'solid', some combination\n        // of '-' and '.' characters such as '.-.' or a numerical array like \n        // [draw, skip, draw, skip, ...] such as [1, 10] to draw a dotted line, \n        // [1, 10, 20, 10] to draw a dot-dash line, and so on.\n        this.linePattern = 'solid';\n        this.shadow = true;\n        // prop: shadowAngle\n        // Shadow angle in degrees\n        this.shadowAngle = 45;\n        // prop: shadowOffset\n        // Shadow offset from line in pixels\n        this.shadowOffset = 1.25;\n        // prop: shadowDepth\n        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.\n        this.shadowDepth = 3;\n        // prop: shadowAlpha\n        // Alpha channel transparency of shadow.  0 = transparent.\n        this.shadowAlpha = '0.1';\n        // prop: breakOnNull\n        // Wether line segments should be be broken at null value.\n        // False will join point on either side of line.\n        this.breakOnNull = false;\n        // prop: markerRenderer\n        // A class of a renderer which will draw marker (e.g. circle, square, ...) at the data points,\n        // see <$.jqplot.MarkerRenderer>.\n        this.markerRenderer = $.jqplot.MarkerRenderer;\n        // prop: markerOptions\n        // renderer specific options to pass to the markerRenderer,\n        // see <$.jqplot.MarkerRenderer>.\n        this.markerOptions = {};\n        // prop: showLine\n        // whether to actually draw the line or not.  Series will still be renderered, even if no line is drawn.\n        this.showLine = true;\n        // prop: showMarker\n        // whether or not to show the markers at the data points.\n        this.showMarker = true;\n        // prop: index\n        // 0 based index of this series in the plot series array.\n        this.index;\n        // prop: fill\n        // true or false, whether to fill under lines or in bars.\n        // May not be implemented in all renderers.\n        this.fill = false;\n        // prop: fillColor\n        // CSS color spec to use for fill under line.  Defaults to line color.\n        this.fillColor;\n        // prop: fillAlpha\n        // Alpha transparency to apply to the fill under the line.\n        // Use this to adjust alpha separate from fill color.\n        this.fillAlpha;\n        // prop: fillAndStroke\n        // If true will stroke the line (with color this.color) as well as fill under it.\n        // Applies only when fill is true.\n        this.fillAndStroke = false;\n        // prop: disableStack\n        // true to not stack this series with other series in the plot.\n        // To render properly, non-stacked series must come after any stacked series\n        // in the plot's data series array.  So, the plot's data series array would look like:\n        // > [stackedSeries1, stackedSeries2, ..., nonStackedSeries1, nonStackedSeries2, ...]\n        // disableStack will put a gap in the stacking order of series, and subsequent\n        // stacked series will not fill down through the non-stacked series and will\n        // most likely not stack properly on top of the non-stacked series.\n        this.disableStack = false;\n        // _stack is set by the Plot if the plot is a stacked chart.\n        // will stack lines or bars on top of one another to build a \"mountain\" style chart.\n        // May not be implemented in all renderers.\n        this._stack = false;\n        // prop: neighborThreshold\n        // how close or far (in pixels) the cursor must be from a point marker to detect the point.\n        this.neighborThreshold = 4;\n        // prop: fillToZero\n        // true will force bar and filled series to fill toward zero on the fill Axis.\n        this.fillToZero = false;\n        // prop: fillToValue\n        // fill a filled series to this value on the fill axis.\n        // Works in conjunction with fillToZero, so that must be true.\n        this.fillToValue = 0;\n        // prop: fillAxis\n        // Either 'x' or 'y'.  Which axis to fill the line toward if fillToZero is true.\n        // 'y' means fill up/down to 0 on the y axis for this series.\n        this.fillAxis = 'y';\n        // prop: useNegativeColors\n        // true to color negative values differently in filled and bar charts.\n        this.useNegativeColors = true;\n        this._stackData = [];\n        // _plotData accounts for stacking.  If plots not stacked, _plotData and data are same.  If\n        // stacked, _plotData is accumulation of stacking data.\n        this._plotData = [];\n        // _plotValues hold the individual x and y values that will be plotted for this series.\n        this._plotValues = {x:[], y:[]};\n        // statistics about the intervals between data points.  Used for auto scaling.\n        this._intervals = {x:{}, y:{}};\n        // data from the previous series, for stacked charts.\n        this._prevPlotData = [];\n        this._prevGridData = [];\n        this._stackAxis = 'y';\n        this._primaryAxis = '_xaxis';\n        // give each series a canvas to draw on.  This should allow for redrawing speedups.\n        this.canvas = new $.jqplot.GenericCanvas();\n        this.shadowCanvas = new $.jqplot.GenericCanvas();\n        this.plugins = {};\n        // sum of y values in this series.\n        this._sumy = 0;\n        this._sumx = 0;\n        this._type = '';\n        this.step = false;\n    }\n    \n    Series.prototype = new $.jqplot.ElemContainer();\n    Series.prototype.constructor = Series;\n    \n    Series.prototype.init = function(index, gridbw, plot) {\n        // weed out any null values in the data.\n        this.index = index;\n        this.gridBorderWidth = gridbw;\n        var d = this.data;\n        var temp = [], i, l;\n        for (i=0, l=d.length; i<l; i++) {\n            if (! this.breakOnNull) {\n                if (d[i] == null || d[i][0] == null || d[i][1] == null) {\n                    continue;\n                }\n                else {\n                    temp.push(d[i]);\n                }\n            }\n            else {\n                // TODO: figure out what to do with null values\n                // probably involve keeping nulls in data array\n                // and then updating renderers to break line\n                // when it hits null value.\n                // For now, just keep value.\n                temp.push(d[i]);\n            }\n        }\n        this.data = temp;\n\n        // parse the renderer options and apply default colors if not provided\n        // Set color even if not shown, so series don't change colors when other\n        // series on plot shown/hidden.\n        if (!this.color) {\n            this.color = plot.colorGenerator.get(this.index);\n        }\n        if (!this.negativeColor) {\n            this.negativeColor = plot.negativeColorGenerator.get(this.index);\n        }\n\n\n        if (!this.fillColor) {\n            this.fillColor = this.color;\n        }\n        if (this.fillAlpha) {\n            var comp = $.jqplot.normalize2rgb(this.fillColor);\n            var comp = $.jqplot.getColorComponents(comp);\n            this.fillColor = 'rgba('+comp[0]+','+comp[1]+','+comp[2]+','+this.fillAlpha+')';\n        }\n        if ($.isFunction(this.renderer)) {\n            this.renderer = new this.renderer();  \n        }\n        this.renderer.init.call(this, this.rendererOptions, plot);\n        this.markerRenderer = new this.markerRenderer();\n        if (!this.markerOptions.color) {\n            this.markerOptions.color = this.color;\n        }\n        if (this.markerOptions.show == null) {\n            this.markerOptions.show = this.showMarker;\n        }\n        this.showMarker = this.markerOptions.show;\n        // the markerRenderer is called within its own scope, don't want to overwrite series options!!\n        this.markerRenderer.init(this.markerOptions);\n    };\n    \n    // data - optional data point array to draw using this series renderer\n    // gridData - optional grid data point array to draw using this series renderer\n    // stackData - array of cumulative data for stacked plots.\n    Series.prototype.draw = function(sctx, opts, plot) {\n        var options = (opts == undefined) ? {} : opts;\n        sctx = (sctx == undefined) ? this.canvas._ctx : sctx;\n        \n        var j, data, gridData;\n        \n        // hooks get called even if series not shown\n        // we don't clear canvas here, it would wipe out all other series as well.\n        for (j=0; j<$.jqplot.preDrawSeriesHooks.length; j++) {\n            $.jqplot.preDrawSeriesHooks[j].call(this, sctx, options);\n        }\n        if (this.show) {\n            this.renderer.setGridData.call(this, plot);\n            if (!options.preventJqPlotSeriesDrawTrigger) {\n                $(sctx.canvas).trigger('jqplotSeriesDraw', [this.data, this.gridData]);\n            }\n            data = [];\n            if (options.data) {\n                data = options.data;\n            }\n            else if (!this._stack) {\n                data = this.data;\n            }\n            else {\n                data = this._plotData;\n            }\n            gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot);\n\n            if (this._type === 'line' && this.renderer.smooth && this.renderer._smoothedData.length) {\n                gridData = this.renderer._smoothedData;\n            }\n\n            this.renderer.draw.call(this, sctx, gridData, options, plot);\n        }\n        \n        for (j=0; j<$.jqplot.postDrawSeriesHooks.length; j++) {\n            $.jqplot.postDrawSeriesHooks[j].call(this, sctx, options, plot);\n        }\n        \n        sctx = opts = plot = j = data = gridData = null;\n    };\n    \n    Series.prototype.drawShadow = function(sctx, opts, plot) {\n        var options = (opts == undefined) ? {} : opts;\n        sctx = (sctx == undefined) ? this.shadowCanvas._ctx : sctx;\n        \n        var j, data, gridData;\n        \n        // hooks get called even if series not shown\n        // we don't clear canvas here, it would wipe out all other series as well.\n        for (j=0; j<$.jqplot.preDrawSeriesShadowHooks.length; j++) {\n            $.jqplot.preDrawSeriesShadowHooks[j].call(this, sctx, options);\n        }\n        if (this.shadow) {\n            this.renderer.setGridData.call(this, plot);\n\n            data = [];\n            if (options.data) {\n                data = options.data;\n            }\n            else if (!this._stack) {\n                data = this.data;\n            }\n            else {\n                data = this._plotData;\n            }\n            gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot);\n        \n            this.renderer.drawShadow.call(this, sctx, gridData, options, plot);\n        }\n        \n        for (j=0; j<$.jqplot.postDrawSeriesShadowHooks.length; j++) {\n            $.jqplot.postDrawSeriesShadowHooks[j].call(this, sctx, options);\n        }\n        \n        sctx = opts = plot = j = data = gridData = null;\n        \n    };\n    \n    // toggles series display on plot, e.g. show/hide series\n    Series.prototype.toggleDisplay = function(ev, callback) {\n        var s, speed;\n        if (ev.data.series) {\n            s = ev.data.series;\n        }\n        else {\n            s = this;\n        }\n\n        if (ev.data.speed) {\n            speed = ev.data.speed;\n        }\n        if (speed) {\n            // this can be tricky because series may not have a canvas element if replotting.\n            if (s.canvas._elem.is(':hidden') || !s.show) {\n                s.show = true;\n\n                s.canvas._elem.removeClass('jqplot-series-hidden');\n                if (s.shadowCanvas._elem) {\n                    s.shadowCanvas._elem.fadeIn(speed);\n                }\n                s.canvas._elem.fadeIn(speed, callback);\n                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).fadeIn(speed);\n            }\n            else {\n                s.show = false;\n\n                s.canvas._elem.addClass('jqplot-series-hidden');\n                if (s.shadowCanvas._elem) {\n                    s.shadowCanvas._elem.fadeOut(speed);\n                }\n                s.canvas._elem.fadeOut(speed, callback);\n                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).fadeOut(speed);\n            }\n        }\n        else {\n            // this can be tricky because series may not have a canvas element if replotting.\n            if (s.canvas._elem.is(':hidden') || !s.show) {\n                s.show = true;\n\n                s.canvas._elem.removeClass('jqplot-series-hidden');\n                if (s.shadowCanvas._elem) {\n                    s.shadowCanvas._elem.show();\n                }\n                s.canvas._elem.show(0, callback);\n                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).show();\n            }\n            else {\n                s.show = false;\n\n                s.canvas._elem.addClass('jqplot-series-hidden');\n                if (s.shadowCanvas._elem) {\n                    s.shadowCanvas._elem.hide();\n                }\n                s.canvas._elem.hide(0, callback);\n                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).hide();\n            }\n        }\n    };\n    \n\n\n    /**\n     * Class: Grid\n     * \n     * Object representing the grid on which the plot is drawn.  The grid in this\n     * context is the area bounded by the axes, the area which will contain the series.\n     * Note, the series are drawn on their own canvas.\n     * The Grid object cannot be instantiated directly, but is created by the Plot object.  \n     * Grid properties can be set or overridden by the options passed in from the user.\n     */\n    function Grid() {\n        $.jqplot.ElemContainer.call(this);\n        // Group: Properties\n        \n        // prop: drawGridlines\n        // whether to draw the gridlines on the plot.\n        this.drawGridlines = true;\n        // prop: gridLineColor\n        // color of the grid lines.\n        this.gridLineColor = '#cccccc';\n        // prop: gridLineWidth\n        // width of the grid lines.\n        this.gridLineWidth = 1.0;\n        // prop: background\n        // css spec for the background color.\n        this.background = '#fffdf6';\n        // prop: borderColor\n        // css spec for the color of the grid border.\n        this.borderColor = '#999999';\n        // prop: borderWidth\n        // width of the border in pixels.\n        this.borderWidth = 2.0;\n        // prop: drawBorder\n        // True to draw border around grid.\n        this.drawBorder = true;\n        // prop: shadow\n        // whether to show a shadow behind the grid.\n        this.shadow = true;\n        // prop: shadowAngle\n        // shadow angle in degrees\n        this.shadowAngle = 45;\n        // prop: shadowOffset\n        // Offset of each shadow stroke from the border in pixels\n        this.shadowOffset = 1.5;\n        // prop: shadowWidth\n        // width of the stoke for the shadow\n        this.shadowWidth = 3;\n        // prop: shadowDepth\n        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.\n        this.shadowDepth = 3;\n        // prop: shadowColor\n        // an optional css color spec for the shadow in 'rgba(n, n, n, n)' form\n        this.shadowColor = null;\n        // prop: shadowAlpha\n        // Alpha channel transparency of shadow.  0 = transparent.\n        this.shadowAlpha = '0.07';\n        this._left;\n        this._top;\n        this._right;\n        this._bottom;\n        this._width;\n        this._height;\n        this._axes = [];\n        // prop: renderer\n        // Instance of a renderer which will actually render the grid,\n        // see <$.jqplot.CanvasGridRenderer>.\n        this.renderer = $.jqplot.CanvasGridRenderer;\n        // prop: rendererOptions\n        // Options to pass on to the renderer,\n        // see <$.jqplot.CanvasGridRenderer>.\n        this.rendererOptions = {};\n        this._offsets = {top:null, bottom:null, left:null, right:null};\n    }\n    \n    Grid.prototype = new $.jqplot.ElemContainer();\n    Grid.prototype.constructor = Grid;\n    \n    Grid.prototype.init = function() {\n        if ($.isFunction(this.renderer)) {\n            this.renderer = new this.renderer();  \n        }\n        this.renderer.init.call(this, this.rendererOptions);\n    };\n    \n    Grid.prototype.createElement = function(offsets,plot) {\n        this._offsets = offsets;\n        return this.renderer.createElement.call(this, plot);\n    };\n    \n    Grid.prototype.draw = function() {\n        this.renderer.draw.call(this);\n    };\n    \n    $.jqplot.GenericCanvas = function() {\n        $.jqplot.ElemContainer.call(this);\n        this._ctx;  \n    };\n    \n    $.jqplot.GenericCanvas.prototype = new $.jqplot.ElemContainer();\n    $.jqplot.GenericCanvas.prototype.constructor = $.jqplot.GenericCanvas;\n    \n    $.jqplot.GenericCanvas.prototype.createElement = function(offsets, clss, plotDimensions, plot) {\n        this._offsets = offsets;\n        var klass = 'jqplot';\n        if (clss != undefined) {\n            klass = clss;\n        }\n        var elem;\n\n        elem = plot.canvasManager.getCanvas();\n        \n        // if new plotDimensions supplied, use them.\n        if (plotDimensions != null) {\n            this._plotDimensions = plotDimensions;\n        }\n        \n        elem.width = this._plotDimensions.width - this._offsets.left - this._offsets.right;\n        elem.height = this._plotDimensions.height - this._offsets.top - this._offsets.bottom;\n        this._elem = $(elem);\n        this._elem.css({ position: 'absolute', left: this._offsets.left, top: this._offsets.top });\n        \n        this._elem.addClass(klass);\n        \n        elem = plot.canvasManager.initCanvas(elem);\n        \n        elem = null;\n        return this._elem;\n    };\n    \n    $.jqplot.GenericCanvas.prototype.setContext = function() {\n        this._ctx = this._elem.get(0).getContext(\"2d\");\n        return this._ctx;\n    };\n    \n    // Memory Leaks patch\n    $.jqplot.GenericCanvas.prototype.resetCanvas = function() {\n      if (this._elem) {\n        if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n           window.G_vmlCanvasManager.uninitElement(this._elem.get(0));\n        }\n        \n        //this._elem.remove();\n        this._elem.emptyForce();\n      }\n      \n      this._ctx = null;\n    };\n    \n    $.jqplot.HooksManager = function () {\n        this.hooks =[];\n        this.args = [];\n    };\n    \n    $.jqplot.HooksManager.prototype.addOnce = function(fn, args) {\n        args = args || [];\n        var havehook = false;\n        for (var i=0, l=this.hooks.length; i<l; i++) {\n            if (this.hooks[i] == fn) {\n                havehook = true;\n            }\n        }\n        if (!havehook) {\n            this.hooks.push(fn);\n            this.args.push(args);\n        }\n    };\n    \n    $.jqplot.HooksManager.prototype.add = function(fn, args) {\n        args = args || [];\n        this.hooks.push(fn);\n        this.args.push(args);\n    };\n    \n    $.jqplot.EventListenerManager = function () {\n        this.hooks =[];\n    };\n    \n    $.jqplot.EventListenerManager.prototype.addOnce = function(ev, fn) {\n        var havehook = false, h, i;\n        for (var i=0, l=this.hooks.length; i<l; i++) {\n            h = this.hooks[i];\n            if (h[0] == ev && h[1] == fn) {\n                havehook = true;\n            }\n        }\n        if (!havehook) {\n            this.hooks.push([ev, fn]);\n        }\n    };\n    \n    $.jqplot.EventListenerManager.prototype.add = function(ev, fn) {\n        this.hooks.push([ev, fn]);\n    };\n\n\n    var _axisNames = ['yMidAxis', 'xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];\n\n    /**\n     * Class: jqPlot\n     * Plot object returned by call to $.jqplot.  Handles parsing user options,\n     * creating sub objects (Axes, legend, title, series) and rendering the plot.\n     */\n    function jqPlot() {\n        // Group: Properties\n        // These properties are specified at the top of the options object\n        // like so:\n        // > {\n        // >     axesDefaults:{min:0},\n        // >     series:[{color:'#6633dd'}],\n        // >     title: 'A Plot'\n        // > }\n        //\n\n        // prop: animate\n        // True to animate the series on initial plot draw (renderer dependent).\n        // Actual animation functionality must be supported in the renderer.\n        this.animate = false;\n        // prop: animateReplot\n        // True to animate series after a call to the replot() method.\n        // Use with caution!  Replots can happen very frequently under\n        // certain circumstances (e.g. resizing, dragging points) and\n        // animation in these situations can cause problems.\n        this.animateReplot = false;\n        // prop: axes\n        // up to 4 axes are supported, each with its own options, \n        // See <Axis> for axis specific options.\n        this.axes = {xaxis: new Axis('xaxis'), yaxis: new Axis('yaxis'), x2axis: new Axis('x2axis'), y2axis: new Axis('y2axis'), y3axis: new Axis('y3axis'), y4axis: new Axis('y4axis'), y5axis: new Axis('y5axis'), y6axis: new Axis('y6axis'), y7axis: new Axis('y7axis'), y8axis: new Axis('y8axis'), y9axis: new Axis('y9axis'), yMidAxis: new Axis('yMidAxis')};\n        this.baseCanvas = new $.jqplot.GenericCanvas();\n        // true to intercept right click events and fire a 'jqplotRightClick' event.\n        // this will also block the context menu.\n        this.captureRightClick = false;\n        // prop: data\n        // user's data.  Data should *NOT* be specified in the options object,\n        // but be passed in as the second argument to the $.jqplot() function.\n        // The data property is described here soley for reference. \n        // The data should be in the form of an array of 2D or 1D arrays like\n        // > [ [[x1, y1], [x2, y2],...], [y1, y2, ...] ].\n        this.data = [];\n        // prop: dataRenderer\n        // A callable which can be used to preprocess data passed into the plot.\n        // Will be called with 3 arguments: the plot data, a reference to the plot,\n        // and the value of dataRendererOptions.\n        this.dataRenderer;\n        // prop: dataRendererOptions\n        // Options that will be passed to the dataRenderer.\n        // Can be of any type.\n        this.dataRendererOptions;\n        this.defaults = {\n            // prop: axesDefaults\n            // default options that will be applied to all axes.\n            // see <Axis> for axes options.\n            axesDefaults: {},\n            axes: {xaxis:{}, yaxis:{}, x2axis:{}, y2axis:{}, y3axis:{}, y4axis:{}, y5axis:{}, y6axis:{}, y7axis:{}, y8axis:{}, y9axis:{}, yMidAxis:{}},\n            // prop: seriesDefaults\n            // default options that will be applied to all series.\n            // see <Series> for series options.\n            seriesDefaults: {},\n            series:[]\n        };\n        // prop: defaultAxisStart\n        // 1-D data series are internally converted into 2-D [x,y] data point arrays\n        // by jqPlot.  This is the default starting value for the missing x or y value.\n        // The added data will be a monotonically increasing series (e.g. [1, 2, 3, ...])\n        // starting at this value.\n        this.defaultAxisStart = 1;\n        // this.doCustomEventBinding = true;\n        // prop: drawIfHidden\n        // True to execute the draw method even if the plot target is hidden.\n        // Generally, this should be false.  Most plot elements will not be sized/\n        // positioned correclty if renderered into a hidden container.  To render into\n        // a hidden container, call the replot method when the container is shown.\n        this.drawIfHidden = false;\n        this.eventCanvas = new $.jqplot.GenericCanvas();\n        // prop: fillBetween\n        // Fill between 2 line series in a plot.\n        // Options object:\n        // {\n        //    series1: first index (0 based) of series in fill\n        //    series2: second index (0 based) of series in fill\n        //    color: color of fill [default fillColor of series1]\n        //    baseSeries:  fill will be drawn below this series (0 based index)\n        //    fill: false to turn off fill [default true].\n        //  }\n        this.fillBetween = {\n            series1: null,\n            series2: null,\n            color: null,\n            baseSeries: 0,\n            fill: true\n        };\n        // prop; fontFamily\n        // css spec for the font-family attribute.  Default for the entire plot.\n        this.fontFamily;\n        // prop: fontSize\n        // css spec for the font-size attribute.  Default for the entire plot.\n        this.fontSize;\n        // prop: grid\n        // See <Grid> for grid specific options.\n        this.grid = new Grid();\n        // prop: legend\n        // see <$.jqplot.TableLegendRenderer>\n        this.legend = new Legend();\n        // prop: noDataIndicator\n        // Options to set up a mock plot with a data loading indicator if no data is specified.\n        this.noDataIndicator = {    \n            show: false,\n            indicator: 'Loading Data...',\n            axes: {\n                xaxis: {\n                    min: 0,\n                    max: 10,\n                    tickInterval: 2,\n                    show: true\n                },\n                yaxis: {\n                    min: 0,\n                    max: 12,\n                    tickInterval: 3,\n                    show: true\n                }\n            }\n        };\n        // prop: negativeSeriesColors \n        // colors to use for portions of the line below zero.\n        this.negativeSeriesColors = $.jqplot.config.defaultNegativeColors;\n        // container to hold all of the merged options.  Convienence for plugins.\n        this.options = {};\n        this.previousSeriesStack = [];\n        // Namespace to hold plugins.  Generally non-renderer plugins add themselves to here.\n        this.plugins = {};\n        // prop: series\n        // Array of series object options.\n        // see <Series> for series specific options.\n        this.series = [];\n        // array of series indices. Keep track of order\n        // which series canvases are displayed, lowest\n        // to highest, back to front.\n        this.seriesStack = [];\n        // prop: seriesColors\n        // Ann array of CSS color specifications that will be applied, in order,\n        // to the series in the plot.  Colors will wrap around so, if their\n        // are more series than colors, colors will be reused starting at the\n        // beginning.  For pie charts, this specifies the colors of the slices.\n        this.seriesColors = $.jqplot.config.defaultColors;\n        // prop: sortData\n        // false to not sort the data passed in by the user.\n        // Many bar, stacked and other graphs as well as many plugins depend on\n        // having sorted data.\n        this.sortData = true;\n        // prop: stackSeries\n        // true or false, creates a stack or \"mountain\" plot.\n        // Not all series renderers may implement this option.\n        this.stackSeries = false;\n        // a shortcut for axis syncTicks options.  Not implemented yet.\n        this.syncXTicks = true;\n        // a shortcut for axis syncTicks options.  Not implemented yet.\n        this.syncYTicks = true;\n        // the jquery object for the dom target.\n        this.target = null; \n        // The id of the dom element to render the plot into\n        this.targetId = null;\n        // prop textColor\n        // css spec for the css color attribute.  Default for the entire plot.\n        this.textColor;\n        // prop: title\n        // Title object.  See <Title> for specific options.  As a shortcut, you\n        // can specify the title option as just a string like: title: 'My Plot'\n        // and this will create a new title object with the specified text.\n        this.title = new Title();\n        // Count how many times the draw method has been called while the plot is visible.\n        // Mostly used to test if plot has never been dran (=0), has been successfully drawn\n        // into a visible container once (=1) or draw more than once into a visible container.\n        // Can use this in tests to see if plot has been visibly drawn at least one time.\n        // After plot has been visibly drawn once, it generally doesn't need redrawing if its\n        // container is hidden and shown.\n        this._drawCount = 0;\n        // sum of y values for all series in plot.\n        // used in mekko chart.\n        this._sumy = 0;\n        this._sumx = 0;\n        // array to hold the cumulative stacked series data.\n        // used to ajust the individual series data, which won't have access to other\n        // series data.\n        this._stackData = [];\n        // array that holds the data to be plotted. This will be the series data\n        // merged with the the appropriate data from _stackData according to the stackAxis.\n        this._plotData = [];\n        this._width = null;\n        this._height = null; \n        this._plotDimensions = {height:null, width:null};\n        this._gridPadding = {top:null, right:null, bottom:null, left:null};\n        this._defaultGridPadding = {top:10, right:10, bottom:23, left:10};\n\n        this._addDomReference = $.jqplot.config.addDomReference;\n\n        this.preInitHooks = new $.jqplot.HooksManager();\n        this.postInitHooks = new $.jqplot.HooksManager();\n        this.preParseOptionsHooks = new $.jqplot.HooksManager();\n        this.postParseOptionsHooks = new $.jqplot.HooksManager();\n        this.preDrawHooks = new $.jqplot.HooksManager();\n        this.postDrawHooks = new $.jqplot.HooksManager();\n        this.preDrawSeriesHooks = new $.jqplot.HooksManager();\n        this.postDrawSeriesHooks = new $.jqplot.HooksManager();\n        this.preDrawLegendHooks = new $.jqplot.HooksManager();\n        this.addLegendRowHooks = new $.jqplot.HooksManager();\n        this.preSeriesInitHooks = new $.jqplot.HooksManager();\n        this.postSeriesInitHooks = new $.jqplot.HooksManager();\n        this.preParseSeriesOptionsHooks = new $.jqplot.HooksManager();\n        this.postParseSeriesOptionsHooks = new $.jqplot.HooksManager();\n        this.eventListenerHooks = new $.jqplot.EventListenerManager();\n        this.preDrawSeriesShadowHooks = new $.jqplot.HooksManager();\n        this.postDrawSeriesShadowHooks = new $.jqplot.HooksManager();\n        \n        this.colorGenerator = new $.jqplot.ColorGenerator();\n        this.negativeColorGenerator = new $.jqplot.ColorGenerator();\n\n        this.canvasManager = new $.jqplot.CanvasManager();\n\n        this.themeEngine = new $.jqplot.ThemeEngine();\n        \n        var seriesColorsIndex = 0;\n\n        // Group: methods\n        //\n        // method: init\n        // sets the plot target, checks data and applies user\n        // options to plot.\n        this.init = function(target, data, options) {\n            options = options || {};\n            for (var i=0; i<$.jqplot.preInitHooks.length; i++) {\n                $.jqplot.preInitHooks[i].call(this, target, data, options);\n            }\n\n            for (var i=0; i<this.preInitHooks.hooks.length; i++) {\n                this.preInitHooks.hooks[i].call(this, target, data, options);\n            }\n            \n            this.targetId = '#'+target;\n            this.target = $('#'+target);\n\n            //////\n            // Add a reference to plot\n            //////\n            if (this._addDomReference) {\n                this.target.data('jqplot', this);\n            }\n            // remove any error class that may be stuck on target.\n            this.target.removeClass('jqplot-error');\n            if (!this.target.get(0)) {\n                throw new Error(\"No plot target specified\");\n            }\n            \n            // make sure the target is positioned by some means and set css\n            if (this.target.css('position') == 'static') {\n                this.target.css('position', 'relative');\n            }\n            if (!this.target.hasClass('jqplot-target')) {\n                this.target.addClass('jqplot-target');\n            }\n            \n            // if no height or width specified, use a default.\n            if (!this.target.height()) {\n                var h;\n                if (options && options.height) {\n                    h = parseInt(options.height, 10);\n                }\n                else if (this.target.attr('data-height')) {\n                    h = parseInt(this.target.attr('data-height'), 10);\n                }\n                else {\n                    h = parseInt($.jqplot.config.defaultHeight, 10);\n                }\n                this._height = h;\n                this.target.css('height', h+'px');\n            }\n            else {\n                this._height = h = this.target.height();\n            }\n            if (!this.target.width()) {\n                var w;\n                if (options && options.width) {\n                    w = parseInt(options.width, 10);\n                }\n                else if (this.target.attr('data-width')) {\n                    w = parseInt(this.target.attr('data-width'), 10);\n                }\n                else {\n                    w = parseInt($.jqplot.config.defaultWidth, 10);\n                }\n                this._width = w;\n                this.target.css('width', w+'px');\n            }\n            else {\n                this._width = w = this.target.width();\n            }\n\n            for (var i=0, l=_axisNames.length; i<l; i++) {\n                this.axes[_axisNames[i]] = new Axis(_axisNames[i]);\n            }\n            \n            this._plotDimensions.height = this._height;\n            this._plotDimensions.width = this._width;\n            this.grid._plotDimensions = this._plotDimensions;\n            this.title._plotDimensions = this._plotDimensions;\n            this.baseCanvas._plotDimensions = this._plotDimensions;\n            this.eventCanvas._plotDimensions = this._plotDimensions;\n            this.legend._plotDimensions = this._plotDimensions;\n            if (this._height <=0 || this._width <=0 || !this._height || !this._width) {\n                throw new Error(\"Canvas dimension not set\");\n            }\n            \n            if (options.dataRenderer && $.isFunction(options.dataRenderer)) {\n                if (options.dataRendererOptions) {\n                    this.dataRendererOptions = options.dataRendererOptions;\n                }\n                this.dataRenderer = options.dataRenderer;\n                data = this.dataRenderer(data, this, this.dataRendererOptions);\n            }\n            \n            if (options.noDataIndicator && $.isPlainObject(options.noDataIndicator)) {\n                $.extend(true, this.noDataIndicator, options.noDataIndicator);\n            }\n            \n            if (data == null || $.isArray(data) == false || data.length == 0 || $.isArray(data[0]) == false || data[0].length == 0) {\n                \n                if (this.noDataIndicator.show == false) {\n                    throw new Error(\"No data specified\");\n                }\n                \n                else {\n                    // have to be descructive here in order for plot to not try and render series.\n                    // This means that $.jqplot() will have to be called again when there is data.\n                    //delete options.series;\n                    \n                    for (var ax in this.noDataIndicator.axes) {\n                        for (var prop in this.noDataIndicator.axes[ax]) {\n                            this.axes[ax][prop] = this.noDataIndicator.axes[ax][prop];\n                        }\n                    }\n                    \n                    this.postDrawHooks.add(function() {\n                        var eh = this.eventCanvas.getHeight();\n                        var ew = this.eventCanvas.getWidth();\n                        var temp = $('<div class=\"jqplot-noData-container\" style=\"position:absolute;\"></div>');\n                        this.target.append(temp);\n                        temp.height(eh);\n                        temp.width(ew);\n                        temp.css('top', this.eventCanvas._offsets.top);\n                        temp.css('left', this.eventCanvas._offsets.left);\n                        \n                        var temp2 = $('<div class=\"jqplot-noData-contents\" style=\"text-align:center; position:relative; margin-left:auto; margin-right:auto;\"></div>');\n                        temp.append(temp2);\n                        temp2.html(this.noDataIndicator.indicator);\n                        var th = temp2.height();\n                        var tw = temp2.width();\n                        temp2.height(th);\n                        temp2.width(tw);\n                        temp2.css('top', (eh - th)/2 + 'px');\n                    });\n\n                }\n            }\n            \n            // make a copy of the data\n            this.data = $.extend(true, [], data);\n            \n            this.parseOptions(options);\n            \n            if (this.textColor) {\n                this.target.css('color', this.textColor);\n            }\n            if (this.fontFamily) {\n                this.target.css('font-family', this.fontFamily);\n            }\n            if (this.fontSize) {\n                this.target.css('font-size', this.fontSize);\n            }\n            \n            this.title.init();\n            this.legend.init();\n            this._sumy = 0;\n            this._sumx = 0;\n            this.computePlotData();\n            for (var i=0; i<this.series.length; i++) {\n                // set default stacking order for series canvases\n                this.seriesStack.push(i);\n                this.previousSeriesStack.push(i);\n                this.series[i].shadowCanvas._plotDimensions = this._plotDimensions;\n                this.series[i].canvas._plotDimensions = this._plotDimensions;\n                for (var j=0; j<$.jqplot.preSeriesInitHooks.length; j++) {\n                    $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                for (var j=0; j<this.preSeriesInitHooks.hooks.length; j++) {\n                    this.preSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                // this.populatePlotData(this.series[i], i);\n                this.series[i]._plotDimensions = this._plotDimensions;\n                this.series[i].init(i, this.grid.borderWidth, this);\n                for (var j=0; j<$.jqplot.postSeriesInitHooks.length; j++) {\n                    $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                for (var j=0; j<this.postSeriesInitHooks.hooks.length; j++) {\n                    this.postSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                this._sumy += this.series[i]._sumy;\n                this._sumx += this.series[i]._sumx;\n            }\n\n            var name,\n                axis;\n            for (var i=0, l=_axisNames.length; i<l; i++) {\n                name = _axisNames[i];\n                axis = this.axes[name];\n                axis._plotDimensions = this._plotDimensions;\n                axis.init();\n                if (this.axes[name].borderColor == null) {\n                    if (name.charAt(0) !== 'x' && axis.useSeriesColor === true && axis.show) {\n                        axis.borderColor = axis._series[0].color;\n                    }\n                    else {\n                        axis.borderColor = this.grid.borderColor;\n                    }\n                }\n            }\n            \n            if (this.sortData) {\n                sortData(this.series);\n            }\n            this.grid.init();\n            this.grid._axes = this.axes;\n            \n            this.legend._series = this.series;\n\n            for (var i=0; i<$.jqplot.postInitHooks.length; i++) {\n                $.jqplot.postInitHooks[i].call(this, target, this.data, options);\n            }\n\n            for (var i=0; i<this.postInitHooks.hooks.length; i++) {\n                this.postInitHooks.hooks[i].call(this, target, this.data, options);\n            }\n        };  \n        \n        // method: resetAxesScale\n        // Reset the specified axes min, max, numberTicks and tickInterval properties to null\n        // or reset these properties on all axes if no list of axes is provided.\n        //\n        // Parameters:\n        // axes - Boolean to reset or not reset all axes or an array or object of axis names to reset.\n        this.resetAxesScale = function(axes, options) {\n            var opts = options || {};\n            var ax = axes || this.axes;\n            if (ax === true) {\n                ax = this.axes;\n            }\n            if ($.isArray(ax)) {\n                for (var i = 0; i < ax.length; i++) {\n                    this.axes[ax[i]].resetScale(opts[ax[i]]);\n                }\n            }\n            else if (typeof(ax) === 'object') {\n                for (var name in ax) {\n                    this.axes[name].resetScale(opts[name]);\n                }\n            }\n        };\n        // method: reInitialize\n        // reinitialize plot for replotting.\n        // not called directly.\n        this.reInitialize = function (data, opts) {\n            // Plot should be visible and have a height and width.\n            // If plot doesn't have height and width for some\n            // reason, set it by other means.  Plot must not have\n            // a display:none attribute, however.\n\n            var options = $.extend(true, {}, this.options, opts);\n\n            var target = this.targetId.substr(1);\n            var tdata = (data == null) ? this.data : data;\n\n            for (var i=0; i<$.jqplot.preInitHooks.length; i++) {\n                $.jqplot.preInitHooks[i].call(this, target, tdata, options);\n            }\n\n            for (var i=0; i<this.preInitHooks.hooks.length; i++) {\n                this.preInitHooks.hooks[i].call(this, target, tdata, options);\n            }\n            \n            this._height = this.target.height();\n            this._width = this.target.width();\n            \n            if (this._height <=0 || this._width <=0 || !this._height || !this._width) {\n                throw new Error(\"Target dimension not set\");\n            }\n            \n            this._plotDimensions.height = this._height;\n            this._plotDimensions.width = this._width;\n            this.grid._plotDimensions = this._plotDimensions;\n            this.title._plotDimensions = this._plotDimensions;\n            this.baseCanvas._plotDimensions = this._plotDimensions;\n            this.eventCanvas._plotDimensions = this._plotDimensions;\n            this.legend._plotDimensions = this._plotDimensions;\n\n            var name,\n                t, \n                j, \n                axis;\n\n            for (var i=0, l=_axisNames.length; i<l; i++) {\n                name = _axisNames[i];\n                axis = this.axes[name];\n\n                // Memory Leaks patch : clear ticks elements\n                t = axis._ticks;\n                for (var j = 0, tlen = t.length; j < tlen; j++) {\n                  var el = t[j]._elem;\n                  if (el) {\n                    // if canvas renderer\n                    if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                      window.G_vmlCanvasManager.uninitElement(el.get(0));\n                    }\n                    el.emptyForce();\n                    el = null;\n                    t._elem = null;\n                  }\n                }\n                t = null;\n\n                delete axis.ticks;\n                delete axis._ticks;\n                this.axes[name] = new Axis(name);\n                this.axes[name]._plotWidth = this._width;\n                this.axes[name]._plotHeight = this._height;\n            }\n            \n            if (data) {\n                if (options.dataRenderer && $.isFunction(options.dataRenderer)) {\n                    if (options.dataRendererOptions) {\n                        this.dataRendererOptions = options.dataRendererOptions;\n                    }\n                    this.dataRenderer = options.dataRenderer;\n                    data = this.dataRenderer(data, this, this.dataRendererOptions);\n                }\n                \n                // make a copy of the data\n                this.data = $.extend(true, [], data);\n            }\n\n            if (opts) {\n                this.parseOptions(options);\n            }\n            \n            this.title._plotWidth = this._width;\n            \n            if (this.textColor) {\n                this.target.css('color', this.textColor);\n            }\n            if (this.fontFamily) {\n                this.target.css('font-family', this.fontFamily);\n            }\n            if (this.fontSize) {\n                this.target.css('font-size', this.fontSize);\n            }\n\n            this.title.init();\n            this.legend.init();\n            this._sumy = 0;\n            this._sumx = 0;\n\n            this.seriesStack = [];\n            this.previousSeriesStack = [];\n\n            this.computePlotData();\n            for (var i=0, l=this.series.length; i<l; i++) {\n                // set default stacking order for series canvases\n                this.seriesStack.push(i);\n                this.previousSeriesStack.push(i);\n                this.series[i].shadowCanvas._plotDimensions = this._plotDimensions;\n                this.series[i].canvas._plotDimensions = this._plotDimensions;\n                for (var j=0; j<$.jqplot.preSeriesInitHooks.length; j++) {\n                    $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                for (var j=0; j<this.preSeriesInitHooks.hooks.length; j++) {\n                    this.preSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                // this.populatePlotData(this.series[i], i);\n                this.series[i]._plotDimensions = this._plotDimensions;\n                this.series[i].init(i, this.grid.borderWidth, this);\n                for (var j=0; j<$.jqplot.postSeriesInitHooks.length; j++) {\n                    $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                for (var j=0; j<this.postSeriesInitHooks.hooks.length; j++) {\n                    this.postSeriesInitHooks.hooks[j].call(this.series[i], target, this.data, this.options.seriesDefaults, this.options.series[i], this);\n                }\n                this._sumy += this.series[i]._sumy;\n                this._sumx += this.series[i]._sumx;\n            }\n\n            for (var i=0, l=_axisNames.length; i<l; i++) {\n                name = _axisNames[i];\n                axis = this.axes[name];\n\n                axis._plotDimensions = this._plotDimensions;\n                axis.init();\n                if (axis.borderColor == null) {\n                    if (name.charAt(0) !== 'x' && axis.useSeriesColor === true && axis.show) {\n                        axis.borderColor = axis._series[0].color;\n                    }\n                    else {\n                        axis.borderColor = this.grid.borderColor;\n                    }\n                }\n            }\n            \n            if (this.sortData) {\n                sortData(this.series);\n            }\n            this.grid.init();\n            this.grid._axes = this.axes;\n            \n            this.legend._series = this.series;\n\n            for (var i=0, l=$.jqplot.postInitHooks.length; i<l; i++) {\n                $.jqplot.postInitHooks[i].call(this, target, this.data, options);\n            }\n\n            for (var i=0, l=this.postInitHooks.hooks.length; i<l; i++) {\n                this.postInitHooks.hooks[i].call(this, target, this.data, options);\n            }\n        };\n\n\n\n        // method: quickInit\n        // \n        // Quick reinitialization plot for replotting.\n        // Does not parse options ore recreate axes and series.\n        // not called directly.\n        this.quickInit = function () {\n            // Plot should be visible and have a height and width.\n            // If plot doesn't have height and width for some\n            // reason, set it by other means.  Plot must not have\n            // a display:none attribute, however.\n            \n            this._height = this.target.height();\n            this._width = this.target.width();\n            \n            if (this._height <=0 || this._width <=0 || !this._height || !this._width) {\n                throw new Error(\"Target dimension not set\");\n            }\n            \n            this._plotDimensions.height = this._height;\n            this._plotDimensions.width = this._width;\n            this.grid._plotDimensions = this._plotDimensions;\n            this.title._plotDimensions = this._plotDimensions;\n            this.baseCanvas._plotDimensions = this._plotDimensions;\n            this.eventCanvas._plotDimensions = this._plotDimensions;\n            this.legend._plotDimensions = this._plotDimensions;\n            \n            for (var n in this.axes) {\n                this.axes[n]._plotWidth = this._width;\n                this.axes[n]._plotHeight = this._height;\n            }\n            \n            this.title._plotWidth = this._width;\n            \n            if (this.textColor) {\n                this.target.css('color', this.textColor);\n            }\n            if (this.fontFamily) {\n                this.target.css('font-family', this.fontFamily);\n            }\n            if (this.fontSize) {\n                this.target.css('font-size', this.fontSize);\n            }\n            \n            this._sumy = 0;\n            this._sumx = 0;\n            this.computePlotData();\n            for (var i=0; i<this.series.length; i++) {\n                // this.populatePlotData(this.series[i], i);\n                if (this.series[i]._type === 'line' && this.series[i].renderer.bands.show) {\n                    this.series[i].renderer.initBands.call(this.series[i], this.series[i].renderer.options, this);\n                }\n                this.series[i]._plotDimensions = this._plotDimensions;\n                this.series[i].canvas._plotDimensions = this._plotDimensions;\n                //this.series[i].init(i, this.grid.borderWidth);\n                this._sumy += this.series[i]._sumy;\n                this._sumx += this.series[i]._sumx;\n            }\n\n            var name;\n            \n            for (var j=0; j<12; j++) {\n                name = _axisNames[j];\n                // Memory Leaks patch : clear ticks elements\n                var t = this.axes[name]._ticks;\n                for (var i = 0; i < t.length; i++) {\n                  var el = t[i]._elem;\n                  if (el) {\n                    // if canvas renderer\n                    if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                      window.G_vmlCanvasManager.uninitElement(el.get(0));\n                    }\n                    el.emptyForce();\n                    el = null;\n                    t._elem = null;\n                  }\n                }\n                t = null;\n                \n                this.axes[name]._plotDimensions = this._plotDimensions;\n                this.axes[name]._ticks = [];\n                // this.axes[name].renderer.init.call(this.axes[name], {});\n            }\n            \n            if (this.sortData) {\n                sortData(this.series);\n            }\n            \n            this.grid._axes = this.axes;\n            \n            this.legend._series = this.series;\n        };\n        \n        // sort the series data in increasing order.\n        function sortData(series) {\n            var d, sd, pd, ppd, ret;\n            for (var i=0; i<series.length; i++) {\n                var check;\n                var bat = [series[i].data, series[i]._stackData, series[i]._plotData, series[i]._prevPlotData];\n                for (var n=0; n<4; n++) {\n                    check = true;\n                    d = bat[n];\n                    if (series[i]._stackAxis == 'x') {\n                        for (var j = 0; j < d.length; j++) {\n                            if (typeof(d[j][1]) != \"number\") {\n                                check = false;\n                                break;\n                            }\n                        }\n                        if (check) {\n                            d.sort(function(a,b) { return a[1] - b[1]; });\n                        }\n                    }\n                    else {\n                        for (var j = 0; j < d.length; j++) {\n                            if (typeof(d[j][0]) != \"number\") {\n                                check = false;\n                                break;\n                            }\n                        }\n                        if (check) {\n                            d.sort(function(a,b) { return a[0] - b[0]; });\n                        }\n                    }\n                }\n               \n            }\n        }\n\n        this.computePlotData = function() {\n            this._plotData = [];\n            this._stackData = [];\n            var series,\n                index,\n                l;\n\n\n            for (index=0, l=this.series.length; index<l; index++) {\n                series = this.series[index];\n                this._plotData.push([]);\n                this._stackData.push([]);\n                var cd = series.data;\n                this._plotData[index] = $.extend(true, [], cd);\n                this._stackData[index] = $.extend(true, [], cd);\n                series._plotData = this._plotData[index];\n                series._stackData = this._stackData[index];\n                var plotValues = {x:[], y:[]};\n\n                if (this.stackSeries && !series.disableStack) {\n                    series._stack = true;\n                    ///////////////////////////\n                    // have to check for nulls\n                    ///////////////////////////\n                    var sidx = (series._stackAxis === 'x') ? 0 : 1;\n\n                    for (var k=0, cdl=cd.length; k<cdl; k++) {\n                        var temp = cd[k][sidx];\n                        if (temp == null) {\n                            temp = 0;\n                        }\n                        this._plotData[index][k][sidx] = temp;\n                        this._stackData[index][k][sidx] = temp;\n\n                        if (index > 0) {\n                            for (var j=index; j--;) {\n                                var prevval = this._plotData[j][k][sidx];\n                                // only need to sum up the stack axis column of data\n                                // and only sum if it is of same sign.\n                                // if previous series isn't same sign, keep looking\n                                // at earlier series untill we find one of same sign.\n                                if (temp * prevval >= 0) {\n                                    this._plotData[index][k][sidx] += prevval;\n                                    this._stackData[index][k][sidx] += prevval;\n                                    break;\n                                } \n                            }\n                        }\n                    }\n\n                }\n                else {\n                    for (var i=0; i<series.data.length; i++) {\n                        plotValues.x.push(series.data[i][0]);\n                        plotValues.y.push(series.data[i][1]);\n                    }\n                    this._stackData.push(series.data);\n                    this.series[index]._stackData = series.data;\n                    this._plotData.push(series.data);\n                    series._plotData = series.data;\n                    series._plotValues = plotValues;\n                }\n                if (index>0) {\n                    series._prevPlotData = this.series[index-1]._plotData;\n                }\n                series._sumy = 0;\n                series._sumx = 0;\n                for (i=series.data.length-1; i>-1; i--) {\n                    series._sumy += series.data[i][1];\n                    series._sumx += series.data[i][0];\n                }\n            }\n\n        };\n        \n        // populate the _stackData and _plotData arrays for the plot and the series.\n        this.populatePlotData = function(series, index) {\n            // if a stacked chart, compute the stacked data\n            this._plotData = [];\n            this._stackData = [];\n            series._stackData = [];\n            series._plotData = [];\n            var plotValues = {x:[], y:[]};\n            if (this.stackSeries && !series.disableStack) {\n                series._stack = true;\n                var sidx = (series._stackAxis === 'x') ? 0 : 1;\n                // var idx = sidx ? 0 : 1;\n                // push the current data into stackData\n                //this._stackData.push(this.series[i].data);\n                var temp = $.extend(true, [], series.data);\n                // create the data that will be plotted for this series\n                var plotdata = $.extend(true, [], series.data);\n                var tempx, tempy, dval, stackval, comparator;\n                // for first series, nothing to add to stackData.\n                for (var j=0; j<index; j++) {\n                    var cd = this.series[j].data;\n                    for (var k=0; k<cd.length; k++) {\n                        dval = cd[k];\n                        tempx = (dval[0] != null) ? dval[0] : 0;\n                        tempy = (dval[1] != null) ? dval[1] : 0;\n                        temp[k][0] += tempx;\n                        temp[k][1] += tempy;\n                        stackval = (sidx) ? tempy : tempx;\n                        // only need to sum up the stack axis column of data\n                        // and only sum if it is of same sign.\n                        if (series.data[k][sidx] * stackval >= 0) {\n                            plotdata[k][sidx] += stackval;\n                        }\n                    }\n                }\n                for (var i=0; i<plotdata.length; i++) {\n                    plotValues.x.push(plotdata[i][0]);\n                    plotValues.y.push(plotdata[i][1]);\n                }\n                this._plotData.push(plotdata);\n                this._stackData.push(temp);\n                series._stackData = temp;\n                series._plotData = plotdata;\n                series._plotValues = plotValues;\n            }\n            else {\n                for (var i=0; i<series.data.length; i++) {\n                    plotValues.x.push(series.data[i][0]);\n                    plotValues.y.push(series.data[i][1]);\n                }\n                this._stackData.push(series.data);\n                this.series[index]._stackData = series.data;\n                this._plotData.push(series.data);\n                series._plotData = series.data;\n                series._plotValues = plotValues;\n            }\n            if (index>0) {\n                series._prevPlotData = this.series[index-1]._plotData;\n            }\n            series._sumy = 0;\n            series._sumx = 0;\n            for (i=series.data.length-1; i>-1; i--) {\n                series._sumy += series.data[i][1];\n                series._sumx += series.data[i][0];\n            }\n        };\n        \n        // function to safely return colors from the color array and wrap around at the end.\n        this.getNextSeriesColor = (function(t) {\n            var idx = 0;\n            var sc = t.seriesColors;\n            \n            return function () { \n                if (idx < sc.length) {\n                    return sc[idx++];\n                }\n                else {\n                    idx = 0;\n                    return sc[idx++];\n                }\n            };\n        })(this);\n    \n        this.parseOptions = function(options){\n            for (var i=0; i<this.preParseOptionsHooks.hooks.length; i++) {\n                this.preParseOptionsHooks.hooks[i].call(this, options);\n            }\n            for (var i=0; i<$.jqplot.preParseOptionsHooks.length; i++) {\n                $.jqplot.preParseOptionsHooks[i].call(this, options);\n            }\n            this.options = $.extend(true, {}, this.defaults, options);\n            var opts = this.options;\n            this.animate = opts.animate;\n            this.animateReplot = opts.animateReplot;\n            this.stackSeries = opts.stackSeries;\n            if ($.isPlainObject(opts.fillBetween)) {\n\n                var temp = ['series1', 'series2', 'color', 'baseSeries', 'fill'], \n                    tempi;\n\n                for (var i=0, l=temp.length; i<l; i++) {\n                    tempi = temp[i];\n                    if (opts.fillBetween[tempi] != null) {\n                        this.fillBetween[tempi] = opts.fillBetween[tempi];\n                    }\n                }\n            }\n\n            if (opts.seriesColors) {\n                this.seriesColors = opts.seriesColors;\n            }\n            if (opts.negativeSeriesColors) {\n                this.negativeSeriesColors = opts.negativeSeriesColors;\n            }\n            if (opts.captureRightClick) {\n                this.captureRightClick = opts.captureRightClick;\n            }\n            this.defaultAxisStart = (options && options.defaultAxisStart != null) ? options.defaultAxisStart : this.defaultAxisStart;\n            this.colorGenerator.setColors(this.seriesColors);\n            this.negativeColorGenerator.setColors(this.negativeSeriesColors);\n            // var cg = new this.colorGenerator(this.seriesColors);\n            // var ncg = new this.colorGenerator(this.negativeSeriesColors);\n            // this._gridPadding = this.options.gridPadding;\n            $.extend(true, this._gridPadding, opts.gridPadding);\n            this.sortData = (opts.sortData != null) ? opts.sortData : this.sortData;\n            for (var i=0; i<12; i++) {\n                var n = _axisNames[i];\n                var axis = this.axes[n];\n                axis._options = $.extend(true, {}, opts.axesDefaults, opts.axes[n]);\n                $.extend(true, axis, opts.axesDefaults, opts.axes[n]);\n                axis._plotWidth = this._width;\n                axis._plotHeight = this._height;\n            }\n            // if (this.data.length == 0) {\n            //     this.data = [];\n            //     for (var i=0; i<this.options.series.length; i++) {\n            //         this.data.push(this.options.series.data);\n            //     }    \n            // }\n                \n            var normalizeData = function(data, dir, start) {\n                // return data as an array of point arrays,\n                // in form [[x1,y1...], [x2,y2...], ...]\n                var temp = [];\n                var i, l;\n                dir = dir || 'vertical';\n                if (!$.isArray(data[0])) {\n                    // we have a series of scalars.  One line with just y values.\n                    // turn the scalar list of data into a data array of form:\n                    // [[1, data[0]], [2, data[1]], ...]\n                    for (i=0, l=data.length; i<l; i++) {\n                        if (dir == 'vertical') {\n                            temp.push([start + i, data[i]]);   \n                        }\n                        else {\n                            temp.push([data[i], start+i]);\n                        }\n                    }\n                }            \n                else {\n                    // we have a properly formatted data series, copy it.\n                    $.extend(true, temp, data);\n                }\n                return temp;\n            };\n\n            var colorIndex = 0;\n            this.series = [];\n            for (var i=0; i<this.data.length; i++) {\n                var sopts = $.extend(true, {index: i}, {seriesColors:this.seriesColors, negativeSeriesColors:this.negativeSeriesColors}, this.options.seriesDefaults, this.options.series[i], {rendererOptions:{animation:{show: this.animate}}});\n                // pass in options in case something needs set prior to initialization.\n                var temp = new Series(sopts);\n                for (var j=0; j<$.jqplot.preParseSeriesOptionsHooks.length; j++) {\n                    $.jqplot.preParseSeriesOptionsHooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);\n                }\n                for (var j=0; j<this.preParseSeriesOptionsHooks.hooks.length; j++) {\n                    this.preParseSeriesOptionsHooks.hooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);\n                }\n                // Now go back and apply the options to the series.  Really should just do this during initializaiton, but don't want to\n                // mess up preParseSeriesOptionsHooks at this point.\n                $.extend(true, temp, sopts);\n                var dir = 'vertical';\n                if (temp.renderer === $.jqplot.BarRenderer && temp.rendererOptions && temp.rendererOptions.barDirection == 'horizontal') {\n                    dir = 'horizontal';\n                    temp._stackAxis = 'x';\n                    temp._primaryAxis = '_yaxis';\n                }\n                temp.data = normalizeData(this.data[i], dir, this.defaultAxisStart);\n                switch (temp.xaxis) {\n                    case 'xaxis':\n                        temp._xaxis = this.axes.xaxis;\n                        break;\n                    case 'x2axis':\n                        temp._xaxis = this.axes.x2axis;\n                        break;\n                    default:\n                        break;\n                }\n                temp._yaxis = this.axes[temp.yaxis];\n                temp._xaxis._series.push(temp);\n                temp._yaxis._series.push(temp);\n                if (temp.show) {\n                    temp._xaxis.show = true;\n                    temp._yaxis.show = true;\n                }\n                else {\n                    if (temp._xaxis.scaleToHiddenSeries) {\n                        temp._xaxis.show = true;\n                    }\n                    if (temp._yaxis.scaleToHiddenSeries) {\n                        temp._yaxis.show = true;\n                    }\n                }\n\n                // // parse the renderer options and apply default colors if not provided\n                // if (!temp.color && temp.show != false) {\n                //     temp.color = cg.next();\n                //     colorIndex = cg.getIndex() - 1;;\n                // }\n                // if (!temp.negativeColor && temp.show != false) {\n                //     temp.negativeColor = ncg.get(colorIndex);\n                //     ncg.setIndex(colorIndex);\n                // }\n                if (!temp.label) {\n                    temp.label = 'Series '+ (i+1).toString();\n                }\n                // temp.rendererOptions.show = temp.show;\n                // $.extend(true, temp.renderer, {color:this.seriesColors[i]}, this.rendererOptions);\n                this.series.push(temp);  \n                for (var j=0; j<$.jqplot.postParseSeriesOptionsHooks.length; j++) {\n                    $.jqplot.postParseSeriesOptionsHooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);\n                }\n                for (var j=0; j<this.postParseSeriesOptionsHooks.hooks.length; j++) {\n                    this.postParseSeriesOptionsHooks.hooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);\n                }\n            }\n            \n            // copy the grid and title options into this object.\n            $.extend(true, this.grid, this.options.grid);\n            // if axis border properties aren't set, set default.\n            for (var i=0, l=_axisNames.length; i<l; i++) {\n                var n = _axisNames[i];\n                var axis = this.axes[n];\n                if (axis.borderWidth == null) {\n                    axis.borderWidth =this.grid.borderWidth;\n                }\n            }\n            \n            if (typeof this.options.title == 'string') {\n                this.title.text = this.options.title;\n            }\n            else if (typeof this.options.title == 'object') {\n                $.extend(true, this.title, this.options.title);\n            }\n            this.title._plotWidth = this._width;\n            this.legend.setOptions(this.options.legend);\n            \n            for (var i=0; i<$.jqplot.postParseOptionsHooks.length; i++) {\n                $.jqplot.postParseOptionsHooks[i].call(this, options);\n            }\n            for (var i=0; i<this.postParseOptionsHooks.hooks.length; i++) {\n                this.postParseOptionsHooks.hooks[i].call(this, options);\n            }\n        };\n        \n        // method: destroy\n        // Releases all resources occupied by the plot\n        this.destroy = function() {\n            this.canvasManager.freeAllCanvases();\n            if (this.eventCanvas && this.eventCanvas._elem) {\n                this.eventCanvas._elem.unbind();\n            }\n            // Couple of posts on Stack Overflow indicate that empty() doesn't\n            // always cear up the dom and release memory.  Sometimes setting\n            // innerHTML property to null is needed.  Particularly on IE, may \n            // have to directly set it to null, bypassing $.\n            this.target.empty();\n\n            this.target[0].innerHTML = '';\n        };\n        \n        // method: replot\n        // Does a reinitialization of the plot followed by\n        // a redraw.  Method could be used to interactively\n        // change plot characteristics and then replot.\n        //\n        // Parameters:\n        // options - Options used for replotting.\n        //\n        // Properties:\n        // clear - false to not clear (empty) the plot container before replotting (default: true).\n        // resetAxes - true to reset all axes min, max, numberTicks and tickInterval setting so axes will rescale themselves.\n        //             optionally pass in list of axes to reset (e.g. ['xaxis', 'y2axis']) (default: false).\n        this.replot = function(options) {\n            var opts =  options || {};\n            var data = opts.data || null;\n            var clear = (opts.clear === false) ? false : true;\n            var resetAxes = opts.resetAxes || false;\n            delete opts.data;\n            delete opts.clear;\n            delete opts.resetAxes;\n\n            this.target.trigger('jqplotPreReplot');\n            \n            if (clear) {\n                this.destroy();\n            }\n            // if have data or other options, full reinit.\n            // otherwise, quickinit.\n            if (data || !$.isEmptyObject(opts)) {\n                this.reInitialize(data, opts);\n            }\n            else {\n                this.quickInit();\n            }\n\n            if (resetAxes) {\n                this.resetAxesScale(resetAxes, opts.axes);\n            }\n            this.draw();\n            this.target.trigger('jqplotPostReplot');\n        };\n        \n        // method: redraw\n        // Empties the plot target div and redraws the plot.\n        // This enables plot data and properties to be changed\n        // and then to comletely clear the plot and redraw.\n        // redraw *will not* reinitialize any plot elements.\n        // That is, axes will not be autoscaled and defaults\n        // will not be reapplied to any plot elements.  redraw\n        // is used primarily with zooming. \n        //\n        // Parameters:\n        // clear - false to not clear (empty) the plot container before redrawing (default: true).\n        this.redraw = function(clear) {\n            clear = (clear != null) ? clear : true;\n            this.target.trigger('jqplotPreRedraw');\n            if (clear) {\n                this.canvasManager.freeAllCanvases();\n                this.eventCanvas._elem.unbind();\n                // Dont think I bind any events to the target, this shouldn't be necessary.\n                // It will remove user's events.\n                // this.target.unbind();\n                this.target.empty();\n            }\n             for (var ax in this.axes) {\n                this.axes[ax]._ticks = [];\n            }\n            this.computePlotData();\n            // for (var i=0; i<this.series.length; i++) {\n            //     this.populatePlotData(this.series[i], i);\n            // }\n            this._sumy = 0;\n            this._sumx = 0;\n            for (var i=0, tsl = this.series.length; i<tsl; i++) {\n                this._sumy += this.series[i]._sumy;\n                this._sumx += this.series[i]._sumx;\n            }\n            this.draw();\n            this.target.trigger('jqplotPostRedraw');\n        };\n        \n        // method: draw\n        // Draws all elements of the plot into the container.\n        // Does not clear the container before drawing.\n        this.draw = function(){\n            if (this.drawIfHidden || this.target.is(':visible')) {\n                this.target.trigger('jqplotPreDraw');\n                var i,\n                    j,\n                    l,\n                    tempseries;\n                for (i=0, l=$.jqplot.preDrawHooks.length; i<l; i++) {\n                    $.jqplot.preDrawHooks[i].call(this);\n                }\n                for (i=0, l=this.preDrawHooks.hooks.length; i<l; i++) {\n                    this.preDrawHooks.hooks[i].apply(this, this.preDrawSeriesHooks.args[i]);\n                }\n                // create an underlying canvas to be used for special features.\n                this.target.append(this.baseCanvas.createElement({left:0, right:0, top:0, bottom:0}, 'jqplot-base-canvas', null, this));\n                this.baseCanvas.setContext();\n                this.target.append(this.title.draw());\n                this.title.pack({top:0, left:0});\n                \n                // make room  for the legend between the grid and the edge.\n                // pass a dummy offsets object and a reference to the plot.\n                var legendElem = this.legend.draw({}, this);\n                \n                var gridPadding = {top:0, left:0, bottom:0, right:0};\n                \n                if (this.legend.placement == \"outsideGrid\") {\n                    // temporarily append the legend to get dimensions\n                    this.target.append(legendElem);\n                    switch (this.legend.location) {\n                        case 'n':\n                            gridPadding.top += this.legend.getHeight();\n                            break;\n                        case 's':\n                            gridPadding.bottom += this.legend.getHeight();\n                            break;\n                        case 'ne':\n                        case 'e':\n                        case 'se':\n                            gridPadding.right += this.legend.getWidth();\n                            break;\n                        case 'nw':\n                        case 'w':\n                        case 'sw':\n                            gridPadding.left += this.legend.getWidth();\n                            break;\n                        default:  // same as 'ne'\n                            gridPadding.right += this.legend.getWidth();\n                            break;\n                    }\n                    legendElem = legendElem.detach();\n                }\n                \n                var ax = this.axes;\n                var name;\n                // draw the yMidAxis first, so xaxis of pyramid chart can adjust itself if needed.\n                for (i=0; i<12; i++) {\n                    name = _axisNames[i];\n                    this.target.append(ax[name].draw(this.baseCanvas._ctx, this));\n                    ax[name].set();\n                }\n                if (ax.yaxis.show) {\n                    gridPadding.left += ax.yaxis.getWidth();\n                }\n                var ra = ['y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];\n                var rapad = [0, 0, 0, 0, 0, 0, 0, 0];\n                var gpr = 0;\n                var n;\n                for (n=0; n<8; n++) {\n                    if (ax[ra[n]].show) {\n                        gpr += ax[ra[n]].getWidth();\n                        rapad[n] = gpr;\n                    }\n                }\n                gridPadding.right += gpr;\n                if (ax.x2axis.show) {\n                    gridPadding.top += ax.x2axis.getHeight();\n                }\n                if (this.title.show) {\n                    gridPadding.top += this.title.getHeight();\n                }\n                if (ax.xaxis.show) {\n                    gridPadding.bottom += ax.xaxis.getHeight();\n                }\n                \n                // end of gridPadding adjustments.\n\n                // if user passed in gridDimensions option, check against calculated gridPadding\n                if (this.options.gridDimensions && $.isPlainObject(this.options.gridDimensions)) {\n                    var gdw = parseInt(this.options.gridDimensions.width, 10) || 0;\n                    var gdh = parseInt(this.options.gridDimensions.height, 10) || 0;\n                    var widthAdj = (this._width - gridPadding.left - gridPadding.right - gdw)/2;\n                    var heightAdj = (this._height - gridPadding.top - gridPadding.bottom - gdh)/2;\n\n                    if (heightAdj >= 0 && widthAdj >= 0) {\n                        gridPadding.top += heightAdj;\n                        gridPadding.bottom += heightAdj;\n                        gridPadding.left += widthAdj;\n                        gridPadding.right += widthAdj;\n                    }\n                }\n                var arr = ['top', 'bottom', 'left', 'right'];\n                for (var n in arr) {\n                    if (this._gridPadding[arr[n]] == null && gridPadding[arr[n]] > 0) {\n                        this._gridPadding[arr[n]] = gridPadding[arr[n]];\n                    }\n                    else if (this._gridPadding[arr[n]] == null) {\n                        this._gridPadding[arr[n]] = this._defaultGridPadding[arr[n]];\n                    }\n                }\n                \n                var legendPadding = this._gridPadding;\n                \n                if (this.legend.placement === 'outsideGrid') {\n                    legendPadding = {top:this.title.getHeight(), left: 0, right: 0, bottom: 0};\n                    if (this.legend.location === 's') {\n                        legendPadding.left = this._gridPadding.left;\n                        legendPadding.right = this._gridPadding.right;\n                    }\n                }\n                \n                ax.xaxis.pack({position:'absolute', bottom:this._gridPadding.bottom - ax.xaxis.getHeight(), left:0, width:this._width}, {min:this._gridPadding.left, max:this._width - this._gridPadding.right});\n                ax.yaxis.pack({position:'absolute', top:0, left:this._gridPadding.left - ax.yaxis.getWidth(), height:this._height}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top});\n                ax.x2axis.pack({position:'absolute', top:this._gridPadding.top - ax.x2axis.getHeight(), left:0, width:this._width}, {min:this._gridPadding.left, max:this._width - this._gridPadding.right});\n                for (i=8; i>0; i--) {\n                    ax[ra[i-1]].pack({position:'absolute', top:0, right:this._gridPadding.right - rapad[i-1]}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top});\n                }\n                var ltemp = (this._width - this._gridPadding.left - this._gridPadding.right)/2.0 + this._gridPadding.left - ax.yMidAxis.getWidth()/2.0;\n                ax.yMidAxis.pack({position:'absolute', top:0, left:ltemp, zIndex:9, textAlign: 'center'}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top});\n            \n                this.target.append(this.grid.createElement(this._gridPadding, this));\n                this.grid.draw();\n                \n                var series = this.series;\n                var seriesLength = series.length;\n                // put the shadow canvases behind the series canvases so shadows don't overlap on stacked bars.\n                for (i=0, l=seriesLength; i<l; i++) {\n                    // draw series in order of stacking.  This affects only\n                    // order in which canvases are added to dom.\n                    j = this.seriesStack[i];\n                    this.target.append(series[j].shadowCanvas.createElement(this._gridPadding, 'jqplot-series-shadowCanvas', null, this));\n                    series[j].shadowCanvas.setContext();\n                    series[j].shadowCanvas._elem.data('seriesIndex', j);\n                }\n                \n                for (i=0, l=seriesLength; i<l; i++) {\n                    // draw series in order of stacking.  This affects only\n                    // order in which canvases are added to dom.\n                    j = this.seriesStack[i];\n                    this.target.append(series[j].canvas.createElement(this._gridPadding, 'jqplot-series-canvas', null, this));\n                    series[j].canvas.setContext();\n                    series[j].canvas._elem.data('seriesIndex', j);\n                }\n                // Need to use filled canvas to capture events in IE.\n                // Also, canvas seems to block selection of other elements in document on FF.\n                this.target.append(this.eventCanvas.createElement(this._gridPadding, 'jqplot-event-canvas', null, this));\n                this.eventCanvas.setContext();\n                this.eventCanvas._ctx.fillStyle = 'rgba(0,0,0,0)';\n                this.eventCanvas._ctx.fillRect(0,0,this.eventCanvas._ctx.canvas.width, this.eventCanvas._ctx.canvas.height);\n            \n                // bind custom event handlers to regular events.\n                this.bindCustomEvents();\n            \n                // draw legend before series if the series needs to know the legend dimensions.\n                if (this.legend.preDraw) {  \n                    this.eventCanvas._elem.before(legendElem);\n                    this.legend.pack(legendPadding);\n                    if (this.legend._elem) {\n                        this.drawSeries({legendInfo:{location:this.legend.location, placement:this.legend.placement, width:this.legend.getWidth(), height:this.legend.getHeight(), xoffset:this.legend.xoffset, yoffset:this.legend.yoffset}});\n                    }\n                    else {\n                        this.drawSeries();\n                    }\n                }\n                else {  // draw series before legend\n                    this.drawSeries();\n                    if (seriesLength) {\n                        $(series[seriesLength-1].canvas._elem).after(legendElem);\n                    }\n                    this.legend.pack(legendPadding);                \n                }\n            \n                // register event listeners on the overlay canvas\n                for (var i=0, l=$.jqplot.eventListenerHooks.length; i<l; i++) {\n                    // in the handler, this will refer to the eventCanvas dom element.\n                    // make sure there are references back into plot objects.\n                    this.eventCanvas._elem.bind($.jqplot.eventListenerHooks[i][0], {plot:this}, $.jqplot.eventListenerHooks[i][1]);\n                }\n            \n                // register event listeners on the overlay canvas\n                for (var i=0, l=this.eventListenerHooks.hooks.length; i<l; i++) {\n                    // in the handler, this will refer to the eventCanvas dom element.\n                    // make sure there are references back into plot objects.\n                    this.eventCanvas._elem.bind(this.eventListenerHooks.hooks[i][0], {plot:this}, this.eventListenerHooks.hooks[i][1]);\n                }\n\n                var fb = this.fillBetween;\n                if(typeof fb.series1 == 'number'){\n                    if(fb.fill&&fb.series1!==fb.series2&&fb.series1<seriesLength&&fb.series2<seriesLength&&series[fb.series1]._type===\"line\"&&series[fb.series2]._type===\"line\")\n                    this.doFillBetweenLines();\n                }\n                else{\n                    if(fb.series1 != null && fb.series2 != null){\n                        var doFb = false;\n                        if(fb.series1.length === fb.series2.length){\n                            var tempSeries1 = 0;\n                            var tempSeries2 = 0;\n                            \n                            for(var cnt = 0; cnt < fb.series1.length; cnt++){\n                                tempSeries1 = fb.series1[cnt];\n                                tempSeries2 = fb.series2[cnt];\n                                if(tempSeries1!==tempSeries2&&tempSeries1<seriesLength&&tempSeries2<seriesLength&&series[tempSeries1]._type===\"line\"&&series[tempSeries2]._type===\"line\"){\n                                    doFb = true;\n                                }\n                                else{\n                                    doFb = false;\n                                    break;\n                                }\n                            }\n                        }\n                        if(fb.fill && doFb){\n                            this.doFillBetweenLines();\n                        }\n                    }\n                }\n\n                for (var i=0, l=$.jqplot.postDrawHooks.length; i<l; i++) {\n                    $.jqplot.postDrawHooks[i].call(this);\n                }\n\n                for (var i=0, l=this.postDrawHooks.hooks.length; i<l; i++) {\n                    this.postDrawHooks.hooks[i].apply(this, this.postDrawHooks.args[i]);\n                }\n            \n                if (this.target.is(':visible')) {\n                    this._drawCount += 1;\n                }\n\n                var temps, \n                    tempr,\n                    sel,\n                    _els;\n                // ughh.  ideally would hide all series then show them.\n                for (i=0, l=seriesLength; i<l; i++) {\n                    temps = series[i];\n                    tempr = temps.renderer;\n                    sel = '.jqplot-point-label.jqplot-series-'+i;\n                    if (tempr.animation && tempr.animation._supported && tempr.animation.show && (this._drawCount < 2 || this.animateReplot)) {\n                        _els = this.target.find(sel);\n                        _els.stop(true, true).hide();\n                        temps.canvas._elem.stop(true, true).hide();\n                        temps.shadowCanvas._elem.stop(true, true).hide();\n                        temps.canvas._elem.jqplotEffect('blind', {mode: 'show', direction: tempr.animation.direction}, tempr.animation.speed);\n                        temps.shadowCanvas._elem.jqplotEffect('blind', {mode: 'show', direction: tempr.animation.direction}, tempr.animation.speed);\n                        _els.fadeIn(tempr.animation.speed*0.8);\n                    }\n                }\n                _els = null;\n            \n                this.target.trigger('jqplotPostDraw', [this]);\n            }\n        };\n\n        jqPlot.prototype.doFillBetweenLines = function () {\n            var fb = this.fillBetween;\n            var series = this.series;\n            var sid1 = fb.series1;\n            var sid2 = fb.series2;\n            var id1 = 0, id2 = 0;\n\n            function fill(id1, id2){\n                var series1 = series[id1];\n                var series2 = series[id2];\n                if (series2.renderer.smooth)\n                    var tempgd = series2.renderer._smoothedData.slice(0).reverse();\n                else\n                    var tempgd = series2.gridData.slice(0).reverse();\n                if (series1.renderer.smooth)\n                    var gd = series1.renderer._smoothedData.concat(tempgd);\n                else\n                    var gd = series1.gridData.concat(tempgd);\n                var color = fb.color !== null ? fb.color : series[sid1].fillColor;\n                var baseSeries = fb.baseSeries !== null ? fb.baseSeries : id1;\n                var sr =\n                    series[baseSeries].renderer.shapeRenderer;\n                var opts =\n                {\n                    fillStyle : color,\n                    fill : true,\n                    closePath : true\n                };\n                sr.draw(series1.shadowCanvas._ctx, gd, opts)\n            }\n\n            if(typeof sid1 == 'number' && typeof sid2 == 'number'){\n                id1 = sid1 < sid2 ? sid1 : sid2;\n                id2 = sid2 > sid1 ? sid2 : sid1;\n                fill(id1, id2);\n            }\n            else{\n                for(var cnt = 0; cnt < sid1.length ; cnt++){\n                    id1 = sid1[cnt] < sid2[cnt] ? sid1[cnt] : sid2[cnt];\n                    id2 = sid2[cnt] > sid1[cnt] ? sid2[cnt] : sid1[cnt];\n                    fill(id1, id2);\n                }\n            }\n        };\n        \n        this.bindCustomEvents = function() {\n            this.eventCanvas._elem.bind('click', {plot:this}, this.onClick);\n            this.eventCanvas._elem.bind('dblclick', {plot:this}, this.onDblClick);\n            this.eventCanvas._elem.bind('mousedown', {plot:this}, this.onMouseDown);\n            this.eventCanvas._elem.bind('mousemove', {plot:this}, this.onMouseMove);\n            this.eventCanvas._elem.bind('mouseenter', {plot:this}, this.onMouseEnter);\n            this.eventCanvas._elem.bind('mouseleave', {plot:this}, this.onMouseLeave);\n            if (this.captureRightClick) {\n                this.eventCanvas._elem.bind('mouseup', {plot:this}, this.onRightClick);\n                this.eventCanvas._elem.get(0).oncontextmenu = function() {\n                    return false;\n                };\n            }\n            else {\n                this.eventCanvas._elem.bind('mouseup', {plot:this}, this.onMouseUp);\n            }\n        };\n        \n        function getEventPosition(ev) {\n            var plot = ev.data.plot;\n            var go = plot.eventCanvas._elem.offset();\n            var gridPos = {x:ev.pageX - go.left, y:ev.pageY - go.top};\n            var dataPos = {xaxis:null, yaxis:null, x2axis:null, y2axis:null, y3axis:null, y4axis:null, y5axis:null, y6axis:null, y7axis:null, y8axis:null, y9axis:null, yMidAxis:null};\n            var an = ['xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];\n            var ax = plot.axes;\n            var n, axis;\n            for (n=11; n>0; n--) {\n                axis = an[n-1];\n                if (ax[axis].show) {\n                    dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]);\n                }\n            }\n\n            return {offsets:go, gridPos:gridPos, dataPos:dataPos};\n        }\n        \n        \n        // function to check if event location is over a area area\n        function checkIntersection(gridpos, plot) {\n            var series = plot.series;\n            var i, j, k, s, r, x, y, theta, sm, sa, minang, maxang;\n            var d0, d, p, pp, points, bw, hp;\n            var threshold, t;\n            for (k=plot.seriesStack.length-1; k>=0; k--) {\n                i = plot.seriesStack[k];\n                s = series[i];\n                hp = s._highlightThreshold;\n                switch (s.renderer.constructor) {\n                    case $.jqplot.BarRenderer:\n                        x = gridpos.x;\n                        y = gridpos.y;\n                        for (j=0; j<s._barPoints.length; j++) {\n                            points = s._barPoints[j];\n                            p = s.gridData[j];\n                            if (x>points[0][0] && x<points[2][0] && (y>points[2][1] && y<points[0][1] || y<points[2][1] && y>points[0][1])) {\n                                return {seriesIndex:s.index, pointIndex:j, gridData:p, data:s.data[j], points:s._barPoints[j]};\n                            }\n                        }\n                        break;\n                    case $.jqplot.PyramidRenderer:\n                        x = gridpos.x;\n                        y = gridpos.y;\n                        for (j=0; j<s._barPoints.length; j++) {\n                            points = s._barPoints[j];\n                            p = s.gridData[j];\n                            if (x > points[0][0] + hp[0][0] && x < points[2][0] + hp[2][0] && y > points[2][1] && y < points[0][1]) {\n                                return {seriesIndex:s.index, pointIndex:j, gridData:p, data:s.data[j], points:s._barPoints[j]};\n                            }\n                        }\n                        break;\n                    \n                    case $.jqplot.DonutRenderer:\n                        sa = s.startAngle/180*Math.PI;\n                        x = gridpos.x - s._center[0];\n                        y = gridpos.y - s._center[1];\n                        r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n                        if (x > 0 && -y >= 0) {\n                            theta = 2*Math.PI - Math.atan(-y/x);\n                        }\n                        else if (x > 0 && -y < 0) {\n                            theta = -Math.atan(-y/x);\n                        }\n                        else if (x < 0) {\n                            theta = Math.PI - Math.atan(-y/x);\n                        }\n                        else if (x == 0 && -y > 0) {\n                            theta = 3*Math.PI/2;\n                        }\n                        else if (x == 0 && -y < 0) {\n                            theta = Math.PI/2;\n                        }\n                        else if (x == 0 && y == 0) {\n                            theta = 0;\n                        }\n                        if (sa) {\n                            theta -= sa;\n                            if (theta < 0) {\n                                theta += 2*Math.PI;\n                            }\n                            else if (theta > 2*Math.PI) {\n                                theta -= 2*Math.PI;\n                            }\n                        }\n            \n                        sm = s.sliceMargin/180*Math.PI;\n                        if (r < s._radius && r > s._innerRadius) {\n                            for (j=0; j<s.gridData.length; j++) {\n                                minang = (j>0) ? s.gridData[j-1][1]+sm : sm;\n                                maxang = s.gridData[j][1];\n                                if (theta > minang && theta < maxang) {\n                                    return {seriesIndex:s.index, pointIndex:j, gridData:[gridpos.x,gridpos.y], data:s.data[j]};\n                                }\n                            }\n                        }\n                        break;\n                        \n                    case $.jqplot.PieRenderer:\n                        sa = s.startAngle/180*Math.PI;\n                        x = gridpos.x - s._center[0];\n                        y = gridpos.y - s._center[1];\n                        r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n                        if (x > 0 && -y >= 0) {\n                            theta = 2*Math.PI - Math.atan(-y/x);\n                        }\n                        else if (x > 0 && -y < 0) {\n                            theta = -Math.atan(-y/x);\n                        }\n                        else if (x < 0) {\n                            theta = Math.PI - Math.atan(-y/x);\n                        }\n                        else if (x == 0 && -y > 0) {\n                            theta = 3*Math.PI/2;\n                        }\n                        else if (x == 0 && -y < 0) {\n                            theta = Math.PI/2;\n                        }\n                        else if (x == 0 && y == 0) {\n                            theta = 0;\n                        }\n                        if (sa) {\n                            theta -= sa;\n                            if (theta < 0) {\n                                theta += 2*Math.PI;\n                            }\n                            else if (theta > 2*Math.PI) {\n                                theta -= 2*Math.PI;\n                            }\n                        }\n            \n                        sm = s.sliceMargin/180*Math.PI;\n                        if (r < s._radius) {\n                            for (j=0; j<s.gridData.length; j++) {\n                                minang = (j>0) ? s.gridData[j-1][1]+sm : sm;\n                                maxang = s.gridData[j][1];\n                                if (theta > minang && theta < maxang) {\n                                    return {seriesIndex:s.index, pointIndex:j, gridData:[gridpos.x,gridpos.y], data:s.data[j]};\n                                }\n                            }\n                        }\n                        break;\n                        \n                    case $.jqplot.BubbleRenderer:\n                        x = gridpos.x;\n                        y = gridpos.y;\n                        var ret = null;\n                        \n                        if (s.show) {\n                            for (var j=0; j<s.gridData.length; j++) {\n                                p = s.gridData[j];\n                                d = Math.sqrt( (x-p[0]) * (x-p[0]) + (y-p[1]) * (y-p[1]) );\n                                if (d <= p[2] && (d <= d0 || d0 == null)) {\n                                   d0 = d;\n                                   ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                }\n                            }\n                            if (ret != null) {\n                                return ret;\n                            }\n                        }\n                        break;\n                        \n                    case $.jqplot.FunnelRenderer:\n                        x = gridpos.x;\n                        y = gridpos.y;\n                        var v = s._vertices,\n                            vfirst = v[0],\n                            vlast = v[v.length-1],\n                            lex,\n                            rex,\n                            cv;\n    \n                        // equations of right and left sides, returns x, y values given height of section (y value and 2 points)\n    \n                        function findedge (l, p1 , p2) {\n                            var m = (p1[1] - p2[1])/(p1[0] - p2[0]);\n                            var b = p1[1] - m*p1[0];\n                            var y = l + p1[1];\n        \n                            return [(y - b)/m, y];\n                        }\n    \n                        // check each section\n                        lex = findedge(y, vfirst[0], vlast[3]);\n                        rex = findedge(y, vfirst[1], vlast[2]);\n                        for (j=0; j<v.length; j++) {\n                            cv = v[j];\n                            if (y >= cv[0][1] && y <= cv[3][1] && x >= lex[0] && x <= rex[0]) {\n                                return {seriesIndex:s.index, pointIndex:j, gridData:null, data:s.data[j]};\n                            }\n                        }         \n                        break;           \n                    \n                    case $.jqplot.LineRenderer:\n                        x = gridpos.x;\n                        y = gridpos.y;\n                        r = s.renderer;\n                        if (s.show) {\n                            if ((s.fill || (s.renderer.bands.show && s.renderer.bands.fill)) && (!plot.plugins.highlighter || !plot.plugins.highlighter.show)) {\n                                // first check if it is in bounding box\n                                var inside = false;\n                                if (x>s._boundingBox[0][0] && x<s._boundingBox[1][0] && y>s._boundingBox[1][1] && y<s._boundingBox[0][1]) { \n                                    // now check the crossing number   \n                                    \n                                    var numPoints = s._areaPoints.length;\n                                    var ii;\n                                    var j = numPoints-1;\n\n                                    for(var ii=0; ii < numPoints; ii++) { \n                                        var vertex1 = [s._areaPoints[ii][0], s._areaPoints[ii][1]];\n                                        var vertex2 = [s._areaPoints[j][0], s._areaPoints[j][1]];\n\n                                        if (vertex1[1] < y && vertex2[1] >= y || vertex2[1] < y && vertex1[1] >= y)     {\n                                            if (vertex1[0] + (y - vertex1[1]) / (vertex2[1] - vertex1[1]) * (vertex2[0] - vertex1[0]) < x) {\n                                                inside = !inside;\n                                            }\n                                        }\n\n                                        j = ii;\n                                    }        \n                                }\n                                if (inside) {\n                                    return {seriesIndex:i, pointIndex:null, gridData:s.gridData, data:s.data, points:s._areaPoints};\n                                }\n                                break;\n                                \n                            }\n\n                            else {\n                                t = s.markerRenderer.size/2+s.neighborThreshold;\n                                threshold = (t > 0) ? t : 0;\n                                for (var j=0; j<s.gridData.length; j++) {\n                                    p = s.gridData[j];\n                                    // neighbor looks different to OHLC chart.\n                                    if (r.constructor == $.jqplot.OHLCRenderer) {\n                                        if (r.candleStick) {\n                                            var yp = s._yaxis.series_u2p;\n                                            if (x >= p[0]-r._bodyWidth/2 && x <= p[0]+r._bodyWidth/2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                                return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                            }\n                                        }\n                                        // if an open hi low close chart\n                                        else if (!r.hlc){\n                                            var yp = s._yaxis.series_u2p;\n                                            if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                                return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                            }\n                                        }\n                                        // a hi low close chart\n                                        else {\n                                            var yp = s._yaxis.series_u2p;\n                                            if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) {\n                                                return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                            }\n                                        }\n                            \n                                    }\n                                    else if (p[0] != null && p[1] != null){\n                                        d = Math.sqrt( (x-p[0]) * (x-p[0]) + (y-p[1]) * (y-p[1]) );\n                                        if (d <= threshold && (d <= d0 || d0 == null)) {\n                                           d0 = d;\n                                           return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                        }\n                                    }\n                                } \n                            }\n                        }\n                        break;\n                        \n                    default:\n                        x = gridpos.x;\n                        y = gridpos.y;\n                        r = s.renderer;\n                        if (s.show) {\n                            t = s.markerRenderer.size/2+s.neighborThreshold;\n                            threshold = (t > 0) ? t : 0;\n                            for (var j=0; j<s.gridData.length; j++) {\n                                p = s.gridData[j];\n                                // neighbor looks different to OHLC chart.\n                                if (r.constructor == $.jqplot.OHLCRenderer) {\n                                    if (r.candleStick) {\n                                        var yp = s._yaxis.series_u2p;\n                                        if (x >= p[0]-r._bodyWidth/2 && x <= p[0]+r._bodyWidth/2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                            return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                        }\n                                    }\n                                    // if an open hi low close chart\n                                    else if (!r.hlc){\n                                        var yp = s._yaxis.series_u2p;\n                                        if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {\n                                            return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                        }\n                                    }\n                                    // a hi low close chart\n                                    else {\n                                        var yp = s._yaxis.series_u2p;\n                                        if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) {\n                                            return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                        }\n                                    }\n                            \n                                }\n                                else {\n                                    d = Math.sqrt( (x-p[0]) * (x-p[0]) + (y-p[1]) * (y-p[1]) );\n                                    if (d <= threshold && (d <= d0 || d0 == null)) {\n                                       d0 = d;\n                                       return {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};\n                                    }\n                                }\n                            } \n                        }\n                        break;\n                }\n            }\n            \n            return null;\n        }\n        \n        \n        \n        this.onClick = function(ev) {\n            // Event passed in is normalized and will have data attribute.\n            // Event passed out is unnormalized.\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var neighbor = checkIntersection(positions.gridPos, p);\n            var evt = $.Event('jqplotClick');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n        };\n        \n        this.onDblClick = function(ev) {\n            // Event passed in is normalized and will have data attribute.\n            // Event passed out is unnormalized.\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var neighbor = checkIntersection(positions.gridPos, p);\n            var evt = $.Event('jqplotDblClick');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n        };\n        \n        this.onMouseDown = function(ev) {\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var neighbor = checkIntersection(positions.gridPos, p);\n            var evt = $.Event('jqplotMouseDown');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n        };\n        \n        this.onMouseUp = function(ev) {\n            var positions = getEventPosition(ev);\n            var evt = $.Event('jqplotMouseUp');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, ev.data.plot]);\n        };\n        \n        this.onRightClick = function(ev) {\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var neighbor = checkIntersection(positions.gridPos, p);\n            if (p.captureRightClick) {\n                if (ev.which == 3) {\n                var evt = $.Event('jqplotRightClick');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                    $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n                }\n                else {\n                var evt = $.Event('jqplotMouseUp');\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                    $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n                }\n            }\n        };\n        \n        this.onMouseMove = function(ev) {\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var neighbor = checkIntersection(positions.gridPos, p);\n            var evt = $.Event('jqplotMouseMove');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);\n        };\n        \n        this.onMouseEnter = function(ev) {\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var evt = $.Event('jqplotMouseEnter');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            evt.relatedTarget = ev.relatedTarget;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, p]);\n        };\n        \n        this.onMouseLeave = function(ev) {\n            var positions = getEventPosition(ev);\n            var p = ev.data.plot;\n            var evt = $.Event('jqplotMouseLeave');\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            evt.relatedTarget = ev.relatedTarget;\n            $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, p]);\n        };\n        \n        // method: drawSeries\n        // Redraws all or just one series on the plot.  No axis scaling\n        // is performed and no other elements on the plot are redrawn.\n        // options is an options object to pass on to the series renderers.\n        // It can be an empty object {}.  idx is the series index\n        // to redraw if only one series is to be redrawn.\n        this.drawSeries = function(options, idx){\n            var i, series, ctx;\n            // if only one argument passed in and it is a number, use it ad idx.\n            idx = (typeof(options) === \"number\" && idx == null) ? options : idx;\n            options = (typeof(options) === \"object\") ? options : {};\n            // draw specified series\n            if (idx != undefined) {\n                series = this.series[idx];\n                ctx = series.shadowCanvas._ctx;\n                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                series.drawShadow(ctx, options, this);\n                ctx = series.canvas._ctx;\n                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                series.draw(ctx, options, this);\n                if (series.renderer.constructor == $.jqplot.BezierCurveRenderer) {\n                    if (idx < this.series.length - 1) {\n                        this.drawSeries(idx+1); \n                    }\n                }\n            }\n            \n            else {\n                // if call series drawShadow method first, in case all series shadows\n                // should be drawn before any series.  This will ensure, like for \n                // stacked bar plots, that shadows don't overlap series.\n                for (i=0; i<this.series.length; i++) {\n                    // first clear the canvas\n                    series = this.series[i];\n                    ctx = series.shadowCanvas._ctx;\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                    series.drawShadow(ctx, options, this);\n                    ctx = series.canvas._ctx;\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                    series.draw(ctx, options, this);\n                }\n            }\n            options = idx = i = series = ctx = null;\n        };\n        \n        // method: moveSeriesToFront\n        // This method requires jQuery 1.4+\n        // Moves the specified series canvas in front of all other series canvases.\n        // This effectively \"draws\" the specified series on top of all other series,\n        // although it is performed through DOM manipulation, no redrawing is performed.\n        //\n        // Parameters:\n        // idx - 0 based index of the series to move.  This will be the index of the series\n        // as it was first passed into the jqplot function.\n        this.moveSeriesToFront = function (idx) { \n            idx = parseInt(idx, 10);\n            var stackIndex = $.inArray(idx, this.seriesStack);\n            // if already in front, return\n            if (stackIndex == -1) {\n                return;\n            }\n            if (stackIndex == this.seriesStack.length -1) {\n                this.previousSeriesStack = this.seriesStack.slice(0);\n                return;\n            }\n            var opidx = this.seriesStack[this.seriesStack.length -1];\n            var serelem = this.series[idx].canvas._elem.detach();\n            var shadelem = this.series[idx].shadowCanvas._elem.detach();\n            this.series[opidx].shadowCanvas._elem.after(shadelem);\n            this.series[opidx].canvas._elem.after(serelem);\n            this.previousSeriesStack = this.seriesStack.slice(0);\n            this.seriesStack.splice(stackIndex, 1);\n            this.seriesStack.push(idx);\n        };\n        \n        // method: moveSeriesToBack\n        // This method requires jQuery 1.4+\n        // Moves the specified series canvas behind all other series canvases.\n        //\n        // Parameters:\n        // idx - 0 based index of the series to move.  This will be the index of the series\n        // as it was first passed into the jqplot function.\n        this.moveSeriesToBack = function (idx) {\n            idx = parseInt(idx, 10);\n            var stackIndex = $.inArray(idx, this.seriesStack);\n            // if already in back, return\n            if (stackIndex == 0 || stackIndex == -1) {\n                return;\n            }\n            var opidx = this.seriesStack[0];\n            var serelem = this.series[idx].canvas._elem.detach();\n            var shadelem = this.series[idx].shadowCanvas._elem.detach();\n            this.series[opidx].shadowCanvas._elem.before(shadelem);\n            this.series[opidx].canvas._elem.before(serelem);\n            this.previousSeriesStack = this.seriesStack.slice(0);\n            this.seriesStack.splice(stackIndex, 1);\n            this.seriesStack.unshift(idx);\n        };\n        \n        // method: restorePreviousSeriesOrder\n        // This method requires jQuery 1.4+\n        // Restore the series canvas order to its previous state.\n        // Useful to put a series back where it belongs after moving\n        // it to the front.\n        this.restorePreviousSeriesOrder = function () {\n            var i, j, serelem, shadelem, temp, move, keep;\n            // if no change, return.\n            if (this.seriesStack == this.previousSeriesStack) {\n                return;\n            }\n            for (i=1; i<this.previousSeriesStack.length; i++) {\n                move = this.previousSeriesStack[i];\n                keep = this.previousSeriesStack[i-1];\n                serelem = this.series[move].canvas._elem.detach();\n                shadelem = this.series[move].shadowCanvas._elem.detach();\n                this.series[keep].shadowCanvas._elem.after(shadelem);\n                this.series[keep].canvas._elem.after(serelem);\n            }\n            temp = this.seriesStack.slice(0);\n            this.seriesStack = this.previousSeriesStack.slice(0);\n            this.previousSeriesStack = temp;\n        };\n        \n        // method: restoreOriginalSeriesOrder\n        // This method requires jQuery 1.4+\n        // Restore the series canvas order to its original order\n        // when the plot was created.\n        this.restoreOriginalSeriesOrder = function () {\n            var i, j, arr=[], serelem, shadelem;\n            for (i=0; i<this.series.length; i++) {\n                arr.push(i);\n            }\n            if (this.seriesStack == arr) {\n                return;\n            }\n            this.previousSeriesStack = this.seriesStack.slice(0);\n            this.seriesStack = arr;\n            for (i=1; i<this.seriesStack.length; i++) {\n                serelem = this.series[i].canvas._elem.detach();\n                shadelem = this.series[i].shadowCanvas._elem.detach();\n                this.series[i-1].shadowCanvas._elem.after(shadelem);\n                this.series[i-1].canvas._elem.after(serelem);\n            }\n        };\n        \n        this.activateTheme = function (name) {\n            this.themeEngine.activate(this, name);\n        };\n    }\n    \n    \n    // conpute a highlight color or array of highlight colors from given colors.\n    $.jqplot.computeHighlightColors  = function(colors) {\n        var ret;\n        if ($.isArray(colors)) {\n            ret = [];\n            for (var i=0; i<colors.length; i++){\n                var rgba = $.jqplot.getColorComponents(colors[i]);\n                var newrgb = [rgba[0], rgba[1], rgba[2]];\n                var sum = newrgb[0] + newrgb[1] + newrgb[2];\n                for (var j=0; j<3; j++) {\n                    // when darkening, lowest color component can be is 60.\n                    newrgb[j] = (sum > 660) ?  newrgb[j] * 0.85 : 0.73 * newrgb[j] + 90;\n                    newrgb[j] = parseInt(newrgb[j], 10);\n                    (newrgb[j] > 255) ? 255 : newrgb[j];\n                }\n                // newrgb[3] = (rgba[3] > 0.4) ? rgba[3] * 0.4 : rgba[3] * 1.5;\n                // newrgb[3] = (rgba[3] > 0.5) ? 0.8 * rgba[3] - .1 : rgba[3] + 0.2;\n                newrgb[3] = 0.3 + 0.35 * rgba[3];\n                ret.push('rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+newrgb[3]+')');\n            }\n        }\n        else {\n            var rgba = $.jqplot.getColorComponents(colors);\n            var newrgb = [rgba[0], rgba[1], rgba[2]];\n            var sum = newrgb[0] + newrgb[1] + newrgb[2];\n            for (var j=0; j<3; j++) {\n                // when darkening, lowest color component can be is 60.\n                // newrgb[j] = (sum > 570) ?  newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);\n                // newrgb[j] = parseInt(newrgb[j], 10);\n                newrgb[j] = (sum > 660) ?  newrgb[j] * 0.85 : 0.73 * newrgb[j] + 90;\n                newrgb[j] = parseInt(newrgb[j], 10);\n                (newrgb[j] > 255) ? 255 : newrgb[j];\n            }\n            // newrgb[3] = (rgba[3] > 0.4) ? rgba[3] * 0.4 : rgba[3] * 1.5;\n            // newrgb[3] = (rgba[3] > 0.5) ? 0.8 * rgba[3] - .1 : rgba[3] + 0.2;\n            newrgb[3] = 0.3 + 0.35 * rgba[3];\n            ret = 'rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+newrgb[3]+')';\n        }\n        return ret;\n    };\n        \n   $.jqplot.ColorGenerator = function(colors) {\n        colors = colors || $.jqplot.config.defaultColors;\n        var idx = 0;\n        \n        this.next = function () { \n            if (idx < colors.length) {\n                return colors[idx++];\n            }\n            else {\n                idx = 0;\n                return colors[idx++];\n            }\n        };\n        \n        this.previous = function () { \n            if (idx > 0) {\n                return colors[idx--];\n            }\n            else {\n                idx = colors.length-1;\n                return colors[idx];\n            }\n        };\n        \n        // get a color by index without advancing pointer.\n        this.get = function(i) {\n            var idx = i - colors.length * Math.floor(i/colors.length);\n            return colors[idx];\n        };\n        \n        this.setColors = function(c) {\n            colors = c;\n        };\n        \n        this.reset = function() {\n            idx = 0;\n        };\n\n        this.getIndex = function() {\n            return idx;\n        };\n\n        this.setIndex = function(index) {\n            idx = index;\n        };\n    };\n\n    // convert a hex color string to rgb string.\n    // h - 3 or 6 character hex string, with or without leading #\n    // a - optional alpha\n    $.jqplot.hex2rgb = function(h, a) {\n        h = h.replace('#', '');\n        if (h.length == 3) {\n            h = h.charAt(0)+h.charAt(0)+h.charAt(1)+h.charAt(1)+h.charAt(2)+h.charAt(2);\n        }\n        var rgb;\n        rgb = 'rgba('+parseInt(h.slice(0,2), 16)+', '+parseInt(h.slice(2,4), 16)+', '+parseInt(h.slice(4,6), 16);\n        if (a) {\n            rgb += ', '+a;\n        }\n        rgb += ')';\n        return rgb;\n    };\n    \n    // convert an rgb color spec to a hex spec.  ignore any alpha specification.\n    $.jqplot.rgb2hex = function(s) {\n        var pat = /rgba?\\( *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *(?:, *[0-9.]*)?\\)/;\n        var m = s.match(pat);\n        var h = '#';\n        for (var i=1; i<4; i++) {\n            var temp;\n            if (m[i].search(/%/) != -1) {\n                temp = parseInt(255*m[i]/100, 10).toString(16);\n                if (temp.length == 1) {\n                    temp = '0'+temp;\n                }\n            }\n            else {\n                temp = parseInt(m[i], 10).toString(16);\n                if (temp.length == 1) {\n                    temp = '0'+temp;\n                }\n            }\n            h += temp;\n        }\n        return h;\n    };\n    \n    // given a css color spec, return an rgb css color spec\n    $.jqplot.normalize2rgb = function(s, a) {\n        if (s.search(/^ *rgba?\\(/) != -1) {\n            return s; \n        }\n        else if (s.search(/^ *#?[0-9a-fA-F]?[0-9a-fA-F]/) != -1) {\n            return $.jqplot.hex2rgb(s, a);\n        }\n        else {\n            throw new Error('Invalid color spec');\n        }\n    };\n    \n    // extract the r, g, b, a color components out of a css color spec.\n    $.jqplot.getColorComponents = function(s) {\n        // check to see if a color keyword.\n        s = $.jqplot.colorKeywordMap[s] || s;\n        var rgb = $.jqplot.normalize2rgb(s);\n        var pat = /rgba?\\( *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *, *([0-9]{1,3}\\.?[0-9]*%?) *,? *([0-9.]* *)?\\)/;\n        var m = rgb.match(pat);\n        var ret = [];\n        for (var i=1; i<4; i++) {\n            if (m[i].search(/%/) != -1) {\n                ret[i-1] = parseInt(255*m[i]/100, 10);\n            }\n            else {\n                ret[i-1] = parseInt(m[i], 10);\n            }\n        }\n        ret[3] = parseFloat(m[4]) ? parseFloat(m[4]) : 1.0;\n        return ret;\n    };\n    \n    $.jqplot.colorKeywordMap = {\n        aliceblue: 'rgb(240, 248, 255)',\n        antiquewhite: 'rgb(250, 235, 215)',\n        aqua: 'rgb( 0, 255, 255)',\n        aquamarine: 'rgb(127, 255, 212)',\n        azure: 'rgb(240, 255, 255)',\n        beige: 'rgb(245, 245, 220)',\n        bisque: 'rgb(255, 228, 196)',\n        black: 'rgb( 0, 0, 0)',\n        blanchedalmond: 'rgb(255, 235, 205)',\n        blue: 'rgb( 0, 0, 255)',\n        blueviolet: 'rgb(138, 43, 226)',\n        brown: 'rgb(165, 42, 42)',\n        burlywood: 'rgb(222, 184, 135)',\n        cadetblue: 'rgb( 95, 158, 160)',\n        chartreuse: 'rgb(127, 255, 0)',\n        chocolate: 'rgb(210, 105, 30)',\n        coral: 'rgb(255, 127, 80)',\n        cornflowerblue: 'rgb(100, 149, 237)',\n        cornsilk: 'rgb(255, 248, 220)',\n        crimson: 'rgb(220, 20, 60)',\n        cyan: 'rgb( 0, 255, 255)',\n        darkblue: 'rgb( 0, 0, 139)',\n        darkcyan: 'rgb( 0, 139, 139)',\n        darkgoldenrod: 'rgb(184, 134, 11)',\n        darkgray: 'rgb(169, 169, 169)',\n        darkgreen: 'rgb( 0, 100, 0)',\n        darkgrey: 'rgb(169, 169, 169)',\n        darkkhaki: 'rgb(189, 183, 107)',\n        darkmagenta: 'rgb(139, 0, 139)',\n        darkolivegreen: 'rgb( 85, 107, 47)',\n        darkorange: 'rgb(255, 140, 0)',\n        darkorchid: 'rgb(153, 50, 204)',\n        darkred: 'rgb(139, 0, 0)',\n        darksalmon: 'rgb(233, 150, 122)',\n        darkseagreen: 'rgb(143, 188, 143)',\n        darkslateblue: 'rgb( 72, 61, 139)',\n        darkslategray: 'rgb( 47, 79, 79)',\n        darkslategrey: 'rgb( 47, 79, 79)',\n        darkturquoise: 'rgb( 0, 206, 209)',\n        darkviolet: 'rgb(148, 0, 211)',\n        deeppink: 'rgb(255, 20, 147)',\n        deepskyblue: 'rgb( 0, 191, 255)',\n        dimgray: 'rgb(105, 105, 105)',\n        dimgrey: 'rgb(105, 105, 105)',\n        dodgerblue: 'rgb( 30, 144, 255)',\n        firebrick: 'rgb(178, 34, 34)',\n        floralwhite: 'rgb(255, 250, 240)',\n        forestgreen: 'rgb( 34, 139, 34)',\n        fuchsia: 'rgb(255, 0, 255)',\n        gainsboro: 'rgb(220, 220, 220)',\n        ghostwhite: 'rgb(248, 248, 255)',\n        gold: 'rgb(255, 215, 0)',\n        goldenrod: 'rgb(218, 165, 32)',\n        gray: 'rgb(128, 128, 128)',\n        grey: 'rgb(128, 128, 128)',\n        green: 'rgb( 0, 128, 0)',\n        greenyellow: 'rgb(173, 255, 47)',\n        honeydew: 'rgb(240, 255, 240)',\n        hotpink: 'rgb(255, 105, 180)',\n        indianred: 'rgb(205, 92, 92)',\n        indigo: 'rgb( 75, 0, 130)',\n        ivory: 'rgb(255, 255, 240)',\n        khaki: 'rgb(240, 230, 140)',\n        lavender: 'rgb(230, 230, 250)',\n        lavenderblush: 'rgb(255, 240, 245)',\n        lawngreen: 'rgb(124, 252, 0)',\n        lemonchiffon: 'rgb(255, 250, 205)',\n        lightblue: 'rgb(173, 216, 230)',\n        lightcoral: 'rgb(240, 128, 128)',\n        lightcyan: 'rgb(224, 255, 255)',\n        lightgoldenrodyellow: 'rgb(250, 250, 210)',\n        lightgray: 'rgb(211, 211, 211)',\n        lightgreen: 'rgb(144, 238, 144)',\n        lightgrey: 'rgb(211, 211, 211)',\n        lightpink: 'rgb(255, 182, 193)',\n        lightsalmon: 'rgb(255, 160, 122)',\n        lightseagreen: 'rgb( 32, 178, 170)',\n        lightskyblue: 'rgb(135, 206, 250)',\n        lightslategray: 'rgb(119, 136, 153)',\n        lightslategrey: 'rgb(119, 136, 153)',\n        lightsteelblue: 'rgb(176, 196, 222)',\n        lightyellow: 'rgb(255, 255, 224)',\n        lime: 'rgb( 0, 255, 0)',\n        limegreen: 'rgb( 50, 205, 50)',\n        linen: 'rgb(250, 240, 230)',\n        magenta: 'rgb(255, 0, 255)',\n        maroon: 'rgb(128, 0, 0)',\n        mediumaquamarine: 'rgb(102, 205, 170)',\n        mediumblue: 'rgb( 0, 0, 205)',\n        mediumorchid: 'rgb(186, 85, 211)',\n        mediumpurple: 'rgb(147, 112, 219)',\n        mediumseagreen: 'rgb( 60, 179, 113)',\n        mediumslateblue: 'rgb(123, 104, 238)',\n        mediumspringgreen: 'rgb( 0, 250, 154)',\n        mediumturquoise: 'rgb( 72, 209, 204)',\n        mediumvioletred: 'rgb(199, 21, 133)',\n        midnightblue: 'rgb( 25, 25, 112)',\n        mintcream: 'rgb(245, 255, 250)',\n        mistyrose: 'rgb(255, 228, 225)',\n        moccasin: 'rgb(255, 228, 181)',\n        navajowhite: 'rgb(255, 222, 173)',\n        navy: 'rgb( 0, 0, 128)',\n        oldlace: 'rgb(253, 245, 230)',\n        olive: 'rgb(128, 128, 0)',\n        olivedrab: 'rgb(107, 142, 35)',\n        orange: 'rgb(255, 165, 0)',\n        orangered: 'rgb(255, 69, 0)',\n        orchid: 'rgb(218, 112, 214)',\n        palegoldenrod: 'rgb(238, 232, 170)',\n        palegreen: 'rgb(152, 251, 152)',\n        paleturquoise: 'rgb(175, 238, 238)',\n        palevioletred: 'rgb(219, 112, 147)',\n        papayawhip: 'rgb(255, 239, 213)',\n        peachpuff: 'rgb(255, 218, 185)',\n        peru: 'rgb(205, 133, 63)',\n        pink: 'rgb(255, 192, 203)',\n        plum: 'rgb(221, 160, 221)',\n        powderblue: 'rgb(176, 224, 230)',\n        purple: 'rgb(128, 0, 128)',\n        red: 'rgb(255, 0, 0)',\n        rosybrown: 'rgb(188, 143, 143)',\n        royalblue: 'rgb( 65, 105, 225)',\n        saddlebrown: 'rgb(139, 69, 19)',\n        salmon: 'rgb(250, 128, 114)',\n        sandybrown: 'rgb(244, 164, 96)',\n        seagreen: 'rgb( 46, 139, 87)',\n        seashell: 'rgb(255, 245, 238)',\n        sienna: 'rgb(160, 82, 45)',\n        silver: 'rgb(192, 192, 192)',\n        skyblue: 'rgb(135, 206, 235)',\n        slateblue: 'rgb(106, 90, 205)',\n        slategray: 'rgb(112, 128, 144)',\n        slategrey: 'rgb(112, 128, 144)',\n        snow: 'rgb(255, 250, 250)',\n        springgreen: 'rgb( 0, 255, 127)',\n        steelblue: 'rgb( 70, 130, 180)',\n        tan: 'rgb(210, 180, 140)',\n        teal: 'rgb( 0, 128, 128)',\n        thistle: 'rgb(216, 191, 216)',\n        tomato: 'rgb(255, 99, 71)',\n        turquoise: 'rgb( 64, 224, 208)',\n        violet: 'rgb(238, 130, 238)',\n        wheat: 'rgb(245, 222, 179)',\n        white: 'rgb(255, 255, 255)',\n        whitesmoke: 'rgb(245, 245, 245)',\n        yellow: 'rgb(255, 255, 0)',\n        yellowgreen: 'rgb(154, 205, 50)'\n    };\n\n    \n})(jQuery);\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // Class: $.jqplot.DivTitleRenderer\n    // The default title renderer for jqPlot.  This class has no options beyond the <Title> class. \n    $.jqplot.DivTitleRenderer = function() {\n    };\n    \n    $.jqplot.DivTitleRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.DivTitleRenderer.prototype.draw = function() {\n        // Memory Leaks patch\n        if (this._elem) {\n            this._elem.emptyForce();\n            this._elem = null;\n        }\n\n        var r = this.renderer;\n        var elem = document.createElement('div');\n        this._elem = $(elem);\n        this._elem.addClass('jqplot-title');\n\n        if (!this.text) {\n            this.show = false;\n            this._elem.height(0);\n            this._elem.width(0);\n        }\n        else if (this.text) {\n            var color;\n            if (this.color) {\n                color = this.color;\n            }\n            else if (this.textColor) {\n                color = this.textColor;\n            }\n\n            // don't trust that a stylesheet is present, set the position.\n            var styles = {position:'absolute', top:'0px', left:'0px'};\n\n            if (this._plotWidth) {\n                styles['width'] = this._plotWidth+'px';\n            }\n            if (this.fontSize) {\n                styles['fontSize'] = this.fontSize;\n            }\n            if (typeof this.textAlign === 'string') {\n                styles['textAlign'] = this.textAlign;\n            }\n            else {\n                styles['textAlign'] = 'center';\n            }\n            if (color) {\n                styles['color'] = color;\n            }\n            if (this.paddingBottom) {\n                styles['paddingBottom'] = this.paddingBottom;\n            }\n            if (this.fontFamily) {\n                styles['fontFamily'] = this.fontFamily;\n            }\n\n            this._elem.css(styles);\n            if (this.escapeHtml) {\n                this._elem.text(this.text);\n            }\n            else {\n                this._elem.html(this.text);\n            }\n\n\n            // styletext += (this._plotWidth) ? 'width:'+this._plotWidth+'px;' : '';\n            // styletext += (this.fontSize) ? 'font-size:'+this.fontSize+';' : '';\n            // styletext += (this.textAlign) ? 'text-align:'+this.textAlign+';' : 'text-align:center;';\n            // styletext += (color) ? 'color:'+color+';' : '';\n            // styletext += (this.paddingBottom) ? 'padding-bottom:'+this.paddingBottom+';' : '';\n            // this._elem = $('<div class=\"jqplot-title\" style=\"'+styletext+'\">'+this.text+'</div>');\n            // if (this.fontFamily) {\n            //     this._elem.css('font-family', this.fontFamily);\n            // }\n        }\n\n        elem = null;\n        \n        return this._elem;\n    };\n    \n    $.jqplot.DivTitleRenderer.prototype.pack = function() {\n        // nothing to do here\n    };\n})(jQuery);  ","/*\n * jQuery UI Effects Blind 1.9pre\n *\n * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * http://docs.jquery.com/UI/Effects/Blind\n *\n * Depends:\n *  jquery.effects.core.js\n */\n\n //////\n // jquery ui blind effect used for series animation in jqplot.\n //////\n(function($) {\n\n    var rvertical = /up|down|vertical/,\n        rpositivemotion = /up|left|vertical|horizontal/;\n\n    $.jqplot.effects.effect.blind = function( o, done ) {\n        // Create element\n        var el = $( this ),\n            props = [ \"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\" ],\n            mode = $.jqplot.effects.setMode( el, o.mode || \"hide\" ),\n            direction = o.direction || \"up\",\n            vertical = rvertical.test( direction ),\n            ref = vertical ? \"height\" : \"width\",\n            ref2 = vertical ? \"top\" : \"left\",\n            motion = rpositivemotion.test( direction ),\n            animation = {},\n            show = mode === \"show\",\n            wrapper, distance, top;\n\n        // // if already wrapped, the wrapper's properties are my property. #6245\n        if ( el.parent().is( \".ui-effects-wrapper\" ) ) {\n            $.jqplot.effects.save( el.parent(), props );\n        } else {\n            $.jqplot.effects.save( el, props );\n        }\n        el.show();\n        top = parseInt(el.css('top'), 10);\n        wrapper = $.jqplot.effects.createWrapper( el ).css({\n            overflow: \"hidden\"\n        });\n\n        distance = vertical ? wrapper[ ref ]() + top : wrapper[ ref ]();\n\n        animation[ ref ] = show ? String(distance) : '0';\n        if ( !motion ) {\n            el\n                .css( vertical ? \"bottom\" : \"right\", 0 )\n                .css( vertical ? \"top\" : \"left\", \"\" )\n                .css({ position: \"absolute\" });\n            animation[ ref2 ] = show ? '0' : String(distance);\n        }\n\n        // // start at 0 if we are showing\n        if ( show ) {\n            wrapper.css( ref, 0 );\n            if ( ! motion ) {\n                wrapper.css( ref2, distance );\n            }\n        }\n\n        // // Animate\n        wrapper.animate( animation, {\n            duration: o.duration,\n            easing: o.easing,\n            queue: false,\n            complete: function() {\n                if ( mode === \"hide\" ) {\n                    el.hide();\n                }\n                $.jqplot.effects.restore( el, props );\n                $.jqplot.effects.removeWrapper( el );\n                done();\n            }\n        });\n\n    };\n\n})(jQuery);\n","/*\n * jQuery UI Effects 1.9pre\n *\n * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * http://docs.jquery.com/UI/Effects/\n */\n\n //////\n // Much reduced version of jquery ui effects core used\n // for series animation in jqplot.\n //////\n(function($) {\n\n    var backCompat = $.uiBackCompat !== false;\n\n    $.jqplot.effects = {\n        effect: {}\n    };\n\n    // prefix used for storing data on .data()\n    var dataSpace = \"jqplot.storage.\";\n\n    /******************************************************************************/\n    /*********************************** EFFECTS **********************************/\n    /******************************************************************************/\n\n    $.extend( $.jqplot.effects, {\n        version: \"1.9pre\",\n\n        // Saves a set of properties in a data storage\n        save: function( element, set ) {\n            for( var i=0; i < set.length; i++ ) {\n                if ( set[ i ] !== null ) {\n                    element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );\n                }\n            }\n        },\n\n        // Restores a set of previously saved properties from a data storage\n        restore: function( element, set ) {\n            for( var i=0; i < set.length; i++ ) {\n                if ( set[ i ] !== null ) {\n                    element.css( set[ i ], element.data( dataSpace + set[ i ] ) );\n                }\n            }\n        },\n\n        setMode: function( el, mode ) {\n            if (mode === \"toggle\") {\n                mode = el.is( \":hidden\" ) ? \"show\" : \"hide\";\n            }\n            return mode;\n        },\n\n        // Wraps the element around a wrapper that copies position properties\n        createWrapper: function( element ) {\n\n            // if the element is already wrapped, return it\n            if ( element.parent().is( \".ui-effects-wrapper\" )) {\n                return element.parent();\n            }\n\n            // wrap the element\n            var props = {\n                    width: element.outerWidth(true),\n                    height: element.outerHeight(true),\n                    \"float\": element.css( \"float\" )\n                },\n                wrapper = $( \"<div></div>\" )\n                    .addClass( \"ui-effects-wrapper\" )\n                    .css({\n                        fontSize: \"100%\",\n                        background: \"transparent\",\n                        border: \"none\",\n                        margin: 0,\n                        padding: 0\n                    }),\n                // Store the size in case width/height are defined in % - Fixes #5245\n                size = {\n                    width: element.width(),\n                    height: element.height()\n                },\n                active = document.activeElement;\n\n            element.wrap( wrapper );\n\n            // Fixes #7595 - Elements lose focus when wrapped.\n            if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {\n                $( active ).focus();\n            }\n\n            wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually loose the reference to the wrapped element\n\n            // transfer positioning properties to the wrapper\n            if ( element.css( \"position\" ) === \"static\" ) {\n                wrapper.css({ position: \"relative\" });\n                element.css({ position: \"relative\" });\n            } else {\n                $.extend( props, {\n                    position: element.css( \"position\" ),\n                    zIndex: element.css( \"z-index\" )\n                });\n                $.each([ \"top\", \"left\", \"bottom\", \"right\" ], function(i, pos) {\n                    props[ pos ] = element.css( pos );\n                    if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {\n                        props[ pos ] = \"auto\";\n                    }\n                });\n                element.css({\n                    position: \"relative\",\n                    top: 0,\n                    left: 0,\n                    right: \"auto\",\n                    bottom: \"auto\"\n                });\n            }\n            element.css(size);\n\n            return wrapper.css( props ).show();\n        },\n\n        removeWrapper: function( element ) {\n            var active = document.activeElement;\n\n            if ( element.parent().is( \".ui-effects-wrapper\" ) ) {\n                element.parent().replaceWith( element );\n\n                // Fixes #7595 - Elements lose focus when wrapped.\n                if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {\n                    $( active ).focus();\n                }\n            }\n\n\n            return element;\n        }\n    });\n\n    // return an effect options object for the given parameters:\n    function _normalizeArguments( effect, options, speed, callback ) {\n\n        // short path for passing an effect options object:\n        if ( $.isPlainObject( effect ) ) {\n            return effect;\n        }\n\n        // convert to an object\n        effect = { effect: effect };\n\n        // catch (effect)\n        if ( options === undefined ) {\n            options = {};\n        }\n\n        // catch (effect, callback)\n        if ( $.isFunction( options ) ) {\n            callback = options;\n            speed = null;\n            options = {};\n        }\n\n        // catch (effect, speed, ?)\n        if ( $.type( options ) === \"number\" || $.fx.speeds[ options ]) {\n            callback = speed;\n            speed = options;\n            options = {};\n        }\n\n        // catch (effect, options, callback)\n        if ( $.isFunction( speed ) ) {\n            callback = speed;\n            speed = null;\n        }\n\n        // add options to effect\n        if ( options ) {\n            $.extend( effect, options );\n        }\n\n        speed = speed || options.duration;\n        effect.duration = $.fx.off ? 0 : typeof speed === \"number\"\n            ? speed : speed in $.fx.speeds ? $.fx.speeds[ speed ] : $.fx.speeds._default;\n\n        effect.complete = callback || options.complete;\n\n        return effect;\n    }\n\n    function standardSpeed( speed ) {\n        // valid standard speeds\n        if ( !speed || typeof speed === \"number\" || $.fx.speeds[ speed ] ) {\n            return true;\n        }\n\n        // invalid strings - treat as \"normal\" speed\n        if ( typeof speed === \"string\" && !$.jqplot.effects.effect[ speed ] ) {\n            // TODO: remove in 2.0 (#7115)\n            if ( backCompat && $.jqplot.effects[ speed ] ) {\n                return false;\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    $.fn.extend({\n        jqplotEffect: function( effect, options, speed, callback ) {\n            var args = _normalizeArguments.apply( this, arguments ),\n                mode = args.mode,\n                queue = args.queue,\n                effectMethod = $.jqplot.effects.effect[ args.effect ],\n\n                // DEPRECATED: remove in 2.0 (#7115)\n                oldEffectMethod = !effectMethod && backCompat && $.jqplot.effects[ args.effect ];\n\n            if ( $.fx.off || !( effectMethod || oldEffectMethod ) ) {\n                // delegate to the original method (e.g., .show()) if possible\n                if ( mode ) {\n                    return this[ mode ]( args.duration, args.complete );\n                } else {\n                    return this.each( function() {\n                        if ( args.complete ) {\n                            args.complete.call( this );\n                        }\n                    });\n                }\n            }\n\n            function run( next ) {\n                var elem = $( this ),\n                    complete = args.complete,\n                    mode = args.mode;\n\n                function done() {\n                    if ( $.isFunction( complete ) ) {\n                        complete.call( elem[0] );\n                    }\n                    if ( $.isFunction( next ) ) {\n                        next();\n                    }\n                }\n\n                // if the element is hiddden and mode is hide,\n                // or element is visible and mode is show\n                if ( elem.is( \":hidden\" ) ? mode === \"hide\" : mode === \"show\" ) {\n                    done();\n                } else {\n                    effectMethod.call( elem[0], args, done );\n                }\n            }\n\n            // TODO: remove this check in 2.0, effectMethod will always be true\n            if ( effectMethod ) {\n                return queue === false ? this.each( run ) : this.queue( queue || \"fx\", run );\n            } else {\n                // DEPRECATED: remove in 2.0 (#7115)\n                return oldEffectMethod.call(this, {\n                    options: args,\n                    duration: args.duration,\n                    callback: args.complete,\n                    mode: args.mode\n                });\n            }\n        }\n    });\n\n})(jQuery);\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n\n /**\n  * The following dashed line support contributed by Cory Sharp.\n  * After I implemented an inferior method, Cory responded with a generous\n  * contribution of code and input which proved a more powerful and\n  * elegant solution.\n  */\n    \n(function($) {\n\n    var dotlen = 0.1;\n\n    $.jqplot.LinePattern = function (ctx, pattern) {\n\n        var defaultLinePatterns = {\n            dotted: [ dotlen, $.jqplot.config.dotGapLength ],\n            dashed: [ $.jqplot.config.dashLength, $.jqplot.config.gapLength ],\n            solid: null\n        };\n\n        if (typeof pattern === 'string') {\n            if (pattern[0] === '.' || pattern[0] === '-') {\n                var s = pattern;\n                pattern = [];\n                for (var i=0, imax=s.length; i<imax; i++) {\n                    if (s[i] === '.') {\n                        pattern.push( dotlen );\n                    }\n                    else if (s[i] === '-') {\n                        pattern.push( $.jqplot.config.dashLength );\n                    }\n                    else {\n                        continue;\n                    }\n                    pattern.push( $.jqplot.config.gapLength );\n                }\n            }\n            else {\n                pattern = defaultLinePatterns[pattern];\n            }\n        }\n\n        if (!(pattern && pattern.length)) {\n            return ctx;\n        }\n\n        var patternIndex = 0;\n        var patternDistance = pattern[0];\n        var px = 0;\n        var py = 0;\n        var pathx0 = 0;\n        var pathy0 = 0;\n\n        var moveTo = function (x, y) {\n            ctx.moveTo( x, y );\n            px = x;\n            py = y;\n            pathx0 = x;\n            pathy0 = y;\n        };\n\n        var lineTo = function (x, y) {\n            var scale = ctx.lineWidth;\n            var dx = x - px;\n            var dy = y - py;\n            var dist = Math.sqrt(dx*dx+dy*dy);\n            if ((dist > 0) && (scale > 0)) {\n                dx /= dist;\n                dy /= dist;\n                while (true) {\n                    var dp = scale * patternDistance;\n                    if (dp < dist) {\n                        px += dp * dx;\n                        py += dp * dy;\n                        if ((patternIndex & 1) == 0) {\n                            ctx.lineTo( px, py );\n                        }\n                        else {\n                            ctx.moveTo( px, py );\n                        }\n                        dist -= dp;\n                        patternIndex++;\n                        if (patternIndex >= pattern.length) {\n                            patternIndex = 0;\n                        }\n                        patternDistance = pattern[patternIndex];\n                    }\n                    else {\n                        px = x;\n                        py = y;\n                        if ((patternIndex & 1) == 0) {\n                            ctx.lineTo( px, py );\n                        }\n                        else {\n                            ctx.moveTo( px, py );\n                        }\n                        patternDistance -= dist / scale;\n                        break;\n                    }\n                }\n            }\n        };\n\n        var beginPath = function () {\n            ctx.beginPath();\n        };\n\n        var closePath = function () {\n            lineTo( pathx0, pathy0 );\n        };\n\n        return {\n            moveTo: moveTo,\n            lineTo: lineTo,\n            beginPath: beginPath,\n            closePath: closePath\n        };\n    };\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // Class: $.jqplot.LineRenderer\n    // The default line renderer for jqPlot, this class has no options beyond the <Series> class.\n    // Draws series as a line.\n    $.jqplot.LineRenderer = function(){\n        this.shapeRenderer = new $.jqplot.ShapeRenderer();\n        this.shadowRenderer = new $.jqplot.ShadowRenderer();\n    };\n    \n    // called with scope of series.\n    $.jqplot.LineRenderer.prototype.init = function(options, plot) {\n        // Group: Properties\n        //\n        options = options || {};\n        this._type='line';\n        this.renderer.animation = {\n            show: false,\n            direction: 'left',\n            speed: 2500,\n            _supported: true\n        };\n        // prop: smooth\n        // True to draw a smoothed (interpolated) line through the data points\n        // with automatically computed number of smoothing points.\n        // Set to an integer number > 2 to specify number of smoothing points\n        // to use between each data point.\n        this.renderer.smooth = false;  // true or a number > 2 for smoothing.\n        this.renderer.tension = null; // null to auto compute or a number typically > 6.  Fewer points requires higher tension.\n        // prop: constrainSmoothing\n        // True to use a more accurate smoothing algorithm that will\n        // not overshoot any data points.  False to allow overshoot but\n        // produce a smoother looking line.\n        this.renderer.constrainSmoothing = true;\n        // this is smoothed data in grid coordinates, like gridData\n        this.renderer._smoothedData = [];\n        // this is smoothed data in plot units (plot coordinates), like plotData.\n        this.renderer._smoothedPlotData = [];\n        this.renderer._hiBandGridData = [];\n        this.renderer._lowBandGridData = [];\n        this.renderer._hiBandSmoothedData = [];\n        this.renderer._lowBandSmoothedData = [];\n\n        // prop: bandData\n        // Data used to draw error bands or confidence intervals above/below a line.\n        //\n        // bandData can be input in 3 forms.  jqPlot will figure out which is the\n        // low band line and which is the high band line for all forms:\n        // \n        // A 2 dimensional array like [[yl1, yl2, ...], [yu1, yu2, ...]] where\n        // [yl1, yl2, ...] are y values of the lower line and\n        // [yu1, yu2, ...] are y values of the upper line.\n        // In this case there must be the same number of y data points as data points\n        // in the series and the bands will inherit the x values of the series.\n        //\n        // A 2 dimensional array like [[[xl1, yl1], [xl2, yl2], ...], [[xh1, yh1], [xh2, yh2], ...]]\n        // where [xl1, yl1] are x,y data points for the lower line and\n        // [xh1, yh1] are x,y data points for the high line.\n        // x values do not have to correspond to the x values of the series and can\n        // be of any arbitrary length.\n        //\n        // Can be of form [[yl1, yu1], [yl2, yu2], [yl3, yu3], ...] where\n        // there must be 3 or more arrays and there must be the same number of arrays\n        // as there are data points in the series.  In this case, \n        // [yl1, yu1] specifies the lower and upper y values for the 1st\n        // data point and so on.  The bands will inherit the x\n        // values from the series.\n        this.renderer.bandData = [];\n\n        // Group: bands\n        // Banding around line, e.g error bands or confidence intervals.\n        this.renderer.bands = {\n            // prop: show\n            // true to show the bands.  If bandData or interval is\n            // supplied, show will be set to true by default.\n            show: false,\n            hiData: [],\n            lowData: [],\n            // prop: color\n            // color of lines at top and bottom of bands [default: series color].\n            color: this.color,\n            // prop: showLines\n            // True to show lines at top and bottom of bands [default: false].\n            showLines: false,\n            // prop: fill\n            // True to fill area between bands [default: true].\n            fill: true,\n            // prop: fillColor\n            // css color spec for filled area.  [default: series color].\n            fillColor: null,\n            _min: null,\n            _max: null,\n            // prop: interval\n            // User specified interval above and below line for bands [default: '3%''].\n            // Can be a value like 3 or a string like '3%' \n            // or an upper/lower array like [1, -2] or ['2%', '-1.5%']\n            interval: '3%'\n        };\n\n\n        var lopts = {highlightMouseOver: options.highlightMouseOver, highlightMouseDown: options.highlightMouseDown, highlightColor: options.highlightColor};\n        \n        delete (options.highlightMouseOver);\n        delete (options.highlightMouseDown);\n        delete (options.highlightColor);\n        \n        $.extend(true, this.renderer, options);\n\n        this.renderer.options = options;\n\n        // if we are given some band data, and bands aren't explicity set to false in options, turn them on.\n        if (this.renderer.bandData.length > 1 && (!options.bands || options.bands.show == null)) {\n            this.renderer.bands.show = true;\n        }\n\n        // if we are given an interval, and bands aren't explicity set to false in options, turn them on.\n        else if (options.bands && options.bands.show == null && options.bands.interval != null) {\n            this.renderer.bands.show = true;\n        }\n\n        // if plot is filled, turn off bands.\n        if (this.fill) {\n            this.renderer.bands.show = false;\n        }\n\n        if (this.renderer.bands.show) {\n            this.renderer.initBands.call(this, this.renderer.options, plot);\n        }\n\n\n        // smoothing is not compatible with stacked lines, disable\n        if (this._stack) {\n            this.renderer.smooth = false;\n        }\n\n        // set the shape renderer options\n        var opts = {lineJoin:this.lineJoin, lineCap:this.lineCap, fill:this.fill, isarc:false, strokeStyle:this.color, fillStyle:this.fillColor, lineWidth:this.lineWidth, linePattern:this.linePattern, closePath:this.fill};\n        this.renderer.shapeRenderer.init(opts);\n\n        var shadow_offset = options.shadowOffset;\n        // set the shadow renderer options\n        if (shadow_offset == null) {\n            // scale the shadowOffset to the width of the line.\n            if (this.lineWidth > 2.5) {\n                shadow_offset = 1.25 * (1 + (Math.atan((this.lineWidth/2.5))/0.785398163 - 1)*0.6);\n                // var shadow_offset = this.shadowOffset;\n            }\n            // for skinny lines, don't make such a big shadow.\n            else {\n                shadow_offset = 1.25 * Math.atan((this.lineWidth/2.5))/0.785398163;\n            }\n        }\n        \n        var sopts = {lineJoin:this.lineJoin, lineCap:this.lineCap, fill:this.fill, isarc:false, angle:this.shadowAngle, offset:shadow_offset, alpha:this.shadowAlpha, depth:this.shadowDepth, lineWidth:this.lineWidth, linePattern:this.linePattern, closePath:this.fill};\n        this.renderer.shadowRenderer.init(sopts);\n        this._areaPoints = [];\n        this._boundingBox = [[],[]];\n        \n        if (!this.isTrendline && this.fill || this.renderer.bands.show) {\n            // Group: Properties\n            //        \n            // prop: highlightMouseOver\n            // True to highlight area on a filled plot when moused over.\n            // This must be false to enable highlightMouseDown to highlight when clicking on an area on a filled plot.\n            this.highlightMouseOver = true;\n            // prop: highlightMouseDown\n            // True to highlight when a mouse button is pressed over an area on a filled plot.\n            // This will be disabled if highlightMouseOver is true.\n            this.highlightMouseDown = false;\n            // prop: highlightColor\n            // color to use when highlighting an area on a filled plot.\n            this.highlightColor = null;\n            // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver\n            if (lopts.highlightMouseDown && lopts.highlightMouseOver == null) {\n                lopts.highlightMouseOver = false;\n            }\n        \n            $.extend(true, this, {highlightMouseOver: lopts.highlightMouseOver, highlightMouseDown: lopts.highlightMouseDown, highlightColor: lopts.highlightColor});\n            \n            if (!this.highlightColor) {\n                var fc = (this.renderer.bands.show) ? this.renderer.bands.fillColor : this.fillColor;\n                this.highlightColor = $.jqplot.computeHighlightColors(fc);\n            }\n            // turn off (disable) the highlighter plugin\n            if (this.highlighter) {\n                this.highlighter.show = false;\n            }\n        }\n        \n        if (!this.isTrendline && plot) {\n            plot.plugins.lineRenderer = {};\n            plot.postInitHooks.addOnce(postInit);\n            plot.postDrawHooks.addOnce(postPlotDraw);\n            plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);\n            plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);\n            plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);\n            plot.eventListenerHooks.addOnce('jqplotClick', handleClick);\n            plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick);\n        }\n\n    };\n\n    $.jqplot.LineRenderer.prototype.initBands = function(options, plot) {\n        // use bandData if no data specified in bands option\n        //var bd = this.renderer.bandData;\n        var bd = options.bandData || [];\n        var bands = this.renderer.bands;\n        bands.hiData = [];\n        bands.lowData = [];\n        var data = this.data;\n        bands._max = null;\n        bands._min = null;\n        // If 2 arrays, and each array greater than 2 elements, assume it is hi and low data bands of y values.\n        if (bd.length == 2) {\n            // Do we have an array of x,y values?\n            // like [[[1,1], [2,4], [3,3]], [[1,3], [2,6], [3,5]]]\n            if ($.isArray(bd[0][0])) {\n                // since an arbitrary array of points, spin through all of them to determine max and min lines.\n\n                var p;\n                var bdminidx = 0, bdmaxidx = 0;\n                for (var i = 0, l = bd[0].length; i<l; i++) {\n                    p = bd[0][i];\n                    if ((p[1] != null && p[1] > bands._max) || bands._max == null) {\n                        bands._max = p[1];\n                    }\n                    if ((p[1] != null && p[1] < bands._min) || bands._min == null) {\n                        bands._min = p[1];\n                    }\n                }\n                for (var i = 0, l = bd[1].length; i<l; i++) {\n                    p = bd[1][i];\n                    if ((p[1] != null && p[1] > bands._max) || bands._max == null) {\n                        bands._max = p[1];\n                        bdmaxidx = 1;\n                    }\n                    if ((p[1] != null && p[1] < bands._min) || bands._min == null) {\n                        bands._min = p[1];\n                        bdminidx = 1;\n                    }\n                }\n\n                if (bdmaxidx === bdminidx) {\n                    bands.show = false;\n                }\n\n                bands.hiData = bd[bdmaxidx];\n                bands.lowData = bd[bdminidx];\n            }\n            // else data is arrays of y values\n            // like [[1,4,3], [3,6,5]]\n            // must have same number of band data points as points in series\n            else if (bd[0].length === data.length && bd[1].length === data.length) {\n                var hi = (bd[0][0] > bd[1][0]) ? 0 : 1;\n                var low = (hi) ? 0 : 1;\n                for (var i=0, l=data.length; i < l; i++) {\n                    bands.hiData.push([data[i][0], bd[hi][i]]);\n                    bands.lowData.push([data[i][0], bd[low][i]]);\n                }\n            }\n\n            // we don't have proper data array, don't show bands.\n            else {\n                bands.show = false;\n            }\n        }\n\n        // if more than 2 arrays, have arrays of [ylow, yhi] values.\n        // note, can't distinguish case of [[ylow, yhi], [ylow, yhi]] from [[ylow, ylow], [yhi, yhi]]\n        // this is assumed to be of the latter form.\n        else if (bd.length > 2 && !$.isArray(bd[0][0])) {\n            var hi = (bd[0][0] > bd[0][1]) ? 0 : 1;\n            var low = (hi) ? 0 : 1;\n            for (var i=0, l=bd.length; i<l; i++) {\n                bands.hiData.push([data[i][0], bd[i][hi]]);\n                bands.lowData.push([data[i][0], bd[i][low]]);\n            }\n        }\n\n        // don't have proper data, auto calculate\n        else {\n            var intrv = bands.interval;\n            var a = null;\n            var b = null;\n            var afunc = null;\n            var bfunc = null;\n\n            if ($.isArray(intrv)) {\n                a = intrv[0];\n                b = intrv[1];\n            }\n            else {\n                a = intrv;\n            }\n\n            if (isNaN(a)) {\n                // we have a string\n                if (a.charAt(a.length - 1) === '%') {\n                    afunc = 'multiply';\n                    a = parseFloat(a)/100 + 1;\n                }\n            }\n\n            else {\n                a = parseFloat(a);\n                afunc = 'add';\n            }\n\n            if (b !== null && isNaN(b)) {\n                // we have a string\n                if (b.charAt(b.length - 1) === '%') {\n                    bfunc = 'multiply';\n                    b = parseFloat(b)/100 + 1;\n                }\n            }\n\n            else if (b !== null) {\n                b = parseFloat(b);\n                bfunc = 'add';\n            }\n\n            if (a !== null) {\n                if (b === null) {\n                    b = -a;\n                    bfunc = afunc;\n                    if (bfunc === 'multiply') {\n                        b += 2;\n                    }\n                }\n\n                // make sure a always applies to hi band.\n                if (a < b) {\n                    var temp = a;\n                    a = b;\n                    b = temp;\n                    temp = afunc;\n                    afunc = bfunc;\n                    bfunc = temp;\n                }\n\n                for (var i=0, l = data.length; i < l; i++) {\n                    switch (afunc) {\n                        case 'add':\n                            bands.hiData.push([data[i][0], data[i][1] + a]);\n                            break;\n                        case 'multiply':\n                            bands.hiData.push([data[i][0], data[i][1] * a]);\n                            break;\n                    }\n                    switch (bfunc) {\n                        case 'add':\n                            bands.lowData.push([data[i][0], data[i][1] + b]);\n                            break;\n                        case 'multiply':\n                            bands.lowData.push([data[i][0], data[i][1] * b]);\n                            break;\n                    }\n                }\n            }\n\n            else {\n                bands.show = false;\n            }\n        }\n\n        var hd = bands.hiData;\n        var ld = bands.lowData;\n        for (var i = 0, l = hd.length; i<l; i++) {\n            if ((hd[i][1] != null && hd[i][1] > bands._max) || bands._max == null) {\n                bands._max = hd[i][1];\n            }\n        }\n        for (var i = 0, l = ld.length; i<l; i++) {\n            if ((ld[i][1] != null && ld[i][1] < bands._min) || bands._min == null) {\n                bands._min = ld[i][1];\n            }\n        }\n\n        // one last check for proper data\n        // these don't apply any more since allowing arbitrary x,y values\n        // if (bands.hiData.length != bands.lowData.length) {\n        //     bands.show = false;\n        // }\n\n        // if (bands.hiData.length != this.data.length) {\n        //     bands.show = false;\n        // }\n\n        if (bands.fillColor === null) {\n            var c = $.jqplot.getColorComponents(bands.color);\n            // now adjust alpha to differentiate fill\n            c[3] = c[3] * 0.5;\n            bands.fillColor = 'rgba(' + c[0] +', '+ c[1] +', '+ c[2] +', '+ c[3] + ')';\n        }\n    };\n\n    function getSteps (d, f) {\n        return (3.4182054+f) * Math.pow(d, -0.3534992);\n    }\n\n    function computeSteps (d1, d2) {\n        var s = Math.sqrt(Math.pow((d2[0]- d1[0]), 2) + Math.pow ((d2[1] - d1[1]), 2));\n        return 5.7648 * Math.log(s) + 7.4456;\n    }\n\n    function tanh (x) {\n        var a = (Math.exp(2*x) - 1) / (Math.exp(2*x) + 1);\n        return a;\n    }\n\n    //////////\n    // computeConstrainedSmoothedData\n    // An implementation of the constrained cubic spline interpolation\n    // method as presented in:\n    //\n    // Kruger, CJC, Constrained Cubic Spine Interpolation for Chemical Engineering Applications\n    // http://www.korf.co.uk/spline.pdf\n    //\n    // The implementation below borrows heavily from the sample Visual Basic\n    // implementation by CJC Kruger found in http://www.korf.co.uk/spline.xls\n    //\n    /////////\n\n    // called with scope of series\n    function computeConstrainedSmoothedData (gd) {\n        var smooth = this.renderer.smooth;\n        var dim = this.canvas.getWidth();\n        var xp = this._xaxis.series_p2u;\n        var yp = this._yaxis.series_p2u; \n        var steps =null;\n        var _steps = null;\n        var dist = gd.length/dim;\n        var _smoothedData = [];\n        var _smoothedPlotData = [];\n\n        if (!isNaN(parseFloat(smooth))) {\n            steps = parseFloat(smooth);\n        }\n        else {\n            steps = getSteps(dist, 0.5);\n        }\n\n        var yy = [];\n        var xx = [];\n\n        for (var i=0, l = gd.length; i<l; i++) {\n            yy.push(gd[i][1]);\n            xx.push(gd[i][0]);\n        }\n\n        function dxx(x1, x0) {\n            if (x1 - x0 == 0) {\n                return Math.pow(10,10);\n            }\n            else {\n                return x1 - x0;\n            }\n        }\n\n        var A, B, C, D;\n        // loop through each line segment.  Have # points - 1 line segments.  Nmber segments starting at 1.\n        var nmax = gd.length - 1;\n        for (var num = 1, gdl = gd.length; num<gdl; num++) {\n            var gxx = [];\n            var ggxx = [];\n            // point at each end of segment.\n            for (var j = 0; j < 2; j++) {\n                var i = num - 1 + j; // point number, 0 to # points.\n\n                if (i == 0 || i == nmax) {\n                    gxx[j] = Math.pow(10, 10);\n                }\n                else if (yy[i+1] - yy[i] == 0 || yy[i] - yy[i-1] == 0) {\n                    gxx[j] = 0;\n                }\n                else if (((xx[i+1] - xx[i]) / (yy[i+1] - yy[i]) + (xx[i] - xx[i-1]) / (yy[i] - yy[i-1])) == 0 ) {\n                    gxx[j] = 0;\n                }\n                else if ( (yy[i+1] - yy[i]) * (yy[i] - yy[i-1]) < 0 ) {\n                    gxx[j] = 0;\n                }\n\n                else {\n                    gxx[j] = 2 / (dxx(xx[i + 1], xx[i]) / (yy[i + 1] - yy[i]) + dxx(xx[i], xx[i - 1]) / (yy[i] - yy[i - 1]));\n                }\n            }\n\n            // Reset first derivative (slope) at first and last point\n            if (num == 1) {\n                // First point has 0 2nd derivative\n                gxx[0] = 3 / 2 * (yy[1] - yy[0]) / dxx(xx[1], xx[0]) - gxx[1] / 2;\n            }\n            else if (num == nmax) {\n                // Last point has 0 2nd derivative\n                gxx[1] = 3 / 2 * (yy[nmax] - yy[nmax - 1]) / dxx(xx[nmax], xx[nmax - 1]) - gxx[0] / 2;\n            }   \n\n            // Calc second derivative at points\n            ggxx[0] = -2 * (gxx[1] + 2 * gxx[0]) / dxx(xx[num], xx[num - 1]) + 6 * (yy[num] - yy[num - 1]) / Math.pow(dxx(xx[num], xx[num - 1]), 2);\n            ggxx[1] = 2 * (2 * gxx[1] + gxx[0]) / dxx(xx[num], xx[num - 1]) - 6 * (yy[num] - yy[num - 1]) / Math.pow(dxx(xx[num], xx[num - 1]), 2);\n\n            // Calc constants for cubic interpolation\n            D = 1 / 6 * (ggxx[1] - ggxx[0]) / dxx(xx[num], xx[num - 1]);\n            C = 1 / 2 * (xx[num] * ggxx[0] - xx[num - 1] * ggxx[1]) / dxx(xx[num], xx[num - 1]);\n            B = (yy[num] - yy[num - 1] - C * (Math.pow(xx[num], 2) - Math.pow(xx[num - 1], 2)) - D * (Math.pow(xx[num], 3) - Math.pow(xx[num - 1], 3))) / dxx(xx[num], xx[num - 1]);\n            A = yy[num - 1] - B * xx[num - 1] - C * Math.pow(xx[num - 1], 2) - D * Math.pow(xx[num - 1], 3);\n\n            var increment = (xx[num] - xx[num - 1]) / steps;\n            var temp, tempx;\n\n            for (var j = 0, l = steps; j < l; j++) {\n                temp = [];\n                tempx = xx[num - 1] + j * increment;\n                temp.push(tempx);\n                temp.push(A + B * tempx + C * Math.pow(tempx, 2) + D * Math.pow(tempx, 3));\n                _smoothedData.push(temp);\n                _smoothedPlotData.push([xp(temp[0]), yp(temp[1])]);\n            }\n        }\n\n        _smoothedData.push(gd[i]);\n        _smoothedPlotData.push([xp(gd[i][0]), yp(gd[i][1])]);\n\n        return [_smoothedData, _smoothedPlotData];\n    }\n\n    ///////\n    // computeHermiteSmoothedData\n    // A hermite spline smoothing of the plot data.\n    // This implementation is derived from the one posted\n    // by krypin on the jqplot-users mailing list:\n    //\n    // http://groups.google.com/group/jqplot-users/browse_thread/thread/748be6a445723cea?pli=1\n    //\n    // with a blog post:\n    //\n    // http://blog.statscollector.com/a-plugin-renderer-for-jqplot-to-draw-a-hermite-spline/\n    //\n    // and download of the original plugin:\n    //\n    // http://blog.statscollector.com/wp-content/uploads/2010/02/jqplot.hermiteSplineRenderer.js\n    //////////\n\n    // called with scope of series\n    function computeHermiteSmoothedData (gd) {\n        var smooth = this.renderer.smooth;\n        var tension = this.renderer.tension;\n        var dim = this.canvas.getWidth();\n        var xp = this._xaxis.series_p2u;\n        var yp = this._yaxis.series_p2u; \n        var steps =null;\n        var _steps = null;\n        var a = null;\n        var a1 = null;\n        var a2 = null;\n        var slope = null;\n        var slope2 = null;\n        var temp = null;\n        var t, s, h1, h2, h3, h4;\n        var TiX, TiY, Ti1X, Ti1Y;\n        var pX, pY, p;\n        var sd = [];\n        var spd = [];\n        var dist = gd.length/dim;\n        var min, max, stretch, scale, shift;\n        var _smoothedData = [];\n        var _smoothedPlotData = [];\n        if (!isNaN(parseFloat(smooth))) {\n            steps = parseFloat(smooth);\n        }\n        else {\n            steps = getSteps(dist, 0.5);\n        }\n        if (!isNaN(parseFloat(tension))) {\n            tension = parseFloat(tension);\n        }\n\n        for (var i=0, l = gd.length-1; i < l; i++) {\n\n            if (tension === null) {\n                slope = Math.abs((gd[i+1][1] - gd[i][1]) / (gd[i+1][0] - gd[i][0]));\n\n                min = 0.3;\n                max = 0.6;\n                stretch = (max - min)/2.0;\n                scale = 2.5;\n                shift = -1.4;\n\n                temp = slope/scale + shift;\n\n                a1 = stretch * tanh(temp) - stretch * tanh(shift) + min;\n\n                // if have both left and right line segments, will use  minimum tension. \n                if (i > 0) {\n                    slope2 = Math.abs((gd[i][1] - gd[i-1][1]) / (gd[i][0] - gd[i-1][0]));\n                }\n                temp = slope2/scale + shift;\n\n                a2 = stretch * tanh(temp) - stretch * tanh(shift) + min;\n\n                a = (a1 + a2)/2.0;\n\n            }\n            else {\n                a = tension;\n            }\n            for (t=0; t < steps; t++) {\n                s = t / steps;\n                h1 = (1 + 2*s)*Math.pow((1-s),2);\n                h2 = s*Math.pow((1-s),2);\n                h3 = Math.pow(s,2)*(3-2*s);\n                h4 = Math.pow(s,2)*(s-1);     \n                \n                if (gd[i-1]) {  \n                    TiX = a * (gd[i+1][0] - gd[i-1][0]); \n                    TiY = a * (gd[i+1][1] - gd[i-1][1]);\n                } else {\n                    TiX = a * (gd[i+1][0] - gd[i][0]); \n                    TiY = a * (gd[i+1][1] - gd[i][1]);                                  \n                }\n                if (gd[i+2]) {  \n                    Ti1X = a * (gd[i+2][0] - gd[i][0]); \n                    Ti1Y = a * (gd[i+2][1] - gd[i][1]);\n                } else {\n                    Ti1X = a * (gd[i+1][0] - gd[i][0]); \n                    Ti1Y = a * (gd[i+1][1] - gd[i][1]);                                 \n                }\n                \n                pX = h1*gd[i][0] + h3*gd[i+1][0] + h2*TiX + h4*Ti1X;\n                pY = h1*gd[i][1] + h3*gd[i+1][1] + h2*TiY + h4*Ti1Y;\n                p = [pX, pY];\n\n                _smoothedData.push(p);\n                _smoothedPlotData.push([xp(pX), yp(pY)]);\n            }\n        }\n        _smoothedData.push(gd[l]);\n        _smoothedPlotData.push([xp(gd[l][0]), yp(gd[l][1])]);\n\n        return [_smoothedData, _smoothedPlotData];\n    }\n    \n    // setGridData\n    // converts the user data values to grid coordinates and stores them\n    // in the gridData array.\n    // Called with scope of a series.\n    $.jqplot.LineRenderer.prototype.setGridData = function(plot) {\n        // recalculate the grid data\n        var xp = this._xaxis.series_u2p;\n        var yp = this._yaxis.series_u2p;\n        var data = this._plotData;\n        var pdata = this._prevPlotData;\n        this.gridData = [];\n        this._prevGridData = [];\n        this.renderer._smoothedData = [];\n        this.renderer._smoothedPlotData = [];\n        this.renderer._hiBandGridData = [];\n        this.renderer._lowBandGridData = [];\n        this.renderer._hiBandSmoothedData = [];\n        this.renderer._lowBandSmoothedData = [];\n        var bands = this.renderer.bands;\n        var hasNull = false;\n        for (var i=0, l=data.length; i < l; i++) {\n            // if not a line series or if no nulls in data, push the converted point onto the array.\n            if (data[i][0] != null && data[i][1] != null) {\n                this.gridData.push([xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1])]);\n            }\n            // else if there is a null, preserve it.\n            else if (data[i][0] == null) {\n                hasNull = true;\n                this.gridData.push([null, yp.call(this._yaxis, data[i][1])]);\n            }\n            else if (data[i][1] == null) {\n                hasNull = true;\n                this.gridData.push([xp.call(this._xaxis, data[i][0]), null]);\n            }\n            // if not a line series or if no nulls in data, push the converted point onto the array.\n            if (pdata[i] != null && pdata[i][0] != null && pdata[i][1] != null) {\n                this._prevGridData.push([xp.call(this._xaxis, pdata[i][0]), yp.call(this._yaxis, pdata[i][1])]);\n            }\n            // else if there is a null, preserve it.\n            else if (pdata[i] != null && pdata[i][0] == null) {\n                this._prevGridData.push([null, yp.call(this._yaxis, pdata[i][1])]);\n            }  \n            else if (pdata[i] != null && pdata[i][0] != null && pdata[i][1] == null) {\n                this._prevGridData.push([xp.call(this._xaxis, pdata[i][0]), null]);\n            }\n        }\n\n        // don't do smoothing or bands on broken lines.\n        if (hasNull) {\n            this.renderer.smooth = false;\n            if (this._type === 'line') {\n                bands.show = false;\n            }\n        }\n\n        if (this._type === 'line' && bands.show) {\n            for (var i=0, l=bands.hiData.length; i<l; i++) {\n                this.renderer._hiBandGridData.push([xp.call(this._xaxis, bands.hiData[i][0]), yp.call(this._yaxis, bands.hiData[i][1])]);\n            }\n            for (var i=0, l=bands.lowData.length; i<l; i++) {\n                this.renderer._lowBandGridData.push([xp.call(this._xaxis, bands.lowData[i][0]), yp.call(this._yaxis, bands.lowData[i][1])]);\n            }\n        }\n\n        // calculate smoothed data if enough points and no nulls\n        if (this._type === 'line' && this.renderer.smooth && this.gridData.length > 2) {\n            var ret;\n            if (this.renderer.constrainSmoothing) {\n                ret = computeConstrainedSmoothedData.call(this, this.gridData);\n                this.renderer._smoothedData = ret[0];\n                this.renderer._smoothedPlotData = ret[1];\n\n                if (bands.show) {\n                    ret = computeConstrainedSmoothedData.call(this, this.renderer._hiBandGridData);\n                    this.renderer._hiBandSmoothedData = ret[0];\n                    ret = computeConstrainedSmoothedData.call(this, this.renderer._lowBandGridData);\n                    this.renderer._lowBandSmoothedData = ret[0];\n                }\n\n                ret = null;\n            }\n            else {\n                ret = computeHermiteSmoothedData.call(this, this.gridData);\n                this.renderer._smoothedData = ret[0];\n                this.renderer._smoothedPlotData = ret[1];\n\n                if (bands.show) {\n                    ret = computeHermiteSmoothedData.call(this, this.renderer._hiBandGridData);\n                    this.renderer._hiBandSmoothedData = ret[0];\n                    ret = computeHermiteSmoothedData.call(this, this.renderer._lowBandGridData);\n                    this.renderer._lowBandSmoothedData = ret[0];\n                }\n\n                ret = null;\n            }\n        }\n    };\n    \n    // makeGridData\n    // converts any arbitrary data values to grid coordinates and\n    // returns them.  This method exists so that plugins can use a series'\n    // linerenderer to generate grid data points without overwriting the\n    // grid data associated with that series.\n    // Called with scope of a series.\n    $.jqplot.LineRenderer.prototype.makeGridData = function(data, plot) {\n        // recalculate the grid data\n        var xp = this._xaxis.series_u2p;\n        var yp = this._yaxis.series_u2p;\n        var gd = [];\n        var pgd = [];\n        this.renderer._smoothedData = [];\n        this.renderer._smoothedPlotData = [];\n        this.renderer._hiBandGridData = [];\n        this.renderer._lowBandGridData = [];\n        this.renderer._hiBandSmoothedData = [];\n        this.renderer._lowBandSmoothedData = [];\n        var bands = this.renderer.bands;\n        var hasNull = false;\n        for (var i=0; i<data.length; i++) {\n            // if not a line series or if no nulls in data, push the converted point onto the array.\n            if (data[i][0] != null && data[i][1] != null) {\n                if (this.step && i>0) {\n                    gd.push([xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i-1][1])]);\n                }\n                gd.push([xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1])]);\n            }\n            // else if there is a null, preserve it.\n            else if (data[i][0] == null) {\n                hasNull = true;\n                gd.push([null, yp.call(this._yaxis, data[i][1])]);\n            }\n            else if (data[i][1] == null) {\n                hasNull = true;\n                gd.push([xp.call(this._xaxis, data[i][0]), null]);\n            }\n        }\n\n        // don't do smoothing or bands on broken lines.\n        if (hasNull) {\n            this.renderer.smooth = false;\n            if (this._type === 'line') {\n                bands.show = false;\n            }\n        }\n\n        if (this._type === 'line' && bands.show) {\n            for (var i=0, l=bands.hiData.length; i<l; i++) {\n                this.renderer._hiBandGridData.push([xp.call(this._xaxis, bands.hiData[i][0]), yp.call(this._yaxis, bands.hiData[i][1])]);\n            }\n            for (var i=0, l=bands.lowData.length; i<l; i++) {\n                this.renderer._lowBandGridData.push([xp.call(this._xaxis, bands.lowData[i][0]), yp.call(this._yaxis, bands.lowData[i][1])]);\n            }\n        }\n\n        if (this._type === 'line' && this.renderer.smooth && gd.length > 2) {\n            var ret;\n            if (this.renderer.constrainSmoothing) {\n                ret = computeConstrainedSmoothedData.call(this, gd);\n                this.renderer._smoothedData = ret[0];\n                this.renderer._smoothedPlotData = ret[1];\n\n                if (bands.show) {\n                    ret = computeConstrainedSmoothedData.call(this, this.renderer._hiBandGridData);\n                    this.renderer._hiBandSmoothedData = ret[0];\n                    ret = computeConstrainedSmoothedData.call(this, this.renderer._lowBandGridData);\n                    this.renderer._lowBandSmoothedData = ret[0];\n                }\n\n                ret = null;\n            }\n            else {\n                ret = computeHermiteSmoothedData.call(this, gd);\n                this.renderer._smoothedData = ret[0];\n                this.renderer._smoothedPlotData = ret[1];\n\n                if (bands.show) {\n                    ret = computeHermiteSmoothedData.call(this, this.renderer._hiBandGridData);\n                    this.renderer._hiBandSmoothedData = ret[0];\n                    ret = computeHermiteSmoothedData.call(this, this.renderer._lowBandGridData);\n                    this.renderer._lowBandSmoothedData = ret[0];\n                }\n\n                ret = null;\n            }\n        }\n        return gd;\n    };\n    \n\n    // called within scope of series.\n    $.jqplot.LineRenderer.prototype.draw = function(ctx, gd, options, plot) {\n        var i;\n        // get a copy of the options, so we don't modify the original object.\n        var opts = $.extend(true, {}, options);\n        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;\n        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;\n        var fill = (opts.fill != undefined) ? opts.fill : this.fill;\n        var fillAndStroke = (opts.fillAndStroke != undefined) ? opts.fillAndStroke : this.fillAndStroke;\n        var xmin, ymin, xmax, ymax;\n        ctx.save();\n        if (gd.length) {\n            if (showLine) {\n                // if we fill, we'll have to add points to close the curve.\n                if (fill) {\n                    if (this.fillToZero) { \n                        // have to break line up into shapes at axis crossings\n                        var negativeColor = this.negativeColor;\n                        if (! this.useNegativeColors) {\n                            negativeColor = opts.fillStyle;\n                        }\n                        var isnegative = false;\n                        var posfs = opts.fillStyle;\n                    \n                        // if stoking line as well as filling, get a copy of line data.\n                        if (fillAndStroke) {\n                            var fasgd = gd.slice(0);\n                        }\n                        // if not stacked, fill down to axis\n                        if (this.index == 0 || !this._stack) {\n                        \n                            var tempgd = [];\n                            var pd = (this.renderer.smooth) ? this.renderer._smoothedPlotData : this._plotData;\n                            this._areaPoints = [];\n                            var pyzero = this._yaxis.series_u2p(this.fillToValue);\n                            var pxzero = this._xaxis.series_u2p(this.fillToValue);\n\n                            opts.closePath = true;\n                            \n                            if (this.fillAxis == 'y') {\n                                tempgd.push([gd[0][0], pyzero]);\n                                this._areaPoints.push([gd[0][0], pyzero]);\n                                \n                                for (var i=0; i<gd.length-1; i++) {\n                                    tempgd.push(gd[i]);\n                                    this._areaPoints.push(gd[i]);\n                                    // do we have an axis crossing?\n                                    if (pd[i][1] * pd[i+1][1] <= 0) {\n                                        if (pd[i][1] < 0) {\n                                            isnegative = true;\n                                            opts.fillStyle = negativeColor;\n                                        }\n                                        else {\n                                            isnegative = false;\n                                            opts.fillStyle = posfs;\n                                        }\n                                        \n                                        var xintercept = gd[i][0] + (gd[i+1][0] - gd[i][0]) * (pyzero-gd[i][1])/(gd[i+1][1] - gd[i][1]);\n                                        tempgd.push([xintercept, pyzero]);\n                                        this._areaPoints.push([xintercept, pyzero]);\n                                        // now draw this shape and shadow.\n                                        if (shadow) {\n                                            this.renderer.shadowRenderer.draw(ctx, tempgd, opts);\n                                        }\n                                        this.renderer.shapeRenderer.draw(ctx, tempgd, opts);\n                                        // now empty temp array and continue\n                                        tempgd = [[xintercept, pyzero]];\n                                        // this._areaPoints = [[xintercept, pyzero]];\n                                    }   \n                                }\n                                if (pd[gd.length-1][1] < 0) {\n                                    isnegative = true;\n                                    opts.fillStyle = negativeColor;\n                                }\n                                else {\n                                    isnegative = false;\n                                    opts.fillStyle = posfs;\n                                }\n                                tempgd.push(gd[gd.length-1]);\n                                this._areaPoints.push(gd[gd.length-1]);\n                                tempgd.push([gd[gd.length-1][0], pyzero]); \n                                this._areaPoints.push([gd[gd.length-1][0], pyzero]); \n                            }\n                            // now draw the last area.\n                            if (shadow) {\n                                this.renderer.shadowRenderer.draw(ctx, tempgd, opts);\n                            }\n                            this.renderer.shapeRenderer.draw(ctx, tempgd, opts);\n                            \n                            \n                            // var gridymin = this._yaxis.series_u2p(0);\n                            // // IE doesn't return new length on unshift\n                            // gd.unshift([gd[0][0], gridymin]);\n                            // len = gd.length;\n                            // gd.push([gd[len - 1][0], gridymin]);                   \n                        }\n                        // if stacked, fill to line below \n                        else {\n                            var prev = this._prevGridData;\n                            for (var i=prev.length; i>0; i--) {\n                                gd.push(prev[i-1]);\n                                // this._areaPoints.push(prev[i-1]);\n                            }\n                            if (shadow) {\n                                this.renderer.shadowRenderer.draw(ctx, gd, opts);\n                            }\n                            this._areaPoints = gd;\n                            this.renderer.shapeRenderer.draw(ctx, gd, opts);\n                        }\n                    }\n                    /////////////////////////\n                    // Not filled to zero\n                    ////////////////////////\n                    else {                    \n                        // if stoking line as well as filling, get a copy of line data.\n                        if (fillAndStroke) {\n                            var fasgd = gd.slice(0);\n                        }\n                        // if not stacked, fill down to axis\n                        if (this.index == 0 || !this._stack) {\n                            // var gridymin = this._yaxis.series_u2p(this._yaxis.min) - this.gridBorderWidth / 2;\n                            var gridymin = ctx.canvas.height;\n                            // IE doesn't return new length on unshift\n                            gd.unshift([gd[0][0], gridymin]);\n                            var len = gd.length;\n                            gd.push([gd[len - 1][0], gridymin]);                   \n                        }\n                        // if stacked, fill to line below \n                        else {\n                            var prev = this._prevGridData;\n                            for (var i=prev.length; i>0; i--) {\n                                gd.push(prev[i-1]);\n                            }\n                        }\n                        this._areaPoints = gd;\n                        \n                        if (shadow) {\n                            this.renderer.shadowRenderer.draw(ctx, gd, opts);\n                        }\n            \n                        this.renderer.shapeRenderer.draw(ctx, gd, opts);                        \n                    }\n                    if (fillAndStroke) {\n                        var fasopts = $.extend(true, {}, opts, {fill:false, closePath:false});\n                        this.renderer.shapeRenderer.draw(ctx, fasgd, fasopts);\n                        //////////\n                        // TODO: figure out some way to do shadows nicely\n                        // if (shadow) {\n                        //     this.renderer.shadowRenderer.draw(ctx, fasgd, fasopts);\n                        // }\n                        // now draw the markers\n                        if (this.markerRenderer.show) {\n                            if (this.renderer.smooth) {\n                                fasgd = this.gridData;\n                            }\n                            for (i=0; i<fasgd.length; i++) {\n                                this.markerRenderer.draw(fasgd[i][0], fasgd[i][1], ctx, opts.markerOptions);\n                            }\n                        }\n                    }\n                }\n                else {\n\n                    if (this.renderer.bands.show) {\n                        var bdat;\n                        var bopts = $.extend(true, {}, opts);\n                        if (this.renderer.bands.showLines) {\n                            bdat = (this.renderer.smooth) ? this.renderer._hiBandSmoothedData : this.renderer._hiBandGridData;\n                            this.renderer.shapeRenderer.draw(ctx, bdat, opts);\n                            bdat = (this.renderer.smooth) ? this.renderer._lowBandSmoothedData : this.renderer._lowBandGridData;\n                            this.renderer.shapeRenderer.draw(ctx, bdat, bopts);\n                        }\n\n                        if (this.renderer.bands.fill) {\n                            if (this.renderer.smooth) {\n                                bdat = this.renderer._hiBandSmoothedData.concat(this.renderer._lowBandSmoothedData.reverse());\n                            }\n                            else {\n                                bdat = this.renderer._hiBandGridData.concat(this.renderer._lowBandGridData.reverse());\n                            }\n                            this._areaPoints = bdat;\n                            bopts.closePath = true;\n                            bopts.fill = true;\n                            bopts.fillStyle = this.renderer.bands.fillColor;\n                            this.renderer.shapeRenderer.draw(ctx, bdat, bopts);\n                        }\n                    }\n\n                    if (shadow) {\n                        this.renderer.shadowRenderer.draw(ctx, gd, opts);\n                    }\n    \n                    this.renderer.shapeRenderer.draw(ctx, gd, opts);\n                }\n            }\n            // calculate the bounding box\n            var xmin = xmax = ymin = ymax = null;\n            for (i=0; i<this._areaPoints.length; i++) {\n                var p = this._areaPoints[i];\n                if (xmin > p[0] || xmin == null) {\n                    xmin = p[0];\n                }\n                if (ymax < p[1] || ymax == null) {\n                    ymax = p[1];\n                }\n                if (xmax < p[0] || xmax == null) {\n                    xmax = p[0];\n                }\n                if (ymin > p[1] || ymin == null) {\n                    ymin = p[1];\n                }\n            }\n\n            if (this.type === 'line' && this.renderer.bands.show) {\n                ymax = this._yaxis.series_u2p(this.renderer.bands._min);\n                ymin = this._yaxis.series_u2p(this.renderer.bands._max);\n            }\n\n            this._boundingBox = [[xmin, ymax], [xmax, ymin]];\n        \n            // now draw the markers\n            if (this.markerRenderer.show && !fill) {\n                if (this.renderer.smooth) {\n                    gd = this.gridData;\n                }\n                for (i=0; i<gd.length; i++) {\n                    if (gd[i][0] != null && gd[i][1] != null) {\n                        this.markerRenderer.draw(gd[i][0], gd[i][1], ctx, opts.markerOptions);\n                    }\n                }\n            }\n        }\n        \n        ctx.restore();\n    };  \n    \n    $.jqplot.LineRenderer.prototype.drawShadow = function(ctx, gd, options) {\n        // This is a no-op, shadows drawn with lines.\n    };\n    \n    // called with scope of plot.\n    // make sure to not leave anything highlighted.\n    function postInit(target, data, options) {\n        for (var i=0; i<this.series.length; i++) {\n            if (this.series[i].renderer.constructor == $.jqplot.LineRenderer) {\n                // don't allow mouseover and mousedown at same time.\n                if (this.series[i].highlightMouseOver) {\n                    this.series[i].highlightMouseDown = false;\n                }\n            }\n        }\n    }  \n    \n    // called within context of plot\n    // create a canvas which we can draw on.\n    // insert it before the eventCanvas, so eventCanvas will still capture events.\n    function postPlotDraw() {\n        // Memory Leaks patch    \n        if (this.plugins.lineRenderer && this.plugins.lineRenderer.highlightCanvas) {\n          this.plugins.lineRenderer.highlightCanvas.resetCanvas();\n          this.plugins.lineRenderer.highlightCanvas = null;\n        }\n        \n        this.plugins.lineRenderer.highlightedSeriesIndex = null;\n        this.plugins.lineRenderer.highlightCanvas = new $.jqplot.GenericCanvas();\n        \n        this.eventCanvas._elem.before(this.plugins.lineRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-lineRenderer-highlight-canvas', this._plotDimensions, this));\n        this.plugins.lineRenderer.highlightCanvas.setContext();\n        this.eventCanvas._elem.bind('mouseleave', {plot:this}, function (ev) { unhighlight(ev.data.plot); });\n    } \n    \n    function highlight (plot, sidx, pidx, points) {\n        var s = plot.series[sidx];\n        var canvas = plot.plugins.lineRenderer.highlightCanvas;\n        canvas._ctx.clearRect(0,0,canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n        s._highlightedPoint = pidx;\n        plot.plugins.lineRenderer.highlightedSeriesIndex = sidx;\n        var opts = {fillStyle: s.highlightColor};\n        if (s.type === 'line' && s.renderer.bands.show) {\n            opts.fill = true;\n            opts.closePath = true;\n        }\n        s.renderer.shapeRenderer.draw(canvas._ctx, points, opts);\n        canvas = null;\n    }\n    \n    function unhighlight (plot) {\n        var canvas = plot.plugins.lineRenderer.highlightCanvas;\n        canvas._ctx.clearRect(0,0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n        for (var i=0; i<plot.series.length; i++) {\n            plot.series[i]._highlightedPoint = null;\n        }\n        plot.plugins.lineRenderer.highlightedSeriesIndex = null;\n        plot.target.trigger('jqplotDataUnhighlight');\n        canvas = null;\n    }\n    \n    \n    function handleMove(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            var evt1 = jQuery.Event('jqplotDataMouseOver');\n            evt1.pageX = ev.pageX;\n            evt1.pageY = ev.pageY;\n            plot.target.trigger(evt1, ins);\n            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.lineRenderer.highlightedSeriesIndex)) {\n                var evt = jQuery.Event('jqplotDataHighlight');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);\n            }\n        }\n        else if (neighbor == null) {\n            unhighlight (plot);\n        }\n    }\n    \n    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.lineRenderer.highlightedSeriesIndex)) {\n                var evt = jQuery.Event('jqplotDataHighlight');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);\n            }\n        }\n        else if (neighbor == null) {\n            unhighlight (plot);\n        }\n    }\n    \n    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {\n        var idx = plot.plugins.lineRenderer.highlightedSeriesIndex;\n        if (idx != null && plot.series[idx].highlightMouseDown) {\n            unhighlight(plot);\n        }\n    }\n    \n    function handleClick(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            var evt = jQuery.Event('jqplotDataClick');\n            evt.which = ev.which;\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            plot.target.trigger(evt, ins);\n        }\n    }\n    \n    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            var idx = plot.plugins.lineRenderer.highlightedSeriesIndex;\n            if (idx != null && plot.series[idx].highlightMouseDown) {\n                unhighlight(plot);\n            }\n            var evt = jQuery.Event('jqplotDataRightClick');\n            evt.which = ev.which;\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            plot.target.trigger(evt, ins);\n        }\n    }\n    \n})(jQuery);    ","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class: $.jqplot.LinearAxisRenderer\n    // The default jqPlot axis renderer, creating a numeric axis.\n    $.jqplot.LinearAxisRenderer = function() {\n    };\n    \n    // called with scope of axis object.\n    $.jqplot.LinearAxisRenderer.prototype.init = function(options){\n        // prop: breakPoints\n        // EXPERIMENTAL!! Use at your own risk!\n        // Works only with linear axes and the default tick renderer.\n        // Array of [start, stop] points to create a broken axis.\n        // Broken axes have a \"jump\" in them, which is an immediate \n        // transition from a smaller value to a larger value.\n        // Currently, axis ticks MUST be manually assigned if using breakPoints\n        // by using the axis ticks array option.\n        this.breakPoints = null;\n        // prop: breakTickLabel\n        // Label to use at the axis break if breakPoints are specified.\n        this.breakTickLabel = \"&asymp;\";\n        // prop: drawBaseline\n        // True to draw the axis baseline.\n        this.drawBaseline = true;\n        // prop: baselineWidth\n        // width of the baseline in pixels.\n        this.baselineWidth = null;\n        // prop: baselineColor\n        // CSS color spec for the baseline.\n        this.baselineColor = null;\n        // prop: forceTickAt0\n        // This will ensure that there is always a tick mark at 0.\n        // If data range is strictly positive or negative,\n        // this will force 0 to be inside the axis bounds unless\n        // the appropriate axis pad (pad, padMin or padMax) is set\n        // to 0, then this will force an axis min or max value at 0.\n        // This has know effect when any of the following options\n        // are set:  autoscale, min, max, numberTicks or tickInterval.\n        this.forceTickAt0 = false;\n        // prop: forceTickAt100\n        // This will ensure that there is always a tick mark at 100.\n        // If data range is strictly above or below 100,\n        // this will force 100 to be inside the axis bounds unless\n        // the appropriate axis pad (pad, padMin or padMax) is set\n        // to 0, then this will force an axis min or max value at 100.\n        // This has know effect when any of the following options\n        // are set:  autoscale, min, max, numberTicks or tickInterval.\n        this.forceTickAt100 = false;\n        // prop: tickInset\n        // Controls the amount to inset the first and last ticks from \n        // the edges of the grid, in multiples of the tick interval.\n        // 0 is no inset, 0.5 is one half a tick interval, 1 is a full\n        // tick interval, etc.\n        this.tickInset = 0;\n        // prop: minorTicks\n        // Number of ticks to add between \"major\" ticks.\n        // Major ticks are ticks supplied by user or auto computed.\n        // Minor ticks cannot be created by user.\n        this.minorTicks = 0;\n        // prop: alignTicks\n        // true to align tick marks across opposed axes\n        // such as from the y2axis to yaxis.\n        this.alignTicks = false;\n        this._autoFormatString = '';\n        this._overrideFormatString = false;\n        this._scalefact = 1.0;\n        $.extend(true, this, options);\n        if (this.breakPoints) {\n            if (!$.isArray(this.breakPoints)) {\n                this.breakPoints = null;\n            }\n            else if (this.breakPoints.length < 2 || this.breakPoints[1] <= this.breakPoints[0]) {\n                this.breakPoints = null;\n            }\n        }\n        if (this.numberTicks != null && this.numberTicks < 2) {\n            this.numberTicks = 2;\n        }\n        this.resetDataBounds();\n    };\n    \n    // called with scope of axis\n    $.jqplot.LinearAxisRenderer.prototype.draw = function(ctx, plot) {\n        if (this.show) {\n            // populate the axis label and value properties.\n            // createTicks is a method on the renderer, but\n            // call it within the scope of the axis.\n            this.renderer.createTicks.call(this, plot);\n            // fill a div with axes labels in the right direction.\n            // Need to pregenerate each axis to get its bounds and\n            // position it and the labels correctly on the plot.\n            var dim=0;\n            var temp;\n            // Added for theming.\n            if (this._elem) {\n                // Memory Leaks patch\n                //this._elem.empty();\n                this._elem.emptyForce();\n                this._elem = null;\n            }\n            \n            this._elem = $(document.createElement('div'));\n            this._elem.addClass('jqplot-axis jqplot-'+this.name);\n            this._elem.css('position', 'absolute');\n\n            \n            if (this.name == 'xaxis' || this.name == 'x2axis') {\n                this._elem.width(this._plotDimensions.width);\n            }\n            else {\n                this._elem.height(this._plotDimensions.height);\n            }\n            \n            // create a _label object.\n            this.labelOptions.axis = this.name;\n            this._label = new this.labelRenderer(this.labelOptions);\n            if (this._label.show) {\n                var elem = this._label.draw(ctx, plot);\n                elem.appendTo(this._elem);\n                elem = null;\n            }\n    \n            var t = this._ticks;\n            var tick;\n            for (var i=0; i<t.length; i++) {\n                tick = t[i];\n                if (tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {\n                    this._elem.append(tick.draw(ctx, plot));\n                }\n            }\n            tick = null;\n            t = null;\n        }\n        return this._elem;\n    };\n    \n    // called with scope of an axis\n    $.jqplot.LinearAxisRenderer.prototype.reset = function() {\n        this.min = this._options.min;\n        this.max = this._options.max;\n        this.tickInterval = this._options.tickInterval;\n        this.numberTicks = this._options.numberTicks;\n        this._autoFormatString = '';\n        if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {\n            this.tickOptions.formatString = '';\n        }\n\n        // this._ticks = this.__ticks;\n    };\n    \n    // called with scope of axis\n    $.jqplot.LinearAxisRenderer.prototype.set = function() { \n        var dim = 0;\n        var temp;\n        var w = 0;\n        var h = 0;\n        var lshow = (this._label == null) ? false : this._label.show;\n        if (this.show) {\n            var t = this._ticks;\n            var tick;\n            for (var i=0; i<t.length; i++) {\n                tick = t[i];\n                if (!tick._breakTick && tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {\n                    if (this.name == 'xaxis' || this.name == 'x2axis') {\n                        temp = tick._elem.outerHeight(true);\n                    }\n                    else {\n                        temp = tick._elem.outerWidth(true);\n                    }\n                    if (temp > dim) {\n                        dim = temp;\n                    }\n                }\n            }\n            tick = null;\n            t = null;\n            \n            if (lshow) {\n                w = this._label._elem.outerWidth(true);\n                h = this._label._elem.outerHeight(true); \n            }\n            if (this.name == 'xaxis') {\n                dim = dim + h;\n                this._elem.css({'height':dim+'px', left:'0px', bottom:'0px'});\n            }\n            else if (this.name == 'x2axis') {\n                dim = dim + h;\n                this._elem.css({'height':dim+'px', left:'0px', top:'0px'});\n            }\n            else if (this.name == 'yaxis') {\n                dim = dim + w;\n                this._elem.css({'width':dim+'px', left:'0px', top:'0px'});\n                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {\n                    this._label._elem.css('width', w+'px');\n                }\n            }\n            else {\n                dim = dim + w;\n                this._elem.css({'width':dim+'px', right:'0px', top:'0px'});\n                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {\n                    this._label._elem.css('width', w+'px');\n                }\n            }\n        }  \n    };    \n    \n    // called with scope of axis\n    $.jqplot.LinearAxisRenderer.prototype.createTicks = function(plot) {\n        // we're are operating on an axis here\n        var ticks = this._ticks;\n        var userTicks = this.ticks;\n        var name = this.name;\n        // databounds were set on axis initialization.\n        var db = this._dataBounds;\n        var dim = (this.name.charAt(0) === 'x') ? this._plotDimensions.width : this._plotDimensions.height;\n        var interval;\n        var min, max;\n        var pos1, pos2;\n        var tt, i;\n        // get a copy of user's settings for min/max.\n        var userMin = this.min;\n        var userMax = this.max;\n        var userNT = this.numberTicks;\n        var userTI = this.tickInterval;\n\n        var threshold = 30;\n        this._scalefact =  (Math.max(dim, threshold+1) - threshold)/300.0;\n        \n        // if we already have ticks, use them.\n        // ticks must be in order of increasing value.\n        \n        if (userTicks.length) {\n            // ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed\n            for (i=0; i<userTicks.length; i++){\n                var ut = userTicks[i];\n                var t = new this.tickRenderer(this.tickOptions);\n                if ($.isArray(ut)) {\n                    t.value = ut[0];\n                    if (this.breakPoints) {\n                        if (ut[0] == this.breakPoints[0]) {\n                            t.label = this.breakTickLabel;\n                            t._breakTick = true;\n                            t.showGridline = false;\n                            t.showMark = false;\n                        }\n                        else if (ut[0] > this.breakPoints[0] && ut[0] <= this.breakPoints[1]) {\n                            t.show = false;\n                            t.showGridline = false;\n                            t.label = ut[1];\n                        }\n                        else {\n                            t.label = ut[1];\n                        }\n                    }\n                    else {\n                        t.label = ut[1];\n                    }\n                    t.setTick(ut[0], this.name);\n                    this._ticks.push(t);\n                }\n\n                else if ($.isPlainObject(ut)) {\n                    $.extend(true, t, ut);\n                    t.axis = this.name;\n                    this._ticks.push(t);\n                }\n                \n                else {\n                    t.value = ut;\n                    if (this.breakPoints) {\n                        if (ut == this.breakPoints[0]) {\n                            t.label = this.breakTickLabel;\n                            t._breakTick = true;\n                            t.showGridline = false;\n                            t.showMark = false;\n                        }\n                        else if (ut > this.breakPoints[0] && ut <= this.breakPoints[1]) {\n                            t.show = false;\n                            t.showGridline = false;\n                        }\n                    }\n                    t.setTick(ut, this.name);\n                    this._ticks.push(t);\n                }\n            }\n            this.numberTicks = userTicks.length;\n            this.min = this._ticks[0].value;\n            this.max = this._ticks[this.numberTicks-1].value;\n            this.tickInterval = (this.max - this.min) / (this.numberTicks - 1);\n        }\n        \n        // we don't have any ticks yet, let's make some!\n        else {\n            if (name == 'xaxis' || name == 'x2axis') {\n                dim = this._plotDimensions.width;\n            }\n            else {\n                dim = this._plotDimensions.height;\n            }\n\n            var _numberTicks = this.numberTicks;\n\n            // if aligning this axis, use number of ticks from previous axis.\n            // Do I need to reset somehow if alignTicks is changed and then graph is replotted??\n            if (this.alignTicks) {\n                if (this.name === 'x2axis' && plot.axes.xaxis.show) {\n                    _numberTicks = plot.axes.xaxis.numberTicks;\n                }\n                else if (this.name.charAt(0) === 'y' && this.name !== 'yaxis' && this.name !== 'yMidAxis' && plot.axes.yaxis.show) {\n                    _numberTicks = plot.axes.yaxis.numberTicks;\n                }\n            }\n        \n            min = ((this.min != null) ? this.min : db.min);\n            max = ((this.max != null) ? this.max : db.max);\n\n            var range = max - min;\n            var rmin, rmax;\n            var temp;\n\n            if (this.tickOptions == null || !this.tickOptions.formatString) {\n                this._overrideFormatString = true;\n            }\n\n            // Doing complete autoscaling\n            if (this.min == null || this.max == null && this.tickInterval == null && !this.autoscale) {\n                // Check if user must have tick at 0 or 100 and ensure they are in range.\n                // The autoscaling algorithm will always place ticks at 0 and 100 if they are in range.\n                if (this.forceTickAt0) {\n                    if (min > 0) {\n                        min = 0;\n                    }\n                    if (max < 0) {\n                        max = 0;\n                    }\n                }\n\n                if (this.forceTickAt100) {\n                    if (min > 100) {\n                        min = 100;\n                    }\n                    if (max < 100) {\n                        max = 100;\n                    }\n                }\n\n                var keepMin = false,\n                    keepMax = false;\n\n                if (this.min != null) {\n                    keepMin = true;\n                }\n\n                else if (this.max != null) {\n                    keepMax = true;\n                }\n\n                // var threshold = 30;\n                // var tdim = Math.max(dim, threshold+1);\n                // this._scalefact =  (tdim-threshold)/300.0;\n                var ret = $.jqplot.LinearTickGenerator(min, max, this._scalefact, _numberTicks, keepMin, keepMax); \n                // calculate a padded max and min, points should be less than these\n                // so that they aren't too close to the edges of the plot.\n                // User can adjust how much padding is allowed with pad, padMin and PadMax options. \n                // If min or max is set, don't pad that end of axis.\n                var tumin = (this.min != null) ? min : min + range*(this.padMin - 1);\n                var tumax = (this.max != null) ? max : max - range*(this.padMax - 1);\n\n                // if they're equal, we shouldn't have to do anything, right?\n                // if (min <=tumin || max >= tumax) {\n                if (min <tumin || max > tumax) {\n                    tumin = (this.min != null) ? min : min - range*(this.padMin - 1);\n                    tumax = (this.max != null) ? max : max + range*(this.padMax - 1);\n                    ret = $.jqplot.LinearTickGenerator(tumin, tumax, this._scalefact, _numberTicks, keepMin, keepMax);\n                }\n\n                this.min = ret[0];\n                this.max = ret[1];\n                // if numberTicks specified, it should return the same.\n                this.numberTicks = ret[2];\n                this._autoFormatString = ret[3];\n                this.tickInterval = ret[4];\n            }\n\n            // User has specified some axis scale related option, can use auto algorithm\n            else {\n                \n                // if min and max are same, space them out a bit\n                if (min == max) {\n                    var adj = 0.05;\n                    if (min > 0) {\n                        adj = Math.max(Math.log(min)/Math.LN10, 0.05);\n                    }\n                    min -= adj;\n                    max += adj;\n                }\n                \n                // autoscale.  Can't autoscale if min or max is supplied.\n                // Will use numberTicks and tickInterval if supplied.  Ticks\n                // across multiple axes may not line up depending on how\n                // bars are to be plotted.\n                if (this.autoscale && this.min == null && this.max == null) {\n                    var rrange, ti, margin;\n                    var forceMinZero = false;\n                    var forceZeroLine = false;\n                    var intervals = {min:null, max:null, average:null, stddev:null};\n                    // if any series are bars, or if any are fill to zero, and if this\n                    // is the axis to fill toward, check to see if we can start axis at zero.\n                    for (var i=0; i<this._series.length; i++) {\n                        var s = this._series[i];\n                        var faname = (s.fillAxis == 'x') ? s._xaxis.name : s._yaxis.name;\n                        // check to see if this is the fill axis\n                        if (this.name == faname) {\n                            var vals = s._plotValues[s.fillAxis];\n                            var vmin = vals[0];\n                            var vmax = vals[0];\n                            for (var j=1; j<vals.length; j++) {\n                                if (vals[j] < vmin) {\n                                    vmin = vals[j];\n                                }\n                                else if (vals[j] > vmax) {\n                                    vmax = vals[j];\n                                }\n                            }\n                            var dp = (vmax - vmin) / vmax;\n                            // is this sries a bar?\n                            if (s.renderer.constructor == $.jqplot.BarRenderer) {\n                                // if no negative values and could also check range.\n                                if (vmin >= 0 && (s.fillToZero || dp > 0.1)) {\n                                    forceMinZero = true;\n                                }\n                                else {\n                                    forceMinZero = false;\n                                    if (s.fill && s.fillToZero && vmin < 0 && vmax > 0) {\n                                        forceZeroLine = true;\n                                    }\n                                    else {\n                                        forceZeroLine = false;\n                                    }\n                                }\n                            }\n                            \n                            // if not a bar and filling, use appropriate method.\n                            else if (s.fill) {\n                                if (vmin >= 0 && (s.fillToZero || dp > 0.1)) {\n                                    forceMinZero = true;\n                                }\n                                else if (vmin < 0 && vmax > 0 && s.fillToZero) {\n                                    forceMinZero = false;\n                                    forceZeroLine = true;\n                                }\n                                else {\n                                    forceMinZero = false;\n                                    forceZeroLine = false;\n                                }\n                            }\n                            \n                            // if not a bar and not filling, only change existing state\n                            // if it doesn't make sense\n                            else if (vmin < 0) {\n                                forceMinZero = false;\n                            }\n                        }\n                    }\n                    \n                    // check if we need make axis min at 0.\n                    if (forceMinZero) {\n                        // compute number of ticks\n                        this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);\n                        this.min = 0;\n                        userMin = 0;\n                        // what order is this range?\n                        // what tick interval does that give us?\n                        ti = max/(this.numberTicks-1);\n                        temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));\n                        if (ti/temp == parseInt(ti/temp, 10)) {\n                            ti += temp;\n                        }\n                        this.tickInterval = Math.ceil(ti/temp) * temp;\n                        this.max = this.tickInterval * (this.numberTicks - 1);\n                    }\n                    \n                    // check if we need to make sure there is a tick at 0.\n                    else if (forceZeroLine) {\n                        // compute number of ticks\n                        this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);\n                        var ntmin = Math.ceil(Math.abs(min)/range*(this.numberTicks-1));\n                        var ntmax = this.numberTicks - 1  - ntmin;\n                        ti = Math.max(Math.abs(min/ntmin), Math.abs(max/ntmax));\n                        temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));\n                        this.tickInterval = Math.ceil(ti/temp) * temp;\n                        this.max = this.tickInterval * ntmax;\n                        this.min = -this.tickInterval * ntmin;\n                    }\n                    \n                    // if nothing else, do autoscaling which will try to line up ticks across axes.\n                    else {  \n                        if (this.numberTicks == null){\n                            if (this.tickInterval) {\n                                this.numberTicks = 3 + Math.ceil(range / this.tickInterval);\n                            }\n                            else {\n                                this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);\n                            }\n                        }\n                \n                        if (this.tickInterval == null) {\n                            // get a tick interval\n                            ti = range/(this.numberTicks - 1);\n\n                            if (ti < 1) {\n                                temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));\n                            }\n                            else {\n                                temp = 1;\n                            }\n                            this.tickInterval = Math.ceil(ti*temp*this.pad)/temp;\n                        }\n                        else {\n                            temp = 1 / this.tickInterval;\n                        }\n                        \n                        // try to compute a nicer, more even tick interval\n                        // temp = Math.pow(10, Math.floor(Math.log(ti)/Math.LN10));\n                        // this.tickInterval = Math.ceil(ti/temp) * temp;\n                        rrange = this.tickInterval * (this.numberTicks - 1);\n                        margin = (rrange - range)/2;\n           \n                        if (this.min == null) {\n                            this.min = Math.floor(temp*(min-margin))/temp;\n                        }\n                        if (this.max == null) {\n                            this.max = this.min + rrange;\n                        }\n                    }\n\n                    // Compute a somewhat decent format string if it is needed.\n                    // get precision of interval and determine a format string.\n                    var sf = $.jqplot.getSignificantFigures(this.tickInterval);\n\n                    var fstr;\n\n                    // if we have only a whole number, use integer formatting\n                    if (sf.digitsLeft >= sf.significantDigits) {\n                        fstr = '%d';\n                    }\n\n                    else {\n                        var temp = Math.max(0, 5 - sf.digitsLeft);\n                        temp = Math.min(temp, sf.digitsRight);\n                        fstr = '%.'+ temp + 'f';\n                    }\n\n                    this._autoFormatString = fstr;\n                }\n                \n                // Use the default algorithm which pads each axis to make the chart\n                // centered nicely on the grid.\n                else {\n\n                    rmin = (this.min != null) ? this.min : min - range*(this.padMin - 1);\n                    rmax = (this.max != null) ? this.max : max + range*(this.padMax - 1);\n                    range = rmax - rmin;\n        \n                    if (this.numberTicks == null){\n                        // if tickInterval is specified by user, we will ignore computed maximum.\n                        // max will be equal or greater to fit even # of ticks.\n                        if (this.tickInterval != null) {\n                            this.numberTicks = Math.ceil((rmax - rmin)/this.tickInterval)+1;\n                        }\n                        else if (dim > 100) {\n                            this.numberTicks = parseInt(3+(dim-100)/75, 10);\n                        }\n                        else {\n                            this.numberTicks = 2;\n                        }\n                    }\n                \n                    if (this.tickInterval == null) {\n                        this.tickInterval = range / (this.numberTicks-1);\n                    }\n                    \n                    if (this.max == null) {\n                        rmax = rmin + this.tickInterval*(this.numberTicks - 1);\n                    }        \n                    if (this.min == null) {\n                        rmin = rmax - this.tickInterval*(this.numberTicks - 1);\n                    }\n\n                    // get precision of interval and determine a format string.\n                    var sf = $.jqplot.getSignificantFigures(this.tickInterval);\n\n                    var fstr;\n\n                    // if we have only a whole number, use integer formatting\n                    if (sf.digitsLeft >= sf.significantDigits) {\n                        fstr = '%d';\n                    }\n\n                    else {\n                        var temp = Math.max(0, 5 - sf.digitsLeft);\n                        temp = Math.min(temp, sf.digitsRight);\n                        fstr = '%.'+ temp + 'f';\n                    }\n\n\n                    this._autoFormatString = fstr;\n\n                    this.min = rmin;\n                    this.max = rmax;\n                }\n                \n                if (this.renderer.constructor == $.jqplot.LinearAxisRenderer && this._autoFormatString == '') {\n                    // fix for misleading tick display with small range and low precision.\n                    range = this.max - this.min;\n                    // figure out precision\n                    var temptick = new this.tickRenderer(this.tickOptions);\n                    // use the tick formatString or, the default.\n                    var fs = temptick.formatString || $.jqplot.config.defaultTickFormatString; \n                    var fs = fs.match($.jqplot.sprintf.regex)[0];\n                    var precision = 0;\n                    if (fs) {\n                        if (fs.search(/[fFeEgGpP]/) > -1) {\n                            var m = fs.match(/\\%\\.(\\d{0,})?[eEfFgGpP]/);\n                            if (m) {\n                                precision = parseInt(m[1], 10);\n                            }\n                            else {\n                                precision = 6;\n                            }\n                        }\n                        else if (fs.search(/[di]/) > -1) {\n                            precision = 0;\n                        }\n                        // fact will be <= 1;\n                        var fact = Math.pow(10, -precision);\n                        if (this.tickInterval < fact) {\n                            // need to correct underrange\n                            if (userNT == null && userTI == null) {\n                                this.tickInterval = fact;\n                                if (userMax == null && userMin == null) {\n                                    // this.min = Math.floor((this._dataBounds.min - this.tickInterval)/fact) * fact;\n                                    this.min = Math.floor(this._dataBounds.min/fact) * fact;\n                                    if (this.min == this._dataBounds.min) {\n                                        this.min = this._dataBounds.min - this.tickInterval;\n                                    }\n                                    // this.max = Math.ceil((this._dataBounds.max + this.tickInterval)/fact) * fact;\n                                    this.max = Math.ceil(this._dataBounds.max/fact) * fact;\n                                    if (this.max == this._dataBounds.max) {\n                                        this.max = this._dataBounds.max + this.tickInterval;\n                                    }\n                                    var n = (this.max - this.min)/this.tickInterval;\n                                    n = n.toFixed(11);\n                                    n = Math.ceil(n);\n                                    this.numberTicks = n + 1;\n                                }\n                                else if (userMax == null) {\n                                    // add one tick for top of range.\n                                    var n = (this._dataBounds.max - this.min) / this.tickInterval;\n                                    n = n.toFixed(11);\n                                    this.numberTicks = Math.ceil(n) + 2;\n                                    this.max = this.min + this.tickInterval * (this.numberTicks-1);\n                                }\n                                else if (userMin == null) {\n                                    // add one tick for bottom of range.\n                                    var n = (this.max - this._dataBounds.min) / this.tickInterval;\n                                    n = n.toFixed(11);\n                                    this.numberTicks = Math.ceil(n) + 2;\n                                    this.min = this.max - this.tickInterval * (this.numberTicks-1);\n                                }\n                                else {\n                                    // calculate a number of ticks so max is within axis scale\n                                    this.numberTicks = Math.ceil((userMax - userMin)/this.tickInterval) + 1;\n                                    // if user's min and max don't fit evenly in ticks, adjust.\n                                    // This takes care of cases such as user min set to 0, max set to 3.5 but tick\n                                    // format string set to %d (integer ticks)\n                                    this.min =  Math.floor(userMin*Math.pow(10, precision))/Math.pow(10, precision);\n                                    this.max =  Math.ceil(userMax*Math.pow(10, precision))/Math.pow(10, precision);\n                                    // this.max = this.min + this.tickInterval*(this.numberTicks-1);\n                                    this.numberTicks = Math.ceil((this.max - this.min)/this.tickInterval) + 1;\n                                }\n                            }\n                        }\n                    }\n                }\n                \n            }\n            \n            if (this._overrideFormatString && this._autoFormatString != '') {\n                this.tickOptions = this.tickOptions || {};\n                this.tickOptions.formatString = this._autoFormatString;\n            }\n\n            var t, to;\n            for (var i=0; i<this.numberTicks; i++){\n                tt = this.min + i * this.tickInterval;\n                t = new this.tickRenderer(this.tickOptions);\n                // var t = new $.jqplot.AxisTickRenderer(this.tickOptions);\n\n                t.setTick(tt, this.name);\n                this._ticks.push(t);\n\n                if (i < this.numberTicks - 1) {\n                    for (var j=0; j<this.minorTicks; j++) {\n                        tt += this.tickInterval/(this.minorTicks+1);\n                        to = $.extend(true, {}, this.tickOptions, {name:this.name, value:tt, label:'', isMinorTick:true});\n                        t = new this.tickRenderer(to);\n                        this._ticks.push(t);\n                    }\n                }\n                t = null;\n            }\n        }\n\n        if (this.tickInset) {\n            this.min = this.min - this.tickInset * this.tickInterval;\n            this.max = this.max + this.tickInset * this.tickInterval;\n        }\n\n        ticks = null;\n    };\n    \n    // Used to reset just the values of the ticks and then repack, which will\n    // recalculate the positioning functions.  It is assuemd that the \n    // number of ticks is the same and the values of the new array are at the\n    // proper interval.\n    // This method needs to be called with the scope of an axis object, like:\n    //\n    // > plot.axes.yaxis.renderer.resetTickValues.call(plot.axes.yaxis, yarr);\n    //\n    $.jqplot.LinearAxisRenderer.prototype.resetTickValues = function(opts) {\n        if ($.isArray(opts) && opts.length == this._ticks.length) {\n            var t;\n            for (var i=0; i<opts.length; i++) {\n                t = this._ticks[i];\n                t.value = opts[i];\n                t.label = t.formatter(t.formatString, opts[i]);\n                t.label = t.prefix + t.label;\n                t._elem.html(t.label);\n            }\n            t = null;\n            this.min = $.jqplot.arrayMin(opts);\n            this.max = $.jqplot.arrayMax(opts);\n            this.pack();\n        }\n        // Not implemented yet.\n        // else if ($.isPlainObject(opts)) {\n        // \n        // }\n    };\n    \n    // called with scope of axis\n    $.jqplot.LinearAxisRenderer.prototype.pack = function(pos, offsets) {\n        // Add defaults for repacking from resetTickValues function.\n        pos = pos || {};\n        offsets = offsets || this._offsets;\n        \n        var ticks = this._ticks;\n        var max = this.max;\n        var min = this.min;\n        var offmax = offsets.max;\n        var offmin = offsets.min;\n        var lshow = (this._label == null) ? false : this._label.show;\n        \n        for (var p in pos) {\n            this._elem.css(p, pos[p]);\n        }\n        \n        this._offsets = offsets;\n        // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.\n        var pixellength = offmax - offmin;\n        var unitlength = max - min;\n        \n        // point to unit and unit to point conversions references to Plot DOM element top left corner.\n        if (this.breakPoints) {\n            unitlength = unitlength - this.breakPoints[1] + this.breakPoints[0];\n            \n            this.p2u = function(p){\n                return (p - offmin) * unitlength / pixellength + min;\n            };\n        \n            this.u2p = function(u){\n                if (u > this.breakPoints[0] && u < this.breakPoints[1]){\n                    u = this.breakPoints[0];\n                }\n                if (u <= this.breakPoints[0]) {\n                    return (u - min) * pixellength / unitlength + offmin;\n                }\n                else {\n                    return (u - this.breakPoints[1] + this.breakPoints[0] - min) * pixellength / unitlength + offmin;\n                }\n            };\n                \n            if (this.name.charAt(0) == 'x'){\n                this.series_u2p = function(u){\n                    if (u > this.breakPoints[0] && u < this.breakPoints[1]){\n                        u = this.breakPoints[0];\n                    }\n                    if (u <= this.breakPoints[0]) {\n                        return (u - min) * pixellength / unitlength;\n                    }\n                    else {\n                        return (u - this.breakPoints[1] + this.breakPoints[0] - min) * pixellength / unitlength;\n                    }\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + min;\n                };\n            }\n        \n            else {\n                this.series_u2p = function(u){\n                    if (u > this.breakPoints[0] && u < this.breakPoints[1]){\n                        u = this.breakPoints[0];\n                    }\n                    if (u >= this.breakPoints[1]) {\n                        return (u - max) * pixellength / unitlength;\n                    }\n                    else {\n                        return (u + this.breakPoints[1] - this.breakPoints[0] - max) * pixellength / unitlength;\n                    }\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + max;\n                };\n            }\n        }\n        else {\n            this.p2u = function(p){\n                return (p - offmin) * unitlength / pixellength + min;\n            };\n        \n            this.u2p = function(u){\n                return (u - min) * pixellength / unitlength + offmin;\n            };\n                \n            if (this.name == 'xaxis' || this.name == 'x2axis'){\n                this.series_u2p = function(u){\n                    return (u - min) * pixellength / unitlength;\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + min;\n                };\n            }\n        \n            else {\n                this.series_u2p = function(u){\n                    return (u - max) * pixellength / unitlength;\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + max;\n                };\n            }\n        }\n        \n        if (this.show) {\n            if (this.name == 'xaxis' || this.name == 'x2axis') {\n                for (var i=0; i<ticks.length; i++) {\n                    var t = ticks[i];\n                    if (t.show && t.showLabel) {\n                        var shim;\n                        \n                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                            // will need to adjust auto positioning based on which axis this is.\n                            var temp = (this.name == 'xaxis') ? 1 : -1;\n                            switch (t.labelPosition) {\n                                case 'auto':\n                                    // position at end\n                                    if (temp * t.angle < 0) {\n                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    }\n                                    // position at start\n                                    else {\n                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'end':\n                                    shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                                case 'start':\n                                    shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    break;\n                                case 'middle':\n                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                                default:\n                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                            }\n                        }\n                        else {\n                            shim = -t.getWidth()/2;\n                        }\n                        var val = this.u2p(t.value) + shim + 'px';\n                        t._elem.css('left', val);\n                        t.pack();\n                    }\n                }\n                if (lshow) {\n                    var w = this._label._elem.outerWidth(true);\n                    this._label._elem.css('left', offmin + pixellength/2 - w/2 + 'px');\n                    if (this.name == 'xaxis') {\n                        this._label._elem.css('bottom', '0px');\n                    }\n                    else {\n                        this._label._elem.css('top', '0px');\n                    }\n                    this._label.pack();\n                }\n            }\n            else {\n                for (var i=0; i<ticks.length; i++) {\n                    var t = ticks[i];\n                    if (t.show && t.showLabel) {                        \n                        var shim;\n                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                            // will need to adjust auto positioning based on which axis this is.\n                            var temp = (this.name == 'yaxis') ? 1 : -1;\n                            switch (t.labelPosition) {\n                                case 'auto':\n                                    // position at end\n                                case 'end':\n                                    if (temp * t.angle < 0) {\n                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                    }\n                                    else {\n                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'start':\n                                    if (t.angle > 0) {\n                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                    }\n                                    else {\n                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'middle':\n                                    // if (t.angle > 0) {\n                                    //     shim = -t.getHeight()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    // }\n                                    // else {\n                                    //     shim = -t.getHeight()/2 - t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    // }\n                                    shim = -t.getHeight()/2;\n                                    break;\n                                default:\n                                    shim = -t.getHeight()/2;\n                                    break;\n                            }\n                        }\n                        else {\n                            shim = -t.getHeight()/2;\n                        }\n                        \n                        var val = this.u2p(t.value) + shim + 'px';\n                        t._elem.css('top', val);\n                        t.pack();\n                    }\n                }\n                if (lshow) {\n                    var h = this._label._elem.outerHeight(true);\n                    this._label._elem.css('top', offmax - pixellength/2 - h/2 + 'px');\n                    if (this.name == 'yaxis') {\n                        this._label._elem.css('left', '0px');\n                    }\n                    else {\n                        this._label._elem.css('right', '0px');\n                    }   \n                    this._label.pack();\n                }\n            }\n        }\n\n        ticks = null;\n    };\n})(jQuery);\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    /**\n    * The following code was generaously given to me a while back by Scott Prahl.\n    * He did a good job at computing axes min, max and number of ticks for the \n    * case where the user has not set any scale related parameters (tickInterval,\n    * numberTicks, min or max).  I had ignored this use case for a long time,\n    * focusing on the more difficult case where user has set some option controlling\n    * tick generation.  Anyway, about time I got this into jqPlot.\n    * Thanks Scott!!\n    */\n    \n    /**\n    * Copyright (c) 2010 Scott Prahl\n    * The next three routines are currently available for use in all personal \n    * or commercial projects under both the MIT and GPL version 2.0 licenses. \n    * This means that you can choose the license that best suits your project \n    * and use it accordingly. \n    */\n\n    // A good format string depends on the interval. If the interval is greater \n    // than 1 then there is no need to show any decimal digits. If it is < 1.0, then\n    // use the magnitude of the interval to determine the number of digits to show.\n    function bestFormatString (interval)\n    {\n        var fstr;\n        interval = Math.abs(interval);\n        if (interval >= 10) {\n            fstr = '%d';\n        }\n\n        else if (interval > 1) {\n            if (interval === parseInt(interval, 10)) {\n                fstr = '%d';\n            }\n            else {\n                fstr = '%.1f';\n            }\n        }\n\n        else {\n            var expv = -Math.floor(Math.log(interval)/Math.LN10);\n            fstr = '%.' + expv + 'f';\n        }\n        \n        return fstr; \n    }\n\n    var _factors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.8, 1, 2, 3, 4, 5];\n\n    var _getLowerFactor = function(f) {\n        var i = _factors.indexOf(f);\n        if (i > 0) {\n            return _factors[i-1];\n        }\n        else {\n            return _factors[_factors.length - 1] / 100;\n        }\n    };\n\n    var _getHigherFactor = function(f) {\n        var i = _factors.indexOf(f);\n        if (i < _factors.length-1) {\n            return _factors[i+1];\n        }\n        else {\n            return _factors[0] * 100;\n        }\n    };\n\n    // Given a fixed minimum and maximum and a target number ot ticks\n    // figure out the best interval and \n    // return min, max, number ticks, format string and tick interval\n    function bestConstrainedInterval(min, max, nttarget) {\n        // run through possible number to ticks and see which interval is best\n        var low = Math.floor(nttarget/2);\n        var hi = Math.ceil(nttarget*1.5);\n        var badness = Number.MAX_VALUE;\n        var r = (max - min);\n        var temp;\n        var sd;\n        var bestNT;\n        var gsf = $.jqplot.getSignificantFigures;\n        var fsd;\n        var fs;\n        var currentNT;\n        var bestPrec;\n\n        for (var i=0, l=hi-low+1; i<l; i++) {\n            currentNT = low + i;\n            temp = r/(currentNT-1);\n            sd = gsf(temp);\n\n            temp = Math.abs(nttarget - currentNT) + sd.digitsRight;\n            if (temp < badness) {\n                badness = temp;\n                bestNT = currentNT;\n                bestPrec = sd.digitsRight;\n            }\n            else if (temp === badness) {\n                // let nicer ticks trump number ot ticks\n                if (sd.digitsRight < bestPrec) {\n                    bestNT = currentNT;\n                    bestPrec = sd.digitsRight;\n                }\n            }\n\n        }\n\n        fsd = Math.max(bestPrec, Math.max(gsf(min).digitsRight, gsf(max).digitsRight));\n        if (fsd === 0) {\n            fs = '%d';\n        }\n        else {\n            fs = '%.' + fsd + 'f';\n        }\n        temp = r / (bestNT - 1);\n        // min, max, number ticks, format string, tick interval\n        return [min, max, bestNT, fs, temp];\n    }\n\n    // This will return an interval of form 2 * 10^n, 5 * 10^n or 10 * 10^n\n    // it is based soley on the range and number of ticks.  So if user specifies\n    // number of ticks, use this.\n    function bestInterval(range, numberTicks) {\n        numberTicks = numberTicks || 7;\n        var minimum = range / (numberTicks - 1);\n        var magnitude = Math.pow(10, Math.floor(Math.log(minimum) / Math.LN10));\n        var residual = minimum / magnitude;\n        var interval;\n        // \"nicest\" ranges are 1, 2, 5 or powers of these.\n        // for magnitudes below 1, only allow these. \n        if (magnitude < 1) {\n            if (residual > 5) {\n                interval = 10 * magnitude;\n            }\n            else if (residual > 2) {\n                interval = 5 * magnitude;\n            }\n            else if (residual > 1) {\n                interval = 2 * magnitude;\n            }\n            else {\n                interval = magnitude;\n            }\n        }\n        // for large ranges (whole integers), allow intervals like 3, 4 or powers of these.\n        // this helps a lot with poor choices for number of ticks. \n        else {\n            if (residual > 5) {\n                interval = 10 * magnitude;\n            }\n            else if (residual > 4) {\n                interval = 5 * magnitude;\n            }\n            else if (residual > 3) {\n                interval = 4 * magnitude;\n            }\n            else if (residual > 2) {\n                interval = 3 * magnitude;\n            }\n            else if (residual > 1) {\n                interval = 2 * magnitude;\n            }\n            else {\n                interval = magnitude;\n            }\n        }\n\n        return interval;\n    }\n\n    // This will return an interval of form 2 * 10^n, 5 * 10^n or 10 * 10^n\n    // it is based soley on the range of data, number of ticks must be computed later.\n    function bestLinearInterval(range, scalefact) {\n        scalefact = scalefact || 1;\n        var expv = Math.floor(Math.log(range)/Math.LN10);\n        var magnitude = Math.pow(10, expv);\n        // 0 < f < 10\n        var f = range / magnitude;\n        var fact;\n        // for large plots, scalefact will decrease f and increase number of ticks.\n        // for small plots, scalefact will increase f and decrease number of ticks.\n        f = f/scalefact;\n\n        // for large plots, smaller interval, more ticks.\n        if (f<=0.38) {\n            fact = 0.1;\n        }\n        else if (f<=1.6) {\n            fact = 0.2;\n        }\n        else if (f<=4.0) {\n            fact = 0.5;\n        }\n        else if (f<=8.0) {\n            fact = 1.0;\n        }\n        // for very small plots, larger interval, less ticks in number ticks\n        else if (f<=16.0) {\n            fact = 2;\n        }\n        else {\n            fact = 5;\n        } \n\n        return fact*magnitude; \n    }\n\n    function bestLinearComponents(range, scalefact) {\n        var expv = Math.floor(Math.log(range)/Math.LN10);\n        var magnitude = Math.pow(10, expv);\n        // 0 < f < 10\n        var f = range / magnitude;\n        var interval;\n        var fact;\n        // for large plots, scalefact will decrease f and increase number of ticks.\n        // for small plots, scalefact will increase f and decrease number of ticks.\n        f = f/scalefact;\n\n        // for large plots, smaller interval, more ticks.\n        if (f<=0.38) {\n            fact = 0.1;\n        }\n        else if (f<=1.6) {\n            fact = 0.2;\n        }\n        else if (f<=4.0) {\n            fact = 0.5;\n        }\n        else if (f<=8.0) {\n            fact = 1.0;\n        }\n        // for very small plots, larger interval, less ticks in number ticks\n        else if (f<=16.0) {\n            fact = 2;\n        }\n        // else if (f<=20.0) {\n        //     fact = 3;\n        // }\n        // else if (f<=24.0) {\n        //     fact = 4;\n        // }\n        else {\n            fact = 5;\n        } \n\n        interval = fact * magnitude;\n\n        return [interval, fact, magnitude];\n    }\n\n    // Given the min and max for a dataset, return suitable endpoints\n    // for the graphing, a good number for the number of ticks, and a\n    // format string so that extraneous digits are not displayed.\n    // returned is an array containing [min, max, nTicks, format]\n    $.jqplot.LinearTickGenerator = function(axis_min, axis_max, scalefact, numberTicks, keepMin, keepMax) {\n        // Set to preserve EITHER min OR max.\n        // If min is preserved, max must be free.\n        keepMin = (keepMin === null) ? false : keepMin;\n        keepMax = (keepMax === null || keepMin) ? false : keepMax;\n        // if endpoints are equal try to include zero otherwise include one\n        if (axis_min === axis_max) {\n            axis_max = (axis_max) ? 0 : 1;\n        }\n\n        scalefact = scalefact || 1.0;\n\n        // make sure range is positive\n        if (axis_max < axis_min) {\n            var a = axis_max;\n            axis_max = axis_min;\n            axis_min = a;\n        }\n\n        var r = [];\n        var ss = bestLinearInterval(axis_max - axis_min, scalefact);\n\n        var gsf = $.jqplot.getSignificantFigures;\n        \n        if (numberTicks == null) {\n\n            // Figure out the axis min, max and number of ticks\n            // the min and max will be some multiple of the tick interval,\n            // 1*10^n, 2*10^n or 5*10^n.  This gaurantees that, if the\n            // axis min is negative, 0 will be a tick.\n            if (!keepMin && !keepMax) {\n                r[0] = Math.floor(axis_min / ss) * ss;  // min\n                r[1] = Math.ceil(axis_max / ss) * ss;   // max\n                r[2] = Math.round((r[1]-r[0])/ss+1.0);  // number of ticks\n                r[3] = bestFormatString(ss);            // format string\n                r[4] = ss;                              // tick Interval\n            }\n\n            else if (keepMin) {\n                r[0] = axis_min;                                        // min\n                r[2] = Math.ceil((axis_max - axis_min) / ss + 1.0);     // number of ticks\n                r[1] = axis_min + (r[2] - 1) * ss;                      // max\n                var digitsMin = gsf(axis_min).digitsRight;\n                var digitsSS = gsf(ss).digitsRight;\n                if (digitsMin < digitsSS) {\n                    r[3] = bestFormatString(ss);                        // format string\n                }\n                else {\n                    r[3] = '%.' + digitsMin + 'f';\n                }\n                r[4] = ss;                                              // tick Interval\n            }\n\n            else if (keepMax) {\n                r[1] = axis_max;                                        // max\n                r[2] = Math.ceil((axis_max - axis_min) / ss + 1.0);     // number of ticks\n                r[0] = axis_max - (r[2] - 1) * ss;                      // min\n                var digitsMax = gsf(axis_max).digitsRight;\n                var digitsSS = gsf(ss).digitsRight;\n                if (digitsMax < digitsSS) {\n                    r[3] = bestFormatString(ss);                        // format string\n                }\n                else {\n                    r[3] = '%.' + digitsMax + 'f';\n                }\n                r[4] = ss;                                              // tick Interval\n            }\n        }\n\n        else {\n            var tempr = [];\n\n            // Figure out the axis min, max and number of ticks\n            // the min and max will be some multiple of the tick interval,\n            // 1*10^n, 2*10^n or 5*10^n.  This gaurantees that, if the\n            // axis min is negative, 0 will be a tick.\n            tempr[0] = Math.floor(axis_min / ss) * ss;  // min\n            tempr[1] = Math.ceil(axis_max / ss) * ss;   // max\n            tempr[2] = Math.round((tempr[1]-tempr[0])/ss+1.0);    // number of ticks\n            tempr[3] = bestFormatString(ss);            // format string\n            tempr[4] = ss;                              // tick Interval\n\n            // first, see if we happen to get the right number of ticks\n            if (tempr[2] === numberTicks) {\n                r = tempr;\n            }\n\n            else {\n\n                var newti = bestInterval(tempr[1] - tempr[0], numberTicks);\n\n                r[0] = tempr[0];                        // min\n                r[2] = numberTicks;                     // number of ticks\n                r[4] = newti;                           // tick interval\n                r[3] = bestFormatString(newti);         // format string\n                r[1] = r[0] + (r[2] - 1) * r[4];        // max\n            }\n        }\n\n        return r;\n    };\n\n    $.jqplot.LinearTickGenerator.bestLinearInterval = bestLinearInterval;\n    $.jqplot.LinearTickGenerator.bestInterval = bestInterval;\n    $.jqplot.LinearTickGenerator.bestLinearComponents = bestLinearComponents;\n    $.jqplot.LinearTickGenerator.bestConstrainedInterval = bestConstrainedInterval;\n\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class: $.jqplot.MarkerRenderer\n    // The default jqPlot marker renderer, rendering the points on the line.\n    $.jqplot.MarkerRenderer = function(options){\n        // Group: Properties\n        \n        // prop: show\n        // whether or not to show the marker.\n        this.show = true;\n        // prop: style\n        // One of diamond, circle, square, x, plus, dash, filledDiamond, filledCircle, filledSquare\n        this.style = 'filledCircle';\n        // prop: lineWidth\n        // size of the line for non-filled markers.\n        this.lineWidth = 2;\n        // prop: size\n        // Size of the marker (diameter or circle, length of edge of square, etc.)\n        this.size = 9.0;\n        // prop: color\n        // color of marker.  Will be set to color of series by default on init.\n        this.color = '#666666';\n        // prop: shadow\n        // whether or not to draw a shadow on the line\n        this.shadow = true;\n        // prop: shadowAngle\n        // Shadow angle in degrees\n        this.shadowAngle = 45;\n        // prop: shadowOffset\n        // Shadow offset from line in pixels\n        this.shadowOffset = 1;\n        // prop: shadowDepth\n        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.\n        this.shadowDepth = 3;\n        // prop: shadowAlpha\n        // Alpha channel transparency of shadow.  0 = transparent.\n        this.shadowAlpha = '0.07';\n        // prop: shadowRenderer\n        // Renderer that will draws the shadows on the marker.\n        this.shadowRenderer = new $.jqplot.ShadowRenderer();\n        // prop: shapeRenderer\n        // Renderer that will draw the marker.\n        this.shapeRenderer = new $.jqplot.ShapeRenderer();\n        \n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n        var sdopt = {angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, lineWidth:this.lineWidth, depth:this.shadowDepth, closePath:true};\n        if (this.style.indexOf('filled') != -1) {\n            sdopt.fill = true;\n        }\n        if (this.style.indexOf('ircle') != -1) {\n            sdopt.isarc = true;\n            sdopt.closePath = false;\n        }\n        this.shadowRenderer.init(sdopt);\n        \n        var shopt = {fill:false, isarc:false, strokeStyle:this.color, fillStyle:this.color, lineWidth:this.lineWidth, closePath:true};\n        if (this.style.indexOf('filled') != -1) {\n            shopt.fill = true;\n        }\n        if (this.style.indexOf('ircle') != -1) {\n            shopt.isarc = true;\n            shopt.closePath = false;\n        }\n        this.shapeRenderer.init(shopt);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawDiamond = function(x, y, ctx, fill, options) {\n        var stretch = 1.2;\n        var dx = this.size/2/stretch;\n        var dy = this.size/2*stretch;\n        var points = [[x-dx, y], [x, y+dy], [x+dx, y], [x, y-dy]];\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points);\n        }\n        this.shapeRenderer.draw(ctx, points, options);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawPlus = function(x, y, ctx, fill, options) {\n        var stretch = 1.0;\n        var dx = this.size/2*stretch;\n        var dy = this.size/2*stretch;\n        var points1 = [[x, y-dy], [x, y+dy]];\n        var points2 = [[x+dx, y], [x-dx, y]];\n        var opts = $.extend(true, {}, this.options, {closePath:false});\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points1, {closePath:false});\n            this.shadowRenderer.draw(ctx, points2, {closePath:false});\n        }\n        this.shapeRenderer.draw(ctx, points1, opts);\n        this.shapeRenderer.draw(ctx, points2, opts);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawX = function(x, y, ctx, fill, options) {\n        var stretch = 1.0;\n        var dx = this.size/2*stretch;\n        var dy = this.size/2*stretch;\n        var opts = $.extend(true, {}, this.options, {closePath:false});\n        var points1 = [[x-dx, y-dy], [x+dx, y+dy]];\n        var points2 = [[x-dx, y+dy], [x+dx, y-dy]];\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points1, {closePath:false});\n            this.shadowRenderer.draw(ctx, points2, {closePath:false});\n        }\n        this.shapeRenderer.draw(ctx, points1, opts);\n        this.shapeRenderer.draw(ctx, points2, opts);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawDash = function(x, y, ctx, fill, options) {\n        var stretch = 1.0;\n        var dx = this.size/2*stretch;\n        var dy = this.size/2*stretch;\n        var points = [[x-dx, y], [x+dx, y]];\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points);\n        }\n        this.shapeRenderer.draw(ctx, points, options);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawLine = function(p1, p2, ctx, fill, options) {\n        var points = [p1, p2];\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points);\n        }\n        this.shapeRenderer.draw(ctx, points, options);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawSquare = function(x, y, ctx, fill, options) {\n        var stretch = 1.0;\n        var dx = this.size/2/stretch;\n        var dy = this.size/2*stretch;\n        var points = [[x-dx, y-dy], [x-dx, y+dy], [x+dx, y+dy], [x+dx, y-dy]];\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points);\n        }\n        this.shapeRenderer.draw(ctx, points, options);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.drawCircle = function(x, y, ctx, fill, options) {\n        var radius = this.size/2;\n        var end = 2*Math.PI;\n        var points = [x, y, radius, 0, end, true];\n        if (this.shadow) {\n            this.shadowRenderer.draw(ctx, points);\n        }\n        this.shapeRenderer.draw(ctx, points, options);\n    };\n    \n    $.jqplot.MarkerRenderer.prototype.draw = function(x, y, ctx, options) {\n        options = options || {};\n        // hack here b/c shape renderer uses canvas based color style options\n        // and marker uses css style names.\n        if (options.show == null || options.show != false) {\n            if (options.color && !options.fillStyle) {\n                options.fillStyle = options.color;\n            }\n            if (options.color && !options.strokeStyle) {\n                options.strokeStyle = options.color;\n            }\n            switch (this.style) {\n                case 'diamond':\n                    this.drawDiamond(x,y,ctx, false, options);\n                    break;\n                case 'filledDiamond':\n                    this.drawDiamond(x,y,ctx, true, options);\n                    break;\n                case 'circle':\n                    this.drawCircle(x,y,ctx, false, options);\n                    break;\n                case 'filledCircle':\n                    this.drawCircle(x,y,ctx, true, options);\n                    break;\n                case 'square':\n                    this.drawSquare(x,y,ctx, false, options);\n                    break;\n                case 'filledSquare':\n                    this.drawSquare(x,y,ctx, true, options);\n                    break;\n                case 'x':\n                    this.drawX(x,y,ctx, true, options);\n                    break;\n                case 'plus':\n                    this.drawPlus(x,y,ctx, true, options);\n                    break;\n                case 'dash':\n                    this.drawDash(x,y,ctx, true, options);\n                    break;\n                case 'line':\n                    this.drawLine(x, y, ctx, false, options);\n                    break;\n                default:\n                    this.drawDiamond(x,y,ctx, false, options);\n                    break;\n            }\n        }\n    };\n})(jQuery);    ","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class: $.jqplot.shadowRenderer\n    // The default jqPlot shadow renderer, rendering shadows behind shapes.\n    $.jqplot.ShadowRenderer = function(options){ \n        // Group: Properties\n        \n        // prop: angle\n        // Angle of the shadow in degrees.  Measured counter-clockwise from the x axis.\n        this.angle = 45;\n        // prop: offset\n        // Pixel offset at the given shadow angle of each shadow stroke from the last stroke.\n        this.offset = 1;\n        // prop: alpha\n        // alpha transparency of shadow stroke.\n        this.alpha = 0.07;\n        // prop: lineWidth\n        // width of the shadow line stroke.\n        this.lineWidth = 1.5;\n        // prop: lineJoin\n        // How line segments of the shadow are joined.\n        this.lineJoin = 'miter';\n        // prop: lineCap\n        // how ends of the shadow line are rendered.\n        this.lineCap = 'round';\n        // prop; closePath\n        // whether line path segment is closed upon itself.\n        this.closePath = false;\n        // prop: fill\n        // whether to fill the shape.\n        this.fill = false;\n        // prop: depth\n        // how many times the shadow is stroked.  Each stroke will be offset by offset at angle degrees.\n        this.depth = 3;\n        this.strokeStyle = 'rgba(0,0,0,0.1)';\n        // prop: isarc\n        // whether the shadow is an arc or not.\n        this.isarc = false;\n        \n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.ShadowRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n    };\n    \n    // function: draw\n    // draws an transparent black (i.e. gray) shadow.\n    //\n    // ctx - canvas drawing context\n    // points - array of points or [x, y, radius, start angle (rad), end angle (rad)]\n    $.jqplot.ShadowRenderer.prototype.draw = function(ctx, points, options) {\n        ctx.save();\n        var opts = (options != null) ? options : {};\n        var fill = (opts.fill != null) ? opts.fill : this.fill;\n        var fillRect = (opts.fillRect != null) ? opts.fillRect : this.fillRect;\n        var closePath = (opts.closePath != null) ? opts.closePath : this.closePath;\n        var offset = (opts.offset != null) ? opts.offset : this.offset;\n        var alpha = (opts.alpha != null) ? opts.alpha : this.alpha;\n        var depth = (opts.depth != null) ? opts.depth : this.depth;\n        var isarc = (opts.isarc != null) ? opts.isarc : this.isarc;\n        var linePattern = (opts.linePattern != null) ? opts.linePattern : this.linePattern;\n        ctx.lineWidth = (opts.lineWidth != null) ? opts.lineWidth : this.lineWidth;\n        ctx.lineJoin = (opts.lineJoin != null) ? opts.lineJoin : this.lineJoin;\n        ctx.lineCap = (opts.lineCap != null) ? opts.lineCap : this.lineCap;\n        ctx.strokeStyle = opts.strokeStyle || this.strokeStyle || 'rgba(0,0,0,'+alpha+')';\n        ctx.fillStyle = opts.fillStyle || this.fillStyle || 'rgba(0,0,0,'+alpha+')';\n        for (var j=0; j<depth; j++) {\n            var ctxPattern = $.jqplot.LinePattern(ctx, linePattern);\n            ctx.translate(Math.cos(this.angle*Math.PI/180)*offset, Math.sin(this.angle*Math.PI/180)*offset);\n            ctxPattern.beginPath();\n            if (isarc) {\n                ctx.arc(points[0], points[1], points[2], points[3], points[4], true);                \n            }\n            else if (fillRect) {\n                if (fillRect) {\n                    ctx.fillRect(points[0], points[1], points[2], points[3]);\n                }\n            }\n            else if (points && points.length){\n                var move = true;\n                for (var i=0; i<points.length; i++) {\n                    // skip to the first non-null point and move to it.\n                    if (points[i][0] != null && points[i][1] != null) {\n                        if (move) {\n                            ctxPattern.moveTo(points[i][0], points[i][1]);\n                            move = false;\n                        }\n                        else {\n                            ctxPattern.lineTo(points[i][0], points[i][1]);\n                        }\n                    }\n                    else {\n                        move = true;\n                    }\n                }\n                \n            }\n            if (closePath) {\n                ctxPattern.closePath();\n            }\n            if (fill) {\n                ctx.fill();\n            }\n            else {\n                ctx.stroke();\n            }\n        }\n        ctx.restore();\n    };\n})(jQuery);    ","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class: $.jqplot.shapeRenderer\n    // The default jqPlot shape renderer.  Given a set of points will\n    // plot them and either stroke a line (fill = false) or fill them (fill = true).\n    // If a filled shape is desired, closePath = true must also be set to close\n    // the shape.\n    $.jqplot.ShapeRenderer = function(options){\n        \n        this.lineWidth = 1.5;\n        // prop: linePattern\n        // line pattern 'dashed', 'dotted', 'solid', some combination\n        // of '-' and '.' characters such as '.-.' or a numerical array like \n        // [draw, skip, draw, skip, ...] such as [1, 10] to draw a dotted line, \n        // [1, 10, 20, 10] to draw a dot-dash line, and so on.\n        this.linePattern = 'solid';\n        // prop: lineJoin\n        // How line segments of the shadow are joined.\n        this.lineJoin = 'miter';\n        // prop: lineCap\n        // how ends of the shadow line are rendered.\n        this.lineCap = 'round';\n        // prop; closePath\n        // whether line path segment is closed upon itself.\n        this.closePath = false;\n        // prop: fill\n        // whether to fill the shape.\n        this.fill = false;\n        // prop: isarc\n        // whether the shadow is an arc or not.\n        this.isarc = false;\n        // prop: fillRect\n        // true to draw shape as a filled rectangle.\n        this.fillRect = false;\n        // prop: strokeRect\n        // true to draw shape as a stroked rectangle.\n        this.strokeRect = false;\n        // prop: clearRect\n        // true to cear a rectangle.\n        this.clearRect = false;\n        // prop: strokeStyle\n        // css color spec for the stoke style\n        this.strokeStyle = '#999999';\n        // prop: fillStyle\n        // css color spec for the fill style.\n        this.fillStyle = '#999999'; \n        \n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.ShapeRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n    };\n    \n    // function: draw\n    // draws the shape.\n    //\n    // ctx - canvas drawing context\n    // points - array of points for shapes or \n    // [x, y, width, height] for rectangles or\n    // [x, y, radius, start angle (rad), end angle (rad)] for circles and arcs.\n    $.jqplot.ShapeRenderer.prototype.draw = function(ctx, points, options) {\n        ctx.save();\n        var opts = (options != null) ? options : {};\n        var fill = (opts.fill != null) ? opts.fill : this.fill;\n        var closePath = (opts.closePath != null) ? opts.closePath : this.closePath;\n        var fillRect = (opts.fillRect != null) ? opts.fillRect : this.fillRect;\n        var strokeRect = (opts.strokeRect != null) ? opts.strokeRect : this.strokeRect;\n        var clearRect = (opts.clearRect != null) ? opts.clearRect : this.clearRect;\n        var isarc = (opts.isarc != null) ? opts.isarc : this.isarc;\n        var linePattern = (opts.linePattern != null) ? opts.linePattern : this.linePattern;\n        var ctxPattern = $.jqplot.LinePattern(ctx, linePattern);\n        ctx.lineWidth = opts.lineWidth || this.lineWidth;\n        ctx.lineJoin = opts.lineJoin || this.lineJoin;\n        ctx.lineCap = opts.lineCap || this.lineCap;\n        ctx.strokeStyle = (opts.strokeStyle || opts.color) || this.strokeStyle;\n        ctx.fillStyle = opts.fillStyle || this.fillStyle;\n        ctx.beginPath();\n        if (isarc) {\n            ctx.arc(points[0], points[1], points[2], points[3], points[4], true);   \n            if (closePath) {\n                ctx.closePath();\n            }\n            if (fill) {\n                ctx.fill();\n            }\n            else {\n                ctx.stroke();\n            }\n            ctx.restore();\n            return;\n        }\n        else if (clearRect) {\n            ctx.clearRect(points[0], points[1], points[2], points[3]);\n            ctx.restore();\n            return;\n        }\n        else if (fillRect || strokeRect) {\n            if (fillRect) {\n                ctx.fillRect(points[0], points[1], points[2], points[3]);\n            }\n            if (strokeRect) {\n                ctx.strokeRect(points[0], points[1], points[2], points[3]);\n                ctx.restore();\n                return;\n            }\n        }\n        else if (points && points.length){\n            var move = true;\n            for (var i=0; i<points.length; i++) {\n                // skip to the first non-null point and move to it.\n                if (points[i][0] != null && points[i][1] != null) {\n                    if (move) {\n                        ctxPattern.moveTo(points[i][0], points[i][1]);\n                        move = false;\n                    }\n                    else {\n                        ctxPattern.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n                else {\n                    move = true;\n                }\n            }\n            if (closePath) {\n                ctxPattern.closePath();\n            }\n            if (fill) {\n                ctx.fill();\n            }\n            else {\n                ctx.stroke();\n            }\n        }\n        ctx.restore();\n    };\n})(jQuery);    ","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {      \n    /**\n     * JavaScript printf/sprintf functions.\n     * \n     * This code has been adapted from the publicly available sprintf methods\n     * by Ash Searle. His original header follows:\n     *\n     *     This code is unrestricted: you are free to use it however you like.\n     *     \n     *     The functions should work as expected, performing left or right alignment,\n     *     truncating strings, outputting numbers with a required precision etc.\n     *\n     *     For complex cases, these functions follow the Perl implementations of\n     *     (s)printf, allowing arguments to be passed out-of-order, and to set the\n     *     precision or length of the output based on arguments instead of fixed\n     *     numbers.\n     *\n     *     See http://perldoc.perl.org/functions/sprintf.html for more information.\n     *\n     *     Implemented:\n     *     - zero and space-padding\n     *     - right and left-alignment,\n     *     - base X prefix (binary, octal and hex)\n     *     - positive number prefix\n     *     - (minimum) width\n     *     - precision / truncation / maximum width\n     *     - out of order arguments\n     *\n     *     Not implemented (yet):\n     *     - vector flag\n     *     - size (bytes, words, long-words etc.)\n     *     \n     *     Will not implement:\n     *     - %n or %p (no pass-by-reference in JavaScript)\n     *\n     *     @version 2007.04.27\n     *     @author Ash Searle \n     * \n     * You can see the original work and comments on his blog:\n     * http://hexmen.com/blog/2007/03/printf-sprintf/\n     * http://hexmen.com/js/sprintf.js\n     */\n     \n     /**\n      * @Modifications 2009.05.26\n      * @author Chris Leonello\n      * \n      * Added %p %P specifier\n      * Acts like %g or %G but will not add more significant digits to the output than present in the input.\n      * Example:\n      * Format: '%.3p', Input: 0.012, Output: 0.012\n      * Format: '%.3g', Input: 0.012, Output: 0.0120\n      * Format: '%.4p', Input: 12.0, Output: 12.0\n      * Format: '%.4g', Input: 12.0, Output: 12.00\n      * Format: '%.4p', Input: 4.321e-5, Output: 4.321e-5\n      * Format: '%.4g', Input: 4.321e-5, Output: 4.3210e-5\n      * \n      * Example:\n      * >>> $.jqplot.sprintf('%.2f, %d', 23.3452, 43.23)\n      * \"23.35, 43\"\n      * >>> $.jqplot.sprintf(\"no value: %n, decimal with thousands separator: %'d\", 23.3452, 433524)\n      * \"no value: , decimal with thousands separator: 433,524\"\n      */\n    $.jqplot.sprintf = function() {\n        function pad(str, len, chr, leftJustify) {\n            var padding = (str.length >= len) ? '' : Array(1 + len - str.length >>> 0).join(chr);\n            return leftJustify ? str + padding : padding + str;\n\n        }\n\n        function thousand_separate(value) {\n            var value_str = new String(value);\n            for (var i=10; i>0; i--) {\n                if (value_str == (value_str = value_str.replace(/^(\\d+)(\\d{3})/, \"$1\"+$.jqplot.sprintf.thousandsSeparator+\"$2\"))) break;\n            }\n            return value_str; \n        }\n\n        function justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace) {\n            var diff = minWidth - value.length;\n            if (diff > 0) {\n                var spchar = ' ';\n                if (htmlSpace) { spchar = '&nbsp;'; }\n                if (leftJustify || !zeroPad) {\n                    value = pad(value, minWidth, spchar, leftJustify);\n                } else {\n                    value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);\n                }\n            }\n            return value;\n        }\n\n        function formatBaseX(value, base, prefix, leftJustify, minWidth, precision, zeroPad, htmlSpace) {\n            // Note: casts negative numbers to positive ones\n            var number = value >>> 0;\n            prefix = prefix && number && {'2': '0b', '8': '0', '16': '0x'}[base] || '';\n            value = prefix + pad(number.toString(base), precision || 0, '0', false);\n            return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);\n        }\n\n        function formatString(value, leftJustify, minWidth, precision, zeroPad, htmlSpace) {\n            if (precision != null) {\n                value = value.slice(0, precision);\n            }\n            return justify(value, '', leftJustify, minWidth, zeroPad, htmlSpace);\n        }\n\n        var a = arguments, i = 0, format = a[i++];\n\n        return format.replace($.jqplot.sprintf.regex, function(substring, valueIndex, flags, minWidth, _, precision, type) {\n            if (substring == '%%') { return '%'; }\n\n            // parse flags\n            var leftJustify = false, positivePrefix = '', zeroPad = false, prefixBaseX = false, htmlSpace = false, thousandSeparation = false;\n            for (var j = 0; flags && j < flags.length; j++) switch (flags.charAt(j)) {\n                case ' ': positivePrefix = ' '; break;\n                case '+': positivePrefix = '+'; break;\n                case '-': leftJustify = true; break;\n                case '0': zeroPad = true; break;\n                case '#': prefixBaseX = true; break;\n                case '&': htmlSpace = true; break;\n                case '\\'': thousandSeparation = true; break;\n            }\n\n            // parameters may be null, undefined, empty-string or real valued\n            // we want to ignore null, undefined and empty-string values\n\n            if (!minWidth) {\n                minWidth = 0;\n            } \n            else if (minWidth == '*') {\n                minWidth = +a[i++];\n            } \n            else if (minWidth.charAt(0) == '*') {\n                minWidth = +a[minWidth.slice(1, -1)];\n            } \n            else {\n                minWidth = +minWidth;\n            }\n\n            // Note: undocumented perl feature:\n            if (minWidth < 0) {\n                minWidth = -minWidth;\n                leftJustify = true;\n            }\n\n            if (!isFinite(minWidth)) {\n                throw new Error('$.jqplot.sprintf: (minimum-)width must be finite');\n            }\n\n            if (!precision) {\n                precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type == 'd') ? 0 : void(0);\n            } \n            else if (precision == '*') {\n                precision = +a[i++];\n            } \n            else if (precision.charAt(0) == '*') {\n                precision = +a[precision.slice(1, -1)];\n            } \n            else {\n                precision = +precision;\n            }\n\n            // grab value using valueIndex if required?\n            var value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\n\n            switch (type) {\n            case 's': {\n                if (value == null) {\n                    return '';\n                }\n                return formatString(String(value), leftJustify, minWidth, precision, zeroPad, htmlSpace);\n            }\n            case 'c': return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad, htmlSpace);\n            case 'b': return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad,htmlSpace);\n            case 'o': return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n            case 'x': return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n            case 'X': return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace).toUpperCase();\n            case 'u': return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);\n            case 'i': {\n              var number = parseInt(+value, 10);\n              if (isNaN(number)) {\n                return '';\n              }\n              var prefix = number < 0 ? '-' : positivePrefix;\n              var number_str = thousandSeparation ? thousand_separate(String(Math.abs(number))): String(Math.abs(number));\n              value = prefix + pad(number_str, precision, '0', false);\n              //value = prefix + pad(String(Math.abs(number)), precision, '0', false);\n              return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);\n                  }\n            case 'd': {\n              var number = Math.round(+value);\n              if (isNaN(number)) {\n                return '';\n              }\n              var prefix = number < 0 ? '-' : positivePrefix;\n              var number_str = thousandSeparation ? thousand_separate(String(Math.abs(number))): String(Math.abs(number));\n              value = prefix + pad(number_str, precision, '0', false);\n              return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);\n                  }\n            case 'e':\n            case 'E':\n            case 'f':\n            case 'F':\n            case 'g':\n            case 'G':\n                      {\n                      var number = +value;\n                      if (isNaN(number)) {\n                          return '';\n                      }\n                      var prefix = number < 0 ? '-' : positivePrefix;\n                      var method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\n                      var textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\n                      var number_str = Math.abs(number)[method](precision);\n                      \n                      // Apply the decimal mark properly by splitting the number by the\n                      //   decimalMark, applying thousands separator, and then placing it\n                      //   back in.\n                      var parts = number_str.toString().split('.');\n                      parts[0] = thousandSeparation ? thousand_separate(parts[0]) : parts[0];\n                      number_str = parts.join($.jqplot.sprintf.decimalMark);\n                      \n                      value = prefix + number_str;\n                      var justified = justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace)[textTransform]();\n                      \n                      return justified;\n                  }\n            case 'p':\n            case 'P':\n            {\n                // make sure number is a number\n                var number = +value;\n                if (isNaN(number)) {\n                    return '';\n                }\n                var prefix = number < 0 ? '-' : positivePrefix;\n\n                var parts = String(Number(Math.abs(number)).toExponential()).split(/e|E/);\n                var sd = (parts[0].indexOf('.') != -1) ? parts[0].length - 1 : String(number).length;\n                var zeros = (parts[1] < 0) ? -parts[1] - 1 : 0;\n                \n                if (Math.abs(number) < 1) {\n                    if (sd + zeros  <= precision) {\n                        value = prefix + Math.abs(number).toPrecision(sd);\n                    }\n                    else {\n                        if (sd  <= precision - 1) {\n                            value = prefix + Math.abs(number).toExponential(sd-1);\n                        }\n                        else {\n                            value = prefix + Math.abs(number).toExponential(precision-1);\n                        }\n                    }\n                }\n                else {\n                    var prec = (sd <= precision) ? sd : precision;\n                    value = prefix + Math.abs(number).toPrecision(prec);\n                }\n                var textTransform = ['toString', 'toUpperCase']['pP'.indexOf(type) % 2];\n                return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace)[textTransform]();\n            }\n            case 'n': return '';\n            default: return substring;\n            }\n        });\n    };\n\n    $.jqplot.sprintf.thousandsSeparator = ',';\n    // Specifies the decimal mark for floating point values. By default a period '.'\n    // is used. If you change this value to for example a comma be sure to also\n    // change the thousands separator or else this won't work since a simple String\n    // replace is used (replacing all periods with the mark specified here).\n    $.jqplot.sprintf.decimalMark = '.';\n    \n    $.jqplot.sprintf.regex = /%%|%(\\d+\\$)?([-+#0&\\' ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([nAscboxXuidfegpEGP])/g;\n\n    $.jqplot.getSignificantFigures = function(number) {\n        var parts = String(Number(Math.abs(number)).toExponential()).split(/e|E/);\n        // total significant digits\n        var sd = (parts[0].indexOf('.') != -1) ? parts[0].length - 1 : parts[0].length;\n        var zeros = (parts[1] < 0) ? -parts[1] - 1 : 0;\n        // exponent\n        var expn = parseInt(parts[1], 10);\n        // digits to the left of the decimal place\n        var dleft = (expn + 1 > 0) ? expn + 1 : 0;\n        // digits to the right of the decimal place\n        var dright = (sd <= dleft) ? 0 : sd - expn - 1;\n        return {significantDigits: sd, digitsLeft: dleft, digitsRight: dright, zeros: zeros, exponent: expn} ;\n    };\n\n    $.jqplot.getPrecision = function(number) {\n        return $.jqplot.getSignificantFigures(number).digitsRight;\n    };\n\n})(jQuery);  \n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    // class $.jqplot.TableLegendRenderer\n    // The default legend renderer for jqPlot.\n    $.jqplot.TableLegendRenderer = function(){\n        //\n    };\n    \n    $.jqplot.TableLegendRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n    };\n        \n    $.jqplot.TableLegendRenderer.prototype.addrow = function (label, color, pad, reverse) {\n        var rs = (pad) ? this.rowSpacing+'px' : '0px';\n        var tr;\n        var td;\n        var elem;\n        var div0;\n        var div1;\n        elem = document.createElement('tr');\n        tr = $(elem);\n        tr.addClass('jqplot-table-legend');\n        elem = null;\n\n        if (reverse){\n            tr.prependTo(this._elem);\n        }\n\n        else{\n            tr.appendTo(this._elem);\n        }\n\n        if (this.showSwatches) {\n            td = $(document.createElement('td'));\n            td.addClass('jqplot-table-legend jqplot-table-legend-swatch');\n            td.css({textAlign: 'center', paddingTop: rs});\n\n            div0 = $(document.createElement('div'));\n            div0.addClass('jqplot-table-legend-swatch-outline');\n            div1 = $(document.createElement('div'));\n            div1.addClass('jqplot-table-legend-swatch');\n            div1.css({backgroundColor: color, borderColor: color});\n\n            tr.append(td.append(div0.append(div1)));\n\n            // $('<td class=\"jqplot-table-legend\" style=\"text-align:center;padding-top:'+rs+';\">'+\n            // '<div><div class=\"jqplot-table-legend-swatch\" style=\"background-color:'+color+';border-color:'+color+';\"></div>'+\n            // '</div></td>').appendTo(tr);\n        }\n        if (this.showLabels) {\n            td = $(document.createElement('td'));\n            td.addClass('jqplot-table-legend jqplot-table-legend-label');\n            td.css('paddingTop', rs);\n            tr.append(td);\n\n            // elem = $('<td class=\"jqplot-table-legend\" style=\"padding-top:'+rs+';\"></td>');\n            // elem.appendTo(tr);\n            if (this.escapeHtml) {\n                td.text(label);\n            }\n            else {\n                td.html(label);\n            }\n        }\n        td = null;\n        div0 = null;\n        div1 = null;\n        tr = null;\n        elem = null;\n    };\n    \n    // called with scope of legend\n    $.jqplot.TableLegendRenderer.prototype.draw = function() {\n        if (this._elem) {\n            this._elem.emptyForce();\n            this._elem = null;\n        }\n\n        if (this.show) {\n            var series = this._series;\n            // make a table.  one line label per row.\n            var elem = document.createElement('table');\n            this._elem = $(elem);\n            this._elem.addClass('jqplot-table-legend');\n\n            var ss = {position:'absolute'};\n            if (this.background) {\n                ss['background'] = this.background;\n            }\n            if (this.border) {\n                ss['border'] = this.border;\n            }\n            if (this.fontSize) {\n                ss['fontSize'] = this.fontSize;\n            }\n            if (this.fontFamily) {\n                ss['fontFamily'] = this.fontFamily;\n            }\n            if (this.textColor) {\n                ss['textColor'] = this.textColor;\n            }\n            if (this.marginTop != null) {\n                ss['marginTop'] = this.marginTop;\n            }\n            if (this.marginBottom != null) {\n                ss['marginBottom'] = this.marginBottom;\n            }\n            if (this.marginLeft != null) {\n                ss['marginLeft'] = this.marginLeft;\n            }\n            if (this.marginRight != null) {\n                ss['marginRight'] = this.marginRight;\n            }\n            \n        \n            var pad = false, \n                reverse = false,\n                s;\n            for (var i = 0; i< series.length; i++) {\n                s = series[i];\n                if (s._stack || s.renderer.constructor == $.jqplot.BezierCurveRenderer){\n                    reverse = true;\n                }\n                if (s.show && s.showLabel) {\n                    var lt = this.labels[i] || s.label.toString();\n                    if (lt) {\n                        var color = s.color;\n                        if (reverse && i < series.length - 1){\n                            pad = true;\n                        }\n                        else if (reverse && i == series.length - 1){\n                            pad = false;\n                        }\n                        this.renderer.addrow.call(this, lt, color, pad, reverse);\n                        pad = true;\n                    }\n                    // let plugins add more rows to legend.  Used by trend line plugin.\n                    for (var j=0; j<$.jqplot.addLegendRowHooks.length; j++) {\n                        var item = $.jqplot.addLegendRowHooks[j].call(this, s);\n                        if (item) {\n                            this.renderer.addrow.call(this, item.label, item.color, pad);\n                            pad = true;\n                        } \n                    }\n                    lt = null;\n                }\n            }\n        }\n        return this._elem;\n    };\n    \n    $.jqplot.TableLegendRenderer.prototype.pack = function(offsets) {\n        if (this.show) {       \n            if (this.placement == 'insideGrid') {\n                switch (this.location) {\n                    case 'nw':\n                        var a = offsets.left;\n                        var b = offsets.top;\n                        this._elem.css('left', a);\n                        this._elem.css('top', b);\n                        break;\n                    case 'n':\n                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;\n                        var b = offsets.top;\n                        this._elem.css('left', a);\n                        this._elem.css('top', b);\n                        break;\n                    case 'ne':\n                        var a = offsets.right;\n                        var b = offsets.top;\n                        this._elem.css({right:a, top:b});\n                        break;\n                    case 'e':\n                        var a = offsets.right;\n                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;\n                        this._elem.css({right:a, top:b});\n                        break;\n                    case 'se':\n                        var a = offsets.right;\n                        var b = offsets.bottom;\n                        this._elem.css({right:a, bottom:b});\n                        break;\n                    case 's':\n                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;\n                        var b = offsets.bottom;\n                        this._elem.css({left:a, bottom:b});\n                        break;\n                    case 'sw':\n                        var a = offsets.left;\n                        var b = offsets.bottom;\n                        this._elem.css({left:a, bottom:b});\n                        break;\n                    case 'w':\n                        var a = offsets.left;\n                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;\n                        this._elem.css({left:a, top:b});\n                        break;\n                    default:  // same as 'se'\n                        var a = offsets.right;\n                        var b = offsets.bottom;\n                        this._elem.css({right:a, bottom:b});\n                        break;\n                }\n                \n            }\n            else if (this.placement == 'outside'){\n                switch (this.location) {\n                    case 'nw':\n                        var a = this._plotDimensions.width - offsets.left;\n                        var b = offsets.top;\n                        this._elem.css('right', a);\n                        this._elem.css('top', b);\n                        break;\n                    case 'n':\n                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;\n                        var b = this._plotDimensions.height - offsets.top;\n                        this._elem.css('left', a);\n                        this._elem.css('bottom', b);\n                        break;\n                    case 'ne':\n                        var a = this._plotDimensions.width - offsets.right;\n                        var b = offsets.top;\n                        this._elem.css({left:a, top:b});\n                        break;\n                    case 'e':\n                        var a = this._plotDimensions.width - offsets.right;\n                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;\n                        this._elem.css({left:a, top:b});\n                        break;\n                    case 'se':\n                        var a = this._plotDimensions.width - offsets.right;\n                        var b = offsets.bottom;\n                        this._elem.css({left:a, bottom:b});\n                        break;\n                    case 's':\n                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;\n                        var b = this._plotDimensions.height - offsets.bottom;\n                        this._elem.css({left:a, top:b});\n                        break;\n                    case 'sw':\n                        var a = this._plotDimensions.width - offsets.left;\n                        var b = offsets.bottom;\n                        this._elem.css({right:a, bottom:b});\n                        break;\n                    case 'w':\n                        var a = this._plotDimensions.width - offsets.left;\n                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;\n                        this._elem.css({right:a, top:b});\n                        break;\n                    default:  // same as 'se'\n                        var a = offsets.right;\n                        var b = offsets.bottom;\n                        this._elem.css({right:a, bottom:b});\n                        break;\n                }\n            }\n            else {\n                switch (this.location) {\n                    case 'nw':\n                        this._elem.css({left:0, top:offsets.top});\n                        break;\n                    case 'n':\n                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;\n                        this._elem.css({left: a, top:offsets.top});\n                        break;\n                    case 'ne':\n                        this._elem.css({right:0, top:offsets.top});\n                        break;\n                    case 'e':\n                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;\n                        this._elem.css({right:offsets.right, top:b});\n                        break;\n                    case 'se':\n                        this._elem.css({right:offsets.right, bottom:offsets.bottom});\n                        break;\n                    case 's':\n                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;\n                        this._elem.css({left: a, bottom:offsets.bottom});\n                        break;\n                    case 'sw':\n                        this._elem.css({left:offsets.left, bottom:offsets.bottom});\n                        break;\n                    case 'w':\n                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;\n                        this._elem.css({left:offsets.left, top:b});\n                        break;\n                    default:  // same as 'se'\n                        this._elem.css({right:offsets.right, bottom:offsets.bottom});\n                        break;\n                }\n            }\n        } \n    };\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    /**\n     * Class: $.jqplot.ThemeEngine\n     * Theme Engine provides a programatic way to change some of the  more\n     * common jqplot styling options such as fonts, colors and grid options.\n     * A theme engine instance is created with each plot.  The theme engine\n     * manages a collection of themes which can be modified, added to, or \n     * applied to the plot.\n     * \n     * The themeEngine class is not instantiated directly.\n     * When a plot is initialized, the current plot options are scanned\n     * an a default theme named \"Default\" is created.  This theme is\n     * used as the basis for other themes added to the theme engine and\n     * is always available.\n     * \n     * A theme is a simple javascript object with styling parameters for\n     * various entities of the plot.  A theme has the form:\n     * \n     * \n     * > {\n     * >     _name:f \"Default\",\n     * >     target: {\n     * >         backgroundColor: \"transparent\"\n     * >     },\n     * >     legend: {\n     * >         textColor: null,\n     * >         fontFamily: null,\n     * >         fontSize: null,\n     * >         border: null,\n     * >         background: null\n     * >     },\n     * >     title: {\n     * >         textColor: \"rgb(102, 102, 102)\",\n     * >         fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\",\n     * >         fontSize: \"19.2px\",\n     * >         textAlign: \"center\"\n     * >     },\n     * >     seriesStyles: {},\n     * >     series: [{\n     * >         color: \"#4bb2c5\",\n     * >         lineWidth: 2.5,\n     * >         linePattern: \"solid\",\n     * >         shadow: true,\n     * >         fillColor: \"#4bb2c5\",\n     * >         showMarker: true,\n     * >         markerOptions: {\n     * >             color: \"#4bb2c5\",\n     * >             show: true,\n     * >             style: 'filledCircle',\n     * >             lineWidth: 1.5,\n     * >             size: 4,\n     * >             shadow: true\n     * >         }\n     * >     }],\n     * >     grid: {\n     * >         drawGridlines: true,\n     * >         gridLineColor: \"#cccccc\",\n     * >         gridLineWidth: 1,\n     * >         backgroundColor: \"#fffdf6\",\n     * >         borderColor: \"#999999\",\n     * >         borderWidth: 2,\n     * >         shadow: true\n     * >     },\n     * >     axesStyles: {\n     * >         label: {},\n     * >         ticks: {}\n     * >     },\n     * >     axes: {\n     * >         xaxis: {\n     * >             borderColor: \"#999999\",\n     * >             borderWidth: 2,\n     * >             ticks: {\n     * >                 show: true,\n     * >                 showGridline: true,\n     * >                 showLabel: true,\n     * >                 showMark: true,\n     * >                 size: 4,\n     * >                 textColor: \"\",\n     * >                 whiteSpace: \"nowrap\",\n     * >                 fontSize: \"12px\",\n     * >                 fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\"\n     * >             },\n     * >             label: {\n     * >                 textColor: \"rgb(102, 102, 102)\",\n     * >                 whiteSpace: \"normal\",\n     * >                 fontSize: \"14.6667px\",\n     * >                 fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\",\n     * >                 fontWeight: \"400\"\n     * >             }\n     * >         },\n     * >         yaxis: {\n     * >             borderColor: \"#999999\",\n     * >             borderWidth: 2,\n     * >             ticks: {\n     * >                 show: true,\n     * >                 showGridline: true,\n     * >                 showLabel: true,\n     * >                 showMark: true,\n     * >                 size: 4,\n     * >                 textColor: \"\",\n     * >                 whiteSpace: \"nowrap\",\n     * >                 fontSize: \"12px\",\n     * >                 fontFamily: \"'Trebuchet MS',Arial,Helvetica,sans-serif\"\n     * >             },\n     * >             label: {\n     * >                 textColor: null,\n     * >                 whiteSpace: null,\n     * >                 fontSize: null,\n     * >                 fontFamily: null,\n     * >                 fontWeight: null\n     * >             }\n     * >         },\n     * >         x2axis: {...\n     * >         },\n     * >         ...\n     * >         y9axis: {...\n     * >         }\n     * >     }\n     * > }\n     * \n     * \"seriesStyles\" is a style object that will be applied to all series in the plot.\n     * It will forcibly override any styles applied on the individual series.  \"axesStyles\" is\n     * a style object that will be applied to all axes in the plot.  It will also forcibly\n     * override any styles on the individual axes.\n     * \n     * The example shown above has series options for a line series.  Options for other\n     * series types are shown below:\n     * \n     * Bar Series:\n     * \n     * > {\n     * >     color: \"#4bb2c5\",\n     * >     seriesColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n     * >     lineWidth: 2.5,\n     * >     shadow: true,\n     * >     barPadding: 2,\n     * >     barMargin: 10,\n     * >     barWidth: 15.09375,\n     * >     highlightColors: [\"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\", \"rgb(129,201,214)\"]\n     * > }\n     * \n     * Pie Series:\n     * \n     * > {\n     * >     seriesColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n     * >     padding: 20,\n     * >     sliceMargin: 0,\n     * >     fill: true,\n     * >     shadow: true,\n     * >     startAngle: 0,\n     * >     lineWidth: 2.5,\n     * >     highlightColors: [\"rgb(129,201,214)\", \"rgb(240,189,104)\", \"rgb(214,202,165)\", \"rgb(137,180,158)\", \"rgb(168,180,137)\", \"rgb(180,174,89)\", \"rgb(180,113,161)\", \"rgb(129,141,236)\", \"rgb(227,205,120)\", \"rgb(255,138,76)\", \"rgb(76,169,219)\", \"rgb(215,126,190)\", \"rgb(220,232,135)\", \"rgb(200,167,96)\", \"rgb(103,202,235)\", \"rgb(208,154,215)\"]\n     * > }\n     * \n     * Funnel Series:\n     * \n     * > {\n     * >     color: \"#4bb2c5\",\n     * >     lineWidth: 2,\n     * >     shadow: true,\n     * >     padding: {\n     * >         top: 20,\n     * >         right: 20,\n     * >         bottom: 20,\n     * >         left: 20\n     * >     },\n     * >     sectionMargin: 6,\n     * >     seriesColors: [\"#4bb2c5\", \"#EAA228\", \"#c5b47f\", \"#579575\", \"#839557\", \"#958c12\", \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\", \"#c747a3\", \"#cddf54\", \"#FBD178\", \"#26B4E3\", \"#bd70c7\"],\n     * >     highlightColors: [\"rgb(147,208,220)\", \"rgb(242,199,126)\", \"rgb(220,210,178)\", \"rgb(154,191,172)\", \"rgb(180,191,154)\", \"rgb(191,186,112)\", \"rgb(191,133,174)\", \"rgb(147,157,238)\", \"rgb(231,212,139)\", \"rgb(255,154,102)\", \"rgb(102,181,224)\", \"rgb(221,144,199)\", \"rgb(225,235,152)\", \"rgb(200,167,96)\", \"rgb(124,210,238)\", \"rgb(215,169,221)\"]\n     * > }\n     * \n     */\n    $.jqplot.ThemeEngine = function(){\n        // Group: Properties\n        //\n        // prop: themes\n        // hash of themes managed by the theme engine.  \n        // Indexed by theme name.\n        this.themes = {};\n        // prop: activeTheme\n        // Pointer to currently active theme\n        this.activeTheme=null;\n        \n    };\n    \n    // called with scope of plot\n    $.jqplot.ThemeEngine.prototype.init = function() {\n        // get the Default theme from the current plot settings.\n        var th = new $.jqplot.Theme({_name:'Default'});\n        var n, i, nn;\n        \n        for (n in th.target) {\n            if (n == \"textColor\") {\n                th.target[n] = this.target.css('color');\n            }\n            else {\n                th.target[n] = this.target.css(n);\n            }\n        }\n        \n        if (this.title.show && this.title._elem) {\n            for (n in th.title) {\n                if (n == \"textColor\") {\n                    th.title[n] = this.title._elem.css('color');\n                }\n                else {\n                    th.title[n] = this.title._elem.css(n);\n                }\n            }\n        }\n        \n        for (n in th.grid) {\n            th.grid[n] = this.grid[n];\n        }\n        if (th.grid.backgroundColor == null && this.grid.background != null) {\n            th.grid.backgroundColor = this.grid.background;\n        }\n        if (this.legend.show && this.legend._elem) {\n            for (n in th.legend) {\n                if (n == 'textColor') {\n                    th.legend[n] = this.legend._elem.css('color');\n                }\n                else {\n                    th.legend[n] = this.legend._elem.css(n);\n                }\n            }\n        }\n        var s;\n        \n        for (i=0; i<this.series.length; i++) {\n            s = this.series[i];\n            if (s.renderer.constructor == $.jqplot.LineRenderer) {\n                th.series.push(new LineSeriesProperties());\n            }\n            else if (s.renderer.constructor == $.jqplot.BarRenderer) {\n                th.series.push(new BarSeriesProperties());\n            }\n            else if (s.renderer.constructor == $.jqplot.PieRenderer) {\n                th.series.push(new PieSeriesProperties());\n            }\n            else if (s.renderer.constructor == $.jqplot.DonutRenderer) {\n                th.series.push(new DonutSeriesProperties());\n            }\n            else if (s.renderer.constructor == $.jqplot.FunnelRenderer) {\n                th.series.push(new FunnelSeriesProperties());\n            }\n            else if (s.renderer.constructor == $.jqplot.MeterGaugeRenderer) {\n                th.series.push(new MeterSeriesProperties());\n            }\n            else {\n                th.series.push({});\n            }\n            for (n in th.series[i]) {\n                th.series[i][n] = s[n];\n            }\n        }\n        var a, ax;\n        for (n in this.axes) {\n            ax = this.axes[n];\n            a = th.axes[n] = new AxisProperties();\n            a.borderColor = ax.borderColor;\n            a.borderWidth = ax.borderWidth;\n            if (ax._ticks && ax._ticks[0]) {\n                for (nn in a.ticks) {\n                    if (ax._ticks[0].hasOwnProperty(nn)) {\n                        a.ticks[nn] = ax._ticks[0][nn];\n                    }\n                    else if (ax._ticks[0]._elem){\n                        a.ticks[nn] = ax._ticks[0]._elem.css(nn);\n                    }\n                }\n            }\n            if (ax._label && ax._label.show) {\n                for (nn in a.label) {\n                    // a.label[nn] = ax._label._elem.css(nn);\n                    if (ax._label[nn]) {\n                        a.label[nn] = ax._label[nn];\n                    }\n                    else if (ax._label._elem){\n                        if (nn == 'textColor') {\n                            a.label[nn] = ax._label._elem.css('color');\n                        }\n                        else {\n                            a.label[nn] = ax._label._elem.css(nn);\n                        }\n                    }\n                }\n            }\n        }\n        this.themeEngine._add(th);\n        this.themeEngine.activeTheme  = this.themeEngine.themes[th._name];\n    };\n    /**\n     * Group: methods\n     * \n     * method: get\n     * \n     * Get and return the named theme or the active theme if no name given.\n     * \n     * parameter:\n     * \n     * name - name of theme to get.\n     * \n     * returns:\n     * \n     * Theme instance of given name.\n     */   \n    $.jqplot.ThemeEngine.prototype.get = function(name) {\n        if (!name) {\n            // return the active theme\n            return this.activeTheme;\n        }\n        else {\n            return this.themes[name];\n        }\n    };\n    \n    function numericalOrder(a,b) { return a-b; }\n    \n    /**\n     * method: getThemeNames\n     * \n     * Return the list of theme names in this manager in alpha-numerical order.\n     * \n     * parameter:\n     * \n     * None\n     * \n     * returns:\n     * \n     * A the list of theme names in this manager in alpha-numerical order.\n     */       \n    $.jqplot.ThemeEngine.prototype.getThemeNames = function() {\n        var tn = [];\n        for (var n in this.themes) {\n            tn.push(n);\n        }\n        return tn.sort(numericalOrder);\n    };\n\n    /**\n     * method: getThemes\n     * \n     * Return a list of themes in alpha-numerical order by name.\n     * \n     * parameter:\n     * \n     * None\n     * \n     * returns:\n     * \n     * A list of themes in alpha-numerical order by name.\n     */ \n    $.jqplot.ThemeEngine.prototype.getThemes = function() {\n        var tn = [];\n        var themes = [];\n        for (var n in this.themes) {\n            tn.push(n);\n        }\n        tn.sort(numericalOrder);\n        for (var i=0; i<tn.length; i++) {\n            themes.push(this.themes[tn[i]]);\n        }\n        return themes;\n    };\n    \n    $.jqplot.ThemeEngine.prototype.activate = function(plot, name) {\n        // sometimes need to redraw whole plot.\n        var redrawPlot = false;\n        if (!name && this.activeTheme && this.activeTheme._name) {\n            name = this.activeTheme._name;\n        }\n        if (!this.themes.hasOwnProperty(name)) {\n            throw new Error(\"No theme of that name\");\n        }\n        else {\n            var th = this.themes[name];\n            this.activeTheme = th;\n            var val, checkBorderColor = false, checkBorderWidth = false;\n            var arr = ['xaxis', 'x2axis', 'yaxis', 'y2axis'];\n            \n            for (i=0; i<arr.length; i++) {\n                var ax = arr[i];\n                if (th.axesStyles.borderColor != null) {\n                    plot.axes[ax].borderColor = th.axesStyles.borderColor;\n                }\n                if (th.axesStyles.borderWidth != null) {\n                    plot.axes[ax].borderWidth = th.axesStyles.borderWidth;\n                }\n            }\n            \n            for (var axname in plot.axes) {\n                var axis = plot.axes[axname];\n                if (axis.show) {\n                    var thaxis = th.axes[axname] || {};\n                    var thaxstyle = th.axesStyles;\n                    var thax = $.jqplot.extend(true, {}, thaxis, thaxstyle);\n                    val = (th.axesStyles.borderColor != null) ? th.axesStyles.borderColor : thax.borderColor;\n                    if (thax.borderColor != null) {\n                        axis.borderColor = thax.borderColor;\n                        redrawPlot = true;\n                    }\n                    val = (th.axesStyles.borderWidth != null) ? th.axesStyles.borderWidth : thax.borderWidth;\n                    if (thax.borderWidth != null) {\n                        axis.borderWidth = thax.borderWidth;\n                        redrawPlot = true;\n                    }\n                    if (axis._ticks && axis._ticks[0]) {\n                        for (var nn in thax.ticks) {\n                            // val = null;\n                            // if (th.axesStyles.ticks && th.axesStyles.ticks[nn] != null) {\n                            //     val = th.axesStyles.ticks[nn];\n                            // }\n                            // else if (thax.ticks[nn] != null){\n                            //     val = thax.ticks[nn]\n                            // }\n                            val = thax.ticks[nn];\n                            if (val != null) {\n                                axis.tickOptions[nn] = val;\n                                axis._ticks = [];\n                                redrawPlot = true;\n                            }\n                        }\n                    }\n                    if (axis._label && axis._label.show) {\n                        for (var nn in thax.label) {\n                            // val = null;\n                            // if (th.axesStyles.label && th.axesStyles.label[nn] != null) {\n                            //     val = th.axesStyles.label[nn];\n                            // }\n                            // else if (thax.label && thax.label[nn] != null){\n                            //     val = thax.label[nn]\n                            // }\n                            val = thax.label[nn];\n                            if (val != null) {\n                                axis.labelOptions[nn] = val;\n                                redrawPlot = true;\n                            }\n                        }\n                    }\n                    \n                }\n            }            \n            \n            for (var n in th.grid) {\n                if (th.grid[n] != null) {\n                    plot.grid[n] = th.grid[n];\n                }\n            }\n            if (!redrawPlot) {\n                plot.grid.draw();\n            }\n            \n            if (plot.legend.show) { \n                for (n in th.legend) {\n                    if (th.legend[n] != null) {\n                        plot.legend[n] = th.legend[n];\n                    }\n                }\n            }\n            if (plot.title.show) {\n                for (n in th.title) {\n                    if (th.title[n] != null) {\n                        plot.title[n] = th.title[n];\n                    }\n                }\n            }\n            \n            var i;\n            for (i=0; i<th.series.length; i++) {\n                var opts = {};\n                var redrawSeries = false;\n                for (n in th.series[i]) {\n                    val = (th.seriesStyles[n] != null) ? th.seriesStyles[n] : th.series[i][n];\n                    if (val != null) {\n                        opts[n] = val;\n                        if (n == 'color') {\n                            plot.series[i].renderer.shapeRenderer.fillStyle = val;\n                            plot.series[i].renderer.shapeRenderer.strokeStyle = val;\n                            plot.series[i][n] = val;\n                        }\n                        else if ((n == 'lineWidth') || (n == 'linePattern')) {\n                            plot.series[i].renderer.shapeRenderer[n] = val;\n                            plot.series[i][n] = val;\n                        }\n                        else if (n == 'markerOptions') {\n                            merge (plot.series[i].markerOptions, val);\n                            merge (plot.series[i].markerRenderer, val);\n                        }\n                        else {\n                            plot.series[i][n] = val;\n                        }\n                        redrawPlot = true;\n                    }\n                }\n            }\n            \n            if (redrawPlot) {\n                plot.target.empty();\n                plot.draw();\n            }\n            \n            for (n in th.target) {\n                if (th.target[n] != null) {\n                    plot.target.css(n, th.target[n]);\n                }\n            }\n        }\n        \n    };\n    \n    $.jqplot.ThemeEngine.prototype._add = function(theme, name) {\n        if (name) {\n            theme._name = name;\n        }\n        if (!theme._name) {\n            theme._name = Date.parse(new Date());\n        }\n        if (!this.themes.hasOwnProperty(theme._name)) {\n            this.themes[theme._name] = theme;\n        }\n        else {\n            throw new Error(\"jqplot.ThemeEngine Error: Theme already in use\");\n        }\n    };\n    \n    // method remove\n    // Delete the named theme, return true on success, false on failure.\n    \n\n    /**\n     * method: remove\n     * \n     * Remove the given theme from the themeEngine.\n     * \n     * parameters:\n     * \n     * name - name of the theme to remove.\n     * \n     * returns:\n     * \n     * true on success, false on failure.\n     */\n    $.jqplot.ThemeEngine.prototype.remove = function(name) {\n        if (name == 'Default') {\n            return false;\n        }\n        return delete this.themes[name];\n    };\n\n    /**\n     * method: newTheme\n     * \n     * Create a new theme based on the default theme, adding it the themeEngine.\n     * \n     * parameters:\n     * \n     * name - name of the new theme.\n     * obj - optional object of styles to be applied to this new theme.\n     * \n     * returns:\n     * \n     * new Theme object.\n     */\n    $.jqplot.ThemeEngine.prototype.newTheme = function(name, obj) {\n        if (typeof(name) == 'object') {\n            obj = obj || name;\n            name = null;\n        }\n        if (obj && obj._name) {\n            name = obj._name;\n        }\n        else {\n            name = name || Date.parse(new Date());\n        }\n        // var th = new $.jqplot.Theme(name);\n        var th = this.copy(this.themes['Default']._name, name);\n        $.jqplot.extend(th, obj);\n        return th;\n    };\n    \n    // function clone(obj) {\n    //     return eval(obj.toSource());\n    // }\n    \n    function clone(obj){\n        if(obj == null || typeof(obj) != 'object'){\n            return obj;\n        }\n    \n        var temp = new obj.constructor();\n        for(var key in obj){\n            temp[key] = clone(obj[key]);\n        }   \n        return temp;\n    }\n    \n    $.jqplot.clone = clone;\n    \n    function merge(obj1, obj2) {\n        if (obj2 ==  null || typeof(obj2) != 'object') {\n            return;\n        }\n        for (var key in obj2) {\n            if (key == 'highlightColors') {\n                obj1[key] = clone(obj2[key]);\n            }\n            if (obj2[key] != null && typeof(obj2[key]) == 'object') {\n                if (!obj1.hasOwnProperty(key)) {\n                    obj1[key] = {};\n                }\n                merge(obj1[key], obj2[key]);\n            }\n            else {\n                obj1[key] = obj2[key];\n            }\n        }\n    }\n    \n    $.jqplot.merge = merge;\n    \n        // Use the jQuery 1.3.2 extend function since behaviour in jQuery 1.4 seems problematic\n    $.jqplot.extend = function() {\n        // copy reference to target object\n        var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;\n\n        // Handle a deep copy situation\n        if ( typeof target === \"boolean\" ) {\n            deep = target;\n            target = arguments[1] || {};\n            // skip the boolean and the target\n            i = 2;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if ( typeof target !== \"object\" && !toString.call(target) === \"[object Function]\" ) {\n            target = {};\n        }\n\n        for ( ; i < length; i++ ){\n            // Only deal with non-null/undefined values\n            if ( (options = arguments[ i ]) != null ) {\n                // Extend the base object\n                for ( var name in options ) {\n                    var src = target[ name ], copy = options[ name ];\n\n                    // Prevent never-ending loop\n                    if ( target === copy ) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging object values\n                    if ( deep && copy && typeof copy === \"object\" && !copy.nodeType ) {\n                        target[ name ] = $.jqplot.extend( deep, \n                            // Never move original objects, clone them\n                            src || ( copy.length != null ? [ ] : { } )\n                        , copy );\n                    }\n                    // Don't bring in undefined values\n                    else if ( copy !== undefined ) {\n                        target[ name ] = copy;\n                    }\n                }\n            }\n        }\n        // Return the modified object\n        return target;\n    };\n\n    /**\n     * method: rename\n     * \n     * Rename a theme.\n     * \n     * parameters:\n     * \n     * oldName - current name of the theme.\n     * newName - desired name of the theme.\n     * \n     * returns:\n     * \n     * new Theme object.\n     */\n    $.jqplot.ThemeEngine.prototype.rename = function (oldName, newName) {\n        if (oldName == 'Default' || newName == 'Default') {\n            throw new Error (\"jqplot.ThemeEngine Error: Cannot rename from/to Default\");\n        }\n        if (this.themes.hasOwnProperty(newName)) {\n            throw new Error (\"jqplot.ThemeEngine Error: New name already in use.\");\n        }\n        else if (this.themes.hasOwnProperty(oldName)) {\n            var th = this.copy (oldName, newName);\n            this.remove(oldName);\n            return th;\n        }\n        throw new Error(\"jqplot.ThemeEngine Error: Old name or new name invalid\");\n    };\n\n    /**\n     * method: copy\n     * \n     * Create a copy of an existing theme in the themeEngine, adding it the themeEngine.\n     * \n     * parameters:\n     * \n     * sourceName - name of the existing theme.\n     * targetName - name of the copy.\n     * obj - optional object of style parameter to apply to the new theme.\n     * \n     * returns:\n     * \n     * new Theme object.\n     */\n    $.jqplot.ThemeEngine.prototype.copy = function (sourceName, targetName, obj) {\n        if (targetName == 'Default') {\n            throw new Error (\"jqplot.ThemeEngine Error: Cannot copy over Default theme\");\n        }\n        if (!this.themes.hasOwnProperty(sourceName)) {\n            var s = \"jqplot.ThemeEngine Error: Source name invalid\";\n            throw new Error(s);\n        }\n        if (this.themes.hasOwnProperty(targetName)) {\n            var s = \"jqplot.ThemeEngine Error: Target name invalid\";\n            throw new Error(s);\n        }\n        else {\n            var th = clone(this.themes[sourceName]);\n            th._name = targetName;\n            $.jqplot.extend(true, th, obj);\n            this._add(th);\n            return th;\n        }\n    };\n    \n    \n    $.jqplot.Theme = function(name, obj) {\n        if (typeof(name) == 'object') {\n            obj = obj || name;\n            name = null;\n        }\n        name = name || Date.parse(new Date());\n        this._name = name;\n        this.target = {\n            backgroundColor: null\n        };\n        this.legend = {\n            textColor: null,\n            fontFamily: null,\n            fontSize: null,\n            border: null,\n            background: null\n        };\n        this.title = {\n            textColor: null,\n            fontFamily: null,\n            fontSize: null,\n            textAlign: null\n        };\n        this.seriesStyles = {};\n        this.series = [];\n        this.grid = {\n            drawGridlines: null,\n            gridLineColor: null,\n            gridLineWidth: null,\n            backgroundColor: null,\n            borderColor: null,\n            borderWidth: null,\n            shadow: null\n        };\n        this.axesStyles = {label:{}, ticks:{}};\n        this.axes = {};\n        if (typeof(obj) == 'string') {\n            this._name = obj;\n        }\n        else if(typeof(obj) == 'object') {\n            $.jqplot.extend(true, this, obj);\n        }\n    };\n    \n    var AxisProperties = function() {\n        this.borderColor = null;\n        this.borderWidth = null;\n        this.ticks = new AxisTicks();\n        this.label = new AxisLabel();\n    };\n    \n    var AxisTicks = function() {\n        this.show = null;\n        this.showGridline = null;\n        this.showLabel = null;\n        this.showMark = null;\n        this.size = null;\n        this.textColor = null;\n        this.whiteSpace = null;\n        this.fontSize = null;\n        this.fontFamily = null;\n    };\n    \n    var AxisLabel = function() {\n        this.textColor = null;\n        this.whiteSpace = null;\n        this.fontSize = null;\n        this.fontFamily = null;\n        this.fontWeight = null;\n    };\n    \n    var LineSeriesProperties = function() {\n        this.color=null;\n        this.lineWidth=null;\n        this.linePattern=null;\n        this.shadow=null;\n        this.fillColor=null;\n        this.showMarker=null;\n        this.markerOptions = new MarkerOptions();\n    };\n    \n    var MarkerOptions = function() {\n        this.show = null;\n        this.style = null;\n        this.lineWidth = null;\n        this.size = null;\n        this.color = null;\n        this.shadow = null;\n    };\n    \n    var BarSeriesProperties = function() {\n        this.color=null;\n        this.seriesColors=null;\n        this.lineWidth=null;\n        this.shadow=null;\n        this.barPadding=null;\n        this.barMargin=null;\n        this.barWidth=null;\n        this.highlightColors=null;\n    };\n    \n    var PieSeriesProperties = function() {\n        this.seriesColors=null;\n        this.padding=null;\n        this.sliceMargin=null;\n        this.fill=null;\n        this.shadow=null;\n        this.startAngle=null;\n        this.lineWidth=null;\n        this.highlightColors=null;\n    };\n    \n    var DonutSeriesProperties = function() {\n        this.seriesColors=null;\n        this.padding=null;\n        this.sliceMargin=null;\n        this.fill=null;\n        this.shadow=null;\n        this.startAngle=null;\n        this.lineWidth=null;\n        this.innerDiameter=null;\n        this.thickness=null;\n        this.ringMargin=null;\n        this.highlightColors=null;\n    };\n    \n    var FunnelSeriesProperties = function() {\n        this.color=null;\n        this.lineWidth=null;\n        this.shadow=null;\n        this.padding=null;\n        this.sectionMargin=null;\n        this.seriesColors=null;\n        this.highlightColors=null;\n    };\n    \n    var MeterSeriesProperties = function() {\n        this.padding=null;\n        this.backgroundColor=null;\n        this.ringColor=null;\n        this.tickColor=null;\n        this.ringWidth=null;\n        this.intervalColors=null;\n        this.intervalInnerRadius=null;\n        this.intervalOuterRadius=null;\n        this.hubRadius=null;\n        this.needleThickness=null;\n        this.needlePad=null;\n    };\n        \n\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n *\n * jsDate library by Chris Leonello:\n *\n * Copyright (c) 2010-2015 Chris Leonello\n *\n * jsDate is currently available for use in all personal or commercial projects \n * under both the MIT and GPL version 2.0 licenses. This means that you can \n * choose the license that best suits your project and use it accordingly.\n *\n * jsDate borrows many concepts and ideas from the Date Instance \n * Methods by Ken Snyder along with some parts of Ken's actual code.\n * Ken has generously given permission to adapt his code and release\n * under the MIT and GPL V2 licenses.\n * \n * Ken's original Date Instance Methods and copyright notice:\n * \n * Ken Snyder (ken d snyder at gmail dot com)\n * 2008-09-10\n * version 2.0.2 (http://kendsnyder.com/sandbox/date/)     \n * Creative Commons Attribution License 3.0 (http://creativecommons.org/licenses/by/3.0/)\n *\n * jqplotToImage function based on Larry Siden's export-jqplot-to-png.js.\n * Larry has generously given permission to adapt his code for inclusion\n * into jqPlot.\n *\n * Larry's original code can be found here:\n *\n * https://github.com/lsiden/export-jqplot-to-png\n * \n * \n */\n\n(function($) {\n\n    $.fn.jqplotChildText = function() {\n        return $(this).contents().filter(function() {\n            return this.nodeType == 3;  // Node.TEXT_NODE not defined in I7\n        }).text();\n    };\n\n    // Returns font style as abbreviation for \"font\" property.\n    $.fn.jqplotGetComputedFontStyle = function() {\n        var css = window.getComputedStyle ?  window.getComputedStyle(this[0], \"\") : this[0].currentStyle;\n        var attrs = css['font-style'] ? ['font-style', 'font-weight', 'font-size', 'font-family'] : ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily'];\n        var style = [];\n\n        for (var i=0 ; i < attrs.length; ++i) {\n            var attr = String(css[attrs[i]]);\n\n            if (attr && attr != 'normal') {\n                style.push(attr);\n            }\n        }\n        return style.join(' ');\n    };\n\n    /**\n     * Namespace: $.fn\n     * jQuery namespace to attach functions to jQuery elements.\n     *  \n     */\n\n    $.fn.jqplotToImageCanvas = function(options) {\n\n        options = options || {};\n        var x_offset = (options.x_offset == null) ? 0 : options.x_offset;\n        var y_offset = (options.y_offset == null) ? 0 : options.y_offset;\n        var backgroundColor = (options.backgroundColor == null) ? 'rgb(255,255,255)' : options.backgroundColor;\n\n        if ($(this).width() == 0 || $(this).height() == 0) {\n            return null;\n        }\n\n        // excanvas and hence IE < 9 do not support toDataURL and cannot export images.\n        if ($.jqplot.use_excanvas) {\n            return null;\n        }\n        \n        var newCanvas = document.createElement(\"canvas\");\n        var h = $(this).outerHeight(true);\n        var w = $(this).outerWidth(true);\n        var offs = $(this).offset();\n        var plotleft = offs.left;\n        var plottop = offs.top;\n        var transx = 0, transy = 0;\n\n        // have to check if any elements are hanging outside of plot area before rendering,\n        // since changing width of canvas will erase canvas.\n\n        var clses = ['jqplot-table-legend', 'jqplot-xaxis-tick', 'jqplot-x2axis-tick', 'jqplot-yaxis-tick', 'jqplot-y2axis-tick', 'jqplot-y3axis-tick', \n        'jqplot-y4axis-tick', 'jqplot-y5axis-tick', 'jqplot-y6axis-tick', 'jqplot-y7axis-tick', 'jqplot-y8axis-tick', 'jqplot-y9axis-tick',\n        'jqplot-xaxis-label', 'jqplot-x2axis-label', 'jqplot-yaxis-label', 'jqplot-y2axis-label', 'jqplot-y3axis-label', 'jqplot-y4axis-label', \n        'jqplot-y5axis-label', 'jqplot-y6axis-label', 'jqplot-y7axis-label', 'jqplot-y8axis-label', 'jqplot-y9axis-label' ];\n\n        var temptop, templeft, tempbottom, tempright;\n\n        for (var i = 0; i < clses.length; i++) {\n            $(this).find('.'+clses[i]).each(function() {\n                temptop = $(this).offset().top - plottop;\n                templeft = $(this).offset().left - plotleft;\n                tempright = templeft + $(this).outerWidth(true) + transx;\n                tempbottom = temptop + $(this).outerHeight(true) + transy;\n                if (templeft < -transx) {\n                    w = w - transx - templeft;\n                    transx = -templeft;\n                }\n                if (temptop < -transy) {\n                    h = h - transy - temptop;\n                    transy = - temptop;\n                }\n                if (tempright > w) {\n                    w = tempright;\n                }\n                if (tempbottom > h) {\n                    h =  tempbottom;\n                }\n            });\n        }\n\n        newCanvas.width = w + Number(x_offset);\n        newCanvas.height = h + Number(y_offset);\n\n        var newContext = newCanvas.getContext(\"2d\"); \n\n        newContext.save();\n        newContext.fillStyle = backgroundColor;\n        newContext.fillRect(0,0, newCanvas.width, newCanvas.height);\n        newContext.restore();\n\n        newContext.translate(transx, transy);\n        newContext.textAlign = 'left';\n        newContext.textBaseline = 'top';\n\n        function getLineheight(el) {\n            var lineheight = parseInt($(el).css('line-height'), 10);\n\n            if (isNaN(lineheight)) {\n                lineheight = parseInt($(el).css('font-size'), 10) * 1.2;\n            }\n            return lineheight;\n        }\n\n        function writeWrappedText (el, context, text, left, top, canvasWidth) {\n            var lineheight = getLineheight(el);\n            var tagwidth = $(el).innerWidth();\n            var tagheight = $(el).innerHeight();\n            var words = text.split(/\\s+/);\n            var wl = words.length;\n            var w = '';\n            var breaks = [];\n            var temptop = top;\n            var templeft = left;\n\n            for (var i=0; i<wl; i++) {\n                w += words[i];\n                if (context.measureText(w).width > tagwidth && w.length > words[i].length) {\n                    breaks.push(i);\n                    w = '';\n                    i--;\n                }   \n            }\n            if (breaks.length === 0) {\n                // center text if necessary\n                if ($(el).css('textAlign') === 'center') {\n                    templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;\n                }\n                context.fillText(text, templeft, top);\n            }\n            else {\n                w = words.slice(0, breaks[0]).join(' ');\n                // center text if necessary\n                if ($(el).css('textAlign') === 'center') {\n                    templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;\n                }\n                context.fillText(w, templeft, temptop);\n                temptop += lineheight;\n                for (var i=1, l=breaks.length; i<l; i++) {\n                    w = words.slice(breaks[i-1], breaks[i]).join(' ');\n                    // center text if necessary\n                    if ($(el).css('textAlign') === 'center') {\n                        templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;\n                    }\n                    context.fillText(w, templeft, temptop);\n                    temptop += lineheight;\n                }\n                w = words.slice(breaks[i-1], words.length).join(' ');\n                // center text if necessary\n                if ($(el).css('textAlign') === 'center') {\n                    templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;\n                }\n                context.fillText(w, templeft, temptop);\n            }\n\n        }\n\n        function _jqpToImage(el, x_offset, y_offset) {\n            var tagname = el.tagName.toLowerCase();\n            var p = $(el).position();\n            var css = window.getComputedStyle ?  window.getComputedStyle(el, \"\") : el.currentStyle; // for IE < 9\n            var left = x_offset + p.left + parseInt(css.marginLeft, 10) + parseInt(css.borderLeftWidth, 10) + parseInt(css.paddingLeft, 10);\n            var top = y_offset + p.top + parseInt(css.marginTop, 10) + parseInt(css.borderTopWidth, 10)+ parseInt(css.paddingTop, 10);\n            var w = newCanvas.width;\n            // var left = x_offset + p.left + $(el).css('marginLeft') + $(el).css('borderLeftWidth') \n\n            // somehow in here, for divs within divs, the width of the inner div should be used instead of the canvas.\n\n            if ((tagname == 'div' || tagname == 'span') && !$(el).hasClass('jqplot-highlighter-tooltip')) {\n                $(el).children().each(function() {\n                    _jqpToImage(this, left, top);\n                });\n                var text = $(el).jqplotChildText();\n\n                if (text) {\n                    newContext.font = $(el).jqplotGetComputedFontStyle();\n                    newContext.fillStyle = $(el).css('color');\n\n                    writeWrappedText(el, newContext, text, left, top, w);\n                }\n            }\n\n            // handle the standard table legend\n\n            else if (tagname === 'table' && $(el).hasClass('jqplot-table-legend')) {\n                newContext.strokeStyle = $(el).css('border-top-color');\n                newContext.fillStyle = $(el).css('background-color');\n                newContext.fillRect(left, top, $(el).innerWidth(), $(el).innerHeight());\n                if (parseInt($(el).css('border-top-width'), 10) > 0) {\n                    newContext.strokeRect(left, top, $(el).innerWidth(), $(el).innerHeight());\n                }\n\n                // find all the swatches\n                $(el).find('div.jqplot-table-legend-swatch-outline').each(function() {\n                    // get the first div and stroke it\n                    var elem = $(this);\n                    newContext.strokeStyle = elem.css('border-top-color');\n                    var l = left + elem.position().left;\n                    var t = top + elem.position().top;\n                    newContext.strokeRect(l, t, elem.innerWidth(), elem.innerHeight());\n\n                    // now fill the swatch\n                    \n                    l += parseInt(elem.css('padding-left'), 10);\n                    t += parseInt(elem.css('padding-top'), 10);\n                    var h = elem.innerHeight() - 2 * parseInt(elem.css('padding-top'), 10);\n                    var w = elem.innerWidth() - 2 * parseInt(elem.css('padding-left'), 10);\n\n                    var swatch = elem.children('div.jqplot-table-legend-swatch');\n                    newContext.fillStyle = swatch.css('background-color');\n                    newContext.fillRect(l, t, w, h);\n                });\n\n                // now add text\n\n                $(el).find('td.jqplot-table-legend-label').each(function(){\n                    var elem = $(this);\n                    var l = left + elem.position().left;\n                    var t = top + elem.position().top + parseInt(elem.css('padding-top'), 10);\n                    newContext.font = elem.jqplotGetComputedFontStyle();\n                    newContext.fillStyle = elem.css('color');\n                    writeWrappedText(elem, newContext, elem.text(), l, t, w);\n                });\n\n                var elem = null;\n            }\n\n            else if (tagname == 'canvas') {\n                newContext.drawImage(el, left, top);\n            }\n        }\n        $(this).children().each(function() {\n            _jqpToImage(this, x_offset, y_offset);\n        });\n        return newCanvas;\n    };\n\n    // return the raw image data string.\n    // Should work on canvas supporting browsers.\n    $.fn.jqplotToImageStr = function(options) {\n        var imgCanvas = $(this).jqplotToImageCanvas(options);\n        if (imgCanvas) {\n            return imgCanvas.toDataURL(\"image/png\");\n        }\n        else {\n            return null;\n        }\n    };\n\n    // return a DOM <img> element and return it.\n    // Should work on canvas supporting browsers.\n    $.fn.jqplotToImageElem = function(options) {\n        var elem = document.createElement(\"img\");\n        var str = $(this).jqplotToImageStr(options);\n        elem.src = str;\n        return elem;\n    };\n\n    // return a string for an <img> element and return it.\n    // Should work on canvas supporting browsers.\n    $.fn.jqplotToImageElemStr = function(options) {\n        var str = '<img src='+$(this).jqplotToImageStr(options)+' />';\n        return str;\n    };\n\n    // Not guaranteed to work, even on canvas supporting browsers due to \n    // limitations with location.href and browser support.\n    $.fn.jqplotSaveImage = function() {\n        var imgData = $(this).jqplotToImageStr({});\n        if (imgData) {\n            window.location.href = imgData.replace(\"image/png\", \"image/octet-stream\");\n        }\n\n    };\n\n    // Not guaranteed to work, even on canvas supporting browsers due to\n    // limitations with window.open and arbitrary data.\n    $.fn.jqplotViewImage = function() {\n        var imgStr = $(this).jqplotToImageElemStr({});\n        var imgData = $(this).jqplotToImageStr({});\n        if (imgStr) {\n            var w = window.open('');\n            w.document.open(\"image/png\");\n            w.document.write(imgStr);\n            w.document.close();\n            w = null;\n        }\n    };\n    \n})(jQuery);\n","// removed by extract-text-webpack-plugin","﻿\n/**\n * @fileOverview Date parsing and formatting operations without extending the Date built-in object.\n * @author Chris Leonello\n * @version #VERSION#\n * @date #DATE#\n */\n \n(function($) {\n\n    /** \n     * @description\n     * <p>Object with extended date parsing and formatting capabilities.\n     * This library borrows many concepts and ideas from the Date Instance \n     * Methods by Ken Snyder along with some parts of Ken's actual code.</p>\n     *\n     * <p>jsDate takes a different approach by not extending the built-in \n     * Date Object, improving date parsing, allowing for multiple formatting \n     * syntaxes and multiple and more easily expandable localization.</p>\n     * \n     * @author Chris Leonello\n     * @date #date#\n     * @version #VERSION#\n     * @copyright (c) 2010-2015 Chris Leonello\n     * jsDate is currently available for use in all personal or commercial projects \n     * under both the MIT and GPL version 2.0 licenses. This means that you can \n     * choose the license that best suits your project and use it accordingly.\n     * \n     * <p>Ken's original Date Instance Methods and copyright notice:</p>\n     * <pre>\n     * Ken Snyder (ken d snyder at gmail dot com)\n     * 2008-09-10\n     * version 2.0.2 (http://kendsnyder.com/sandbox/date/)     \n     * Creative Commons Attribution License 3.0 (http://creativecommons.org/licenses/by/3.0/)\n     * </pre>\n     * \n     * @class\n     * @name jsDate\n     * @param  {String | Number | Array | Date&nbsp;Object | Options&nbsp;Object} arguments Optional arguments, either a parsable date/time string,\n     * a JavaScript timestamp, an array of numbers of form [year, month, day, hours, minutes, seconds, milliseconds],\n     * a Date object, or an options object of form {syntax: \"perl\", date:some Date} where all options are optional.\n     */\n     \n    var jsDate = function () {\n    \n        this.syntax = jsDate.config.syntax;\n        this._type = \"jsDate\";\n        this.proxy = new Date();\n        this.options = {};\n        this.locale = jsDate.regional.getLocale();\n        this.formatString = '';\n        this.defaultCentury = jsDate.config.defaultCentury;\n\n        switch ( arguments.length ) {\n            case 0:\n                break;\n            case 1:\n                // other objects either won't have a _type property or,\n                // if they do, it shouldn't be set to \"jsDate\", so\n                // assume it is an options argument.\n                if (get_type(arguments[0]) == \"[object Object]\" && arguments[0]._type != \"jsDate\") {\n                    var opts = this.options = arguments[0];\n                    this.syntax = opts.syntax || this.syntax;\n                    this.defaultCentury = opts.defaultCentury || this.defaultCentury;\n                    this.proxy = jsDate.createDate(opts.date);\n                }\n                else {\n                    this.proxy = jsDate.createDate(arguments[0]);\n                }\n                break;\n            default:\n                var a = [];\n                for ( var i=0; i<arguments.length; i++ ) {\n                    a.push(arguments[i]);\n                }\n                // this should be the current date/time?\n                this.proxy = new Date();\n                this.proxy.setFullYear.apply( this.proxy, a.slice(0,3) );\n                if ( a.slice(3).length ) {\n                    this.proxy.setHours.apply( this.proxy, a.slice(3) );\n                }\n                break;\n        }\n    };\n    \n    /**\n     * @namespace Configuration options that will be used as defaults for all instances on the page.\n     * @property {String} defaultLocale The default locale to use [en].\n     * @property {String} syntax The default syntax to use [perl].\n     * @property {Number} defaultCentury The default centry for 2 digit dates.\n     */\n    jsDate.config = {\n        defaultLocale: 'en',\n        syntax: 'perl',\n        defaultCentury: 1900\n    };\n        \n    /**\n     * Add an arbitrary amount to the currently stored date\n     * \n     * @param {Number} number      \n     * @param {String} unit\n     * @returns {jsDate}       \n     */\n     \n    jsDate.prototype.add = function(number, unit) {\n        var factor = multipliers[unit] || multipliers.day;\n        if (typeof factor == 'number') {\n            this.proxy.setTime(this.proxy.getTime() + (factor * number));\n        } else {\n            factor.add(this, number);\n        }\n        return this;\n    };\n        \n    /**\n     * Create a new jqplot.date object with the same date\n     * \n     * @returns {jsDate}\n     */  \n     \n    jsDate.prototype.clone = function() {\n            return new jsDate(this.proxy.getTime());\n    };\n\n    /**\n     * Get the UTC TimeZone Offset of this date in milliseconds.\n     *\n     * @returns {Number}\n     */\n\n    jsDate.prototype.getUtcOffset = function() {\n        return this.proxy.getTimezoneOffset() * 60000;\n    };\n\n    /**\n     * Find the difference between this jsDate and another date.\n     * \n     * @param {String| Number| Array| jsDate&nbsp;Object| Date&nbsp;Object} dateObj\n     * @param {String} unit\n     * @param {Boolean} allowDecimal\n     * @returns {Number} Number of units difference between dates.\n     */\n     \n    jsDate.prototype.diff = function(dateObj, unit, allowDecimal) {\n        // ensure we have a Date object\n        dateObj = new jsDate(dateObj);\n        if (dateObj === null) {\n            return null;\n        }\n        // get the multiplying factor integer or factor function\n        var factor = multipliers[unit] || multipliers.day;\n        if (typeof factor == 'number') {\n            // multiply\n            var unitDiff = (this.proxy.getTime() - dateObj.proxy.getTime()) / factor;\n        } else {\n            // run function\n            var unitDiff = factor.diff(this.proxy, dateObj.proxy);\n        }\n        // if decimals are not allowed, round toward zero\n        return (allowDecimal ? unitDiff : Math[unitDiff > 0 ? 'floor' : 'ceil'](unitDiff));          \n    };\n    \n    /**\n     * Get the abbreviated name of the current week day\n     * \n     * @returns {String}\n     */   \n     \n    jsDate.prototype.getAbbrDayName = function() {\n        return jsDate.regional[this.locale][\"dayNamesShort\"][this.proxy.getDay()];\n    };\n    \n    /**\n     * Get the abbreviated name of the current month\n     * \n     * @returns {String}\n     */\n     \n    jsDate.prototype.getAbbrMonthName = function() {\n        return jsDate.regional[this.locale][\"monthNamesShort\"][this.proxy.getMonth()];\n    };\n    \n    /**\n     * Get UPPER CASE AM or PM for the current time\n     * \n     * @returns {String}\n     */\n     \n    jsDate.prototype.getAMPM = function() {\n        return this.proxy.getHours() >= 12 ? 'PM' : 'AM';\n    };\n    \n    /**\n     * Get lower case am or pm for the current time\n     * \n     * @returns {String}\n     */\n     \n    jsDate.prototype.getAmPm = function() {\n        return this.proxy.getHours() >= 12 ? 'pm' : 'am';\n    };\n    \n    /**\n     * Get the century (19 for 20th Century)\n     *\n     * @returns {Integer} Century (19 for 20th century).\n     */\n    jsDate.prototype.getCentury = function() { \n        return parseInt(this.proxy.getFullYear()/100, 10);\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getDate = function() {\n        return this.proxy.getDate();\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getDay = function() {\n        return this.proxy.getDay();\n    };\n    \n    /**\n     * Get the Day of week 1 (Monday) thru 7 (Sunday)\n     * \n     * @returns {Integer} Day of week 1 (Monday) thru 7 (Sunday)\n     */\n    jsDate.prototype.getDayOfWeek = function() { \n        var dow = this.proxy.getDay(); \n        return dow===0?7:dow; \n    };\n    \n    /**\n     * Get the day of the year\n     * \n     * @returns {Integer} 1 - 366, day of the year\n     */\n    jsDate.prototype.getDayOfYear = function() {\n        var d = this.proxy;\n        var ms = d - new Date('' + d.getFullYear() + '/1/1 GMT');\n        ms += d.getTimezoneOffset()*60000;\n        d = null;\n        return parseInt(ms/60000/60/24, 10)+1;\n    };\n    \n    /**\n     * Get the name of the current week day\n     * \n     * @returns {String}\n     */  \n     \n    jsDate.prototype.getDayName = function() {\n        return jsDate.regional[this.locale][\"dayNames\"][this.proxy.getDay()];\n    };\n    \n    /**\n     * Get the week number of the given year, starting with the first Sunday as the first week\n     * @returns {Integer} Week number (13 for the 13th full week of the year).\n     */\n    jsDate.prototype.getFullWeekOfYear = function() {\n        var d = this.proxy;\n        var doy = this.getDayOfYear();\n        var rdow = 6-d.getDay();\n        var woy = parseInt((doy+rdow)/7, 10);\n        return woy;\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getFullYear = function() {\n        return this.proxy.getFullYear();\n    };\n    \n    /**\n     * Get the GMT offset in hours and minutes (e.g. +06:30)\n     * \n     * @returns {String}\n     */\n     \n    jsDate.prototype.getGmtOffset = function() {\n        // divide the minutes offset by 60\n        var hours = this.proxy.getTimezoneOffset() / 60;\n        // decide if we are ahead of or behind GMT\n        var prefix = hours < 0 ? '+' : '-';\n        // remove the negative sign if any\n        hours = Math.abs(hours);\n        // add the +/- to the padded number of hours to : to the padded minutes\n        return prefix + addZeros(Math.floor(hours), 2) + ':' + addZeros((hours % 1) * 60, 2);\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getHours = function() {\n        return this.proxy.getHours();\n    };\n    \n    /**\n     * Get the current hour on a 12-hour scheme\n     * \n     * @returns {Integer}\n     */\n     \n    jsDate.prototype.getHours12  = function() {\n        var hours = this.proxy.getHours();\n        return hours > 12 ? hours - 12 : (hours == 0 ? 12 : hours);\n    };\n    \n    \n    jsDate.prototype.getIsoWeek = function() {\n        var d = this.proxy;\n        var woy = this.getWeekOfYear();\n        var dow1_1 = (new Date('' + d.getFullYear() + '/1/1')).getDay();\n        // First week is 01 and not 00 as in the case of %U and %W,\n        // so we add 1 to the final result except if day 1 of the year\n        // is a Monday (then %W returns 01).\n        // We also need to subtract 1 if the day 1 of the year is \n        // Friday-Sunday, so the resulting equation becomes:\n        var idow = woy + (dow1_1 > 4 || dow1_1 <= 1 ? 0 : 1);\n        if(idow == 53 && (new Date('' + d.getFullYear() + '/12/31')).getDay() < 4)\n        {\n            idow = 1;\n        }\n        else if(idow === 0)\n        {\n            d = new jsDate(new Date('' + (d.getFullYear()-1) + '/12/31'));\n            idow = d.getIsoWeek();\n        }\n        d = null;\n        return idow;\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getMilliseconds = function() {\n        return this.proxy.getMilliseconds();\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getMinutes = function() {\n        return this.proxy.getMinutes();\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getMonth = function() {\n        return this.proxy.getMonth();\n    };\n    \n    /**\n     * Get the name of the current month\n     * \n     * @returns {String}\n     */\n     \n    jsDate.prototype.getMonthName = function() {\n        return jsDate.regional[this.locale][\"monthNames\"][this.proxy.getMonth()];\n    };\n    \n    /**\n     * Get the number of the current month, 1-12\n     * \n     * @returns {Integer}\n     */\n     \n    jsDate.prototype.getMonthNumber = function() {\n        return this.proxy.getMonth() + 1;\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getSeconds = function() {\n        return this.proxy.getSeconds();\n    };\n    \n    /**\n     * Return a proper two-digit year integer\n     * \n     * @returns {Integer}\n     */\n     \n    jsDate.prototype.getShortYear = function() {\n        return this.proxy.getYear() % 100;\n    };\n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getTime = function() {\n        return this.proxy.getTime();\n    };\n    \n    /**\n     * Get the timezone abbreviation\n     *\n     * @returns {String} Abbreviation for the timezone\n     */\n    jsDate.prototype.getTimezoneAbbr = function() {\n        return this.proxy.toString().replace(/^.*\\(([^)]+)\\)$/, '$1'); \n    };\n    \n    /**\n     * Get the browser-reported name for the current timezone (e.g. MDT, Mountain Daylight Time)\n     * \n     * @returns {String}\n     */\n    jsDate.prototype.getTimezoneName = function() {\n        var match = /(?:\\((.+)\\)$| ([A-Z]{3}) )/.exec(this.toString());\n        return match[1] || match[2] || 'GMT' + this.getGmtOffset();\n    }; \n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getTimezoneOffset = function() {\n        return this.proxy.getTimezoneOffset();\n    };\n    \n    \n    /**\n     * Get the week number of the given year, starting with the first Monday as the first week\n     * @returns {Integer} Week number (13 for the 13th week of the year).\n     */\n    jsDate.prototype.getWeekOfYear = function() {\n        var doy = this.getDayOfYear();\n        var rdow = 7 - this.getDayOfWeek();\n        var woy = parseInt((doy+rdow)/7, 10);\n        return woy;\n    };\n    \n    /**\n     * Get the current date as a Unix timestamp\n     * \n     * @returns {Integer}\n     */\n     \n    jsDate.prototype.getUnix = function() {\n        return Math.round(this.proxy.getTime() / 1000, 0);\n    }; \n    \n    /**\n     * Implements Date functionality\n     */\n    jsDate.prototype.getYear = function() {\n        return this.proxy.getYear();\n    };\n    \n    /**\n     * Return a date one day ahead (or any other unit)\n     * \n     * @param {String} unit Optional, year | month | day | week | hour | minute | second | millisecond\n     * @returns {jsDate}\n     */\n     \n    jsDate.prototype.next = function(unit) {\n        unit = unit || 'day';\n        return this.clone().add(1, unit);\n    };\n    \n    /**\n     * Set the jsDate instance to a new date.\n     *\n     * @param  {String | Number | Array | Date Object | jsDate Object | Options Object} arguments Optional arguments, \n     * either a parsable date/time string,\n     * a JavaScript timestamp, an array of numbers of form [year, month, day, hours, minutes, seconds, milliseconds],\n     * a Date object, jsDate Object or an options object of form {syntax: \"perl\", date:some Date} where all options are optional.\n     */\n    jsDate.prototype.set = function() {\n        switch ( arguments.length ) {\n            case 0:\n                this.proxy = new Date();\n                break;\n            case 1:\n                // other objects either won't have a _type property or,\n                // if they do, it shouldn't be set to \"jsDate\", so\n                // assume it is an options argument.\n                if (get_type(arguments[0]) == \"[object Object]\" && arguments[0]._type != \"jsDate\") {\n                    var opts = this.options = arguments[0];\n                    this.syntax = opts.syntax || this.syntax;\n                    this.defaultCentury = opts.defaultCentury || this.defaultCentury;\n                    this.proxy = jsDate.createDate(opts.date);\n                }\n                else {\n                    this.proxy = jsDate.createDate(arguments[0]);\n                }\n                break;\n            default:\n                var a = [];\n                for ( var i=0; i<arguments.length; i++ ) {\n                    a.push(arguments[i]);\n                }\n                // this should be the current date/time\n                this.proxy = new Date();\n                this.proxy.setFullYear.apply( this.proxy, a.slice(0,3) );\n                if ( a.slice(3).length ) {\n                    this.proxy.setHours.apply( this.proxy, a.slice(3) );\n                }\n                break;\n        }\n        return this;\n    };\n    \n    /**\n     * Sets the day of the month for a specified date according to local time.\n     * @param {Integer} dayValue An integer from 1 to 31, representing the day of the month. \n     */\n    jsDate.prototype.setDate = function(n) {\n        this.proxy.setDate(n);\n        return this;\n    };\n    \n    /**\n     * Sets the full year for a specified date according to local time.\n     * @param {Integer} yearValue The numeric value of the year, for example, 1995.  \n     * @param {Integer} monthValue Optional, between 0 and 11 representing the months January through December.  \n     * @param {Integer} dayValue Optional, between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue. \n     */\n    jsDate.prototype.setFullYear = function() {\n        this.proxy.setFullYear.apply(this.proxy, arguments);\n        return this;\n    };\n    \n    /**\n     * Sets the hours for a specified date according to local time.\n     * \n     * @param {Integer} hoursValue An integer between 0 and 23, representing the hour.  \n     * @param {Integer} minutesValue Optional, An integer between 0 and 59, representing the minutes.  \n     * @param {Integer} secondsValue Optional, An integer between 0 and 59, representing the seconds. \n     * If you specify the secondsValue parameter, you must also specify the minutesValue.  \n     * @param {Integer} msValue Optional, A number between 0 and 999, representing the milliseconds. \n     * If you specify the msValue parameter, you must also specify the minutesValue and secondsValue. \n     */\n    jsDate.prototype.setHours = function() {\n        this.proxy.setHours.apply(this.proxy, arguments);\n        return this;\n    };\n    \n    /**\n     * Implements Date functionality\n     */ \n    jsDate.prototype.setMilliseconds = function(n) {\n        this.proxy.setMilliseconds(n);\n        return this;\n    };\n    \n    /**\n     * Implements Date functionality\n     */ \n    jsDate.prototype.setMinutes = function() {\n        this.proxy.setMinutes.apply(this.proxy, arguments);\n        return this;\n    };\n    \n    /**\n     * Implements Date functionality\n     */ \n    jsDate.prototype.setMonth = function() {\n        this.proxy.setMonth.apply(this.proxy, arguments);\n        return this;\n    };\n    \n    /**\n     * Implements Date functionality\n     */ \n    jsDate.prototype.setSeconds = function() {\n        this.proxy.setSeconds.apply(this.proxy, arguments);\n        return this;\n    };\n    \n    /**\n     * Implements Date functionality\n     */ \n    jsDate.prototype.setTime = function(n) {\n        this.proxy.setTime(n);\n        return this;\n    };\n    \n    /**\n     * Implements Date functionality\n     */ \n    jsDate.prototype.setYear = function() {\n        this.proxy.setYear.apply(this.proxy, arguments);\n        return this;\n    };\n    \n    /**\n     * Provide a formatted string representation of this date.\n     * \n     * @param {String} formatString A format string.  \n     * See: {@link jsDate.formats}.\n     * @returns {String} Date String.\n     */\n            \n    jsDate.prototype.strftime = function(formatString) {\n        formatString = formatString || this.formatString || jsDate.regional[this.locale]['formatString'];\n        return jsDate.strftime(this, formatString, this.syntax);\n    };\n        \n    /**\n     * Return a String representation of this jsDate object.\n     * @returns {String} Date string.\n     */\n    \n    jsDate.prototype.toString = function() {\n        return this.proxy.toString();\n    };\n        \n    /**\n     * Convert the current date to an 8-digit integer (%Y%m%d)\n     * \n     * @returns {Integer}\n     */\n     \n    jsDate.prototype.toYmdInt = function() {\n        return (this.proxy.getFullYear() * 10000) + (this.getMonthNumber() * 100) + this.proxy.getDate();\n    };\n    \n    /**\n     * @namespace Holds localizations for month/day names.\n     * <p>jsDate attempts to detect locale when loaded and defaults to 'en'.\n     * If a localization is detected which is not available, jsDate defaults to 'en'.\n     * Additional localizations can be added after jsDate loads.  After adding a localization,\n     * call the jsDate.regional.getLocale() method.  Currently, en, fr and de are defined.</p>\n     * \n     * <p>Localizations must be an object and have the following properties defined:  monthNames, monthNamesShort, dayNames, dayNamesShort and Localizations are added like:</p>\n     * <pre class=\"code\">\n     * jsDate.regional['en'] = {\n     * monthNames      : 'January February March April May June July August September October November December'.split(' '),\n     * monthNamesShort : 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' '),\n     * dayNames        : 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' '),\n     * dayNamesShort   : 'Sun Mon Tue Wed Thu Fri Sat'.split(' ')\n     * };\n     * </pre>\n     * <p>After adding localizations, call <code>jsDate.regional.getLocale();</code> to update the locale setting with the\n     * new localizations.</p>\n     */\n     \n    jsDate.regional = {\n        'en': {\n            monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],\n            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'fr': {\n            monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],\n            monthNamesShort: ['Jan','Fév','Mar','Avr','Mai','Jun','Jul','Aoû','Sep','Oct','Nov','Déc'],\n            dayNames: ['Dimanche','Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi'],\n            dayNamesShort: ['Dim','Lun','Mar','Mer','Jeu','Ven','Sam'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'de': {\n            monthNames: ['Januar','Februar','März','April','Mai','Juni','Juli','August','September','Oktober','November','Dezember'],\n            monthNamesShort: ['Jan','Feb','Mär','Apr','Mai','Jun','Jul','Aug','Sep','Okt','Nov','Dez'],\n            dayNames: ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'],\n            dayNamesShort: ['So','Mo','Di','Mi','Do','Fr','Sa'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'es': {\n            monthNames: ['Enero','Febrero','Marzo','Abril','Mayo','Junio', 'Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'],\n            monthNamesShort: ['Ene','Feb','Mar','Abr','May','Jun', 'Jul','Ago','Sep','Oct','Nov','Dic'],\n            dayNames: ['Domingo','Lunes','Martes','Mi&eacute;rcoles','Jueves','Viernes','S&aacute;bado'],\n            dayNamesShort: ['Dom','Lun','Mar','Mi&eacute;','Juv','Vie','S&aacute;b'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'ru': {\n            monthNames: ['Январь','Февраль','Март','Апрель','Май','Июнь','Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'],\n            monthNamesShort: ['Янв','Фев','Мар','Апр','Май','Июн','Июл','Авг','Сен','Окт','Ноя','Дек'],\n            dayNames: ['воскресенье','понедельник','вторник','среда','четверг','пятница','суббота'],\n            dayNamesShort: ['вск','пнд','втр','срд','чтв','птн','сбт'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'ar': {\n            monthNames: ['كانون الثاني', 'شباط', 'آذار', 'نيسان', 'آذار', 'حزيران','تموز', 'آب', 'أيلول',   'تشرين الأول', 'تشرين الثاني', 'كانون الأول'],\n            monthNamesShort: ['1','2','3','4','5','6','7','8','9','10','11','12'],\n            dayNames: ['السبت', 'الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة'],\n            dayNamesShort: ['سبت', 'أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'pt': {\n            monthNames: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],\n            monthNamesShort: ['Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Out','Nov','Dez'],\n            dayNames: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','S&aacute;bado'],\n            dayNamesShort: ['Dom','Seg','Ter','Qua','Qui','Sex','S&aacute;b'],\n            formatString: '%Y-%m-%d %H:%M:%S'   \n        },\n        \n        'pt-BR': {\n            monthNames: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho', 'Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],\n            monthNamesShort: ['Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Out','Nov','Dez'],\n            dayNames: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','S&aacute;bado'],\n            dayNamesShort: ['Dom','Seg','Ter','Qua','Qui','Sex','S&aacute;b'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n        \n        'pl': {\n            monthNames: ['Styczeń','Luty','Marzec','Kwiecień','Maj','Czerwiec','Lipiec','Sierpień','Wrzesień','Październik','Listopad','Grudzień'],\n            monthNamesShort: ['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze','Lip', 'Sie', 'Wrz', 'Paź', 'Lis', 'Gru'],\n            dayNames: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],\n            dayNamesShort: ['Ni', 'Pn', 'Wt', 'Śr', 'Cz', 'Pt', 'Sb'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n\n        'nl': {\n            monthNames: ['Januari','Februari','Maart','April','Mei','Juni','July','Augustus','September','Oktober','November','December'],\n            monthNamesShort: ['Jan','Feb','Mar','Apr','Mei','Jun','Jul','Aug','Sep','Okt','Nov','Dec'],\n            dayNames:','['Zondag','Maandag','Dinsdag','Woensdag','Donderdag','Vrijdag','Zaterdag'],\n            dayNamesShort: ['Zo','Ma','Di','Wo','Do','Vr','Za'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n\n        'sv': {\n            monthNames: ['januari','februari','mars','april','maj','juni','juli','augusti','september','oktober','november','december'],\n            monthNamesShort: ['jan','feb','mar','apr','maj','jun','jul','aug','sep','okt','nov','dec'],\n            dayNames: ['söndag','måndag','tisdag','onsdag','torsdag','fredag','lördag'],\n            dayNamesShort: ['sön','mån','tis','ons','tor','fre','lör'],\n            formatString: '%Y-%m-%d %H:%M:%S'\n        },\n\n        'it': {\n            monthNames: ['Gennaio','Febbraio','Marzo','Aprile','Maggio','Giugno','Luglio','Agosto','Settembre','Ottobre','Novembre','Dicembre'],\n            monthNamesShort: ['Gen','Feb','Mar','Apr','Mag','Giu','Lug','Ago','Set','Ott','Nov','Dic'],\n            dayNames: ['Domenica','Lunedi','Martedi','Mercoledi','Giovedi','Venerdi','Sabato'],\n            dayNamesShort: ['Dom','Lun','Mar','Mer','Gio','Ven','Sab'],\n            formatString: '%d-%m-%Y %H:%M:%S'\n        }\n    \n    };\n    \n    // Set english variants to 'en'\n    jsDate.regional['en-US'] = jsDate.regional['en-GB'] = jsDate.regional['en'];\n    \n    /**\n     * Try to determine the users locale based on the lang attribute of the html page.  Defaults to 'en'\n     * if it cannot figure out a locale of if the locale does not have a localization defined.\n     * @returns {String} locale\n     */\n     \n    jsDate.regional.getLocale = function () {\n        var l = jsDate.config.defaultLocale;\n        \n        if ( document && document.getElementsByTagName('html') && document.getElementsByTagName('html')[0].lang ) {\n            l = document.getElementsByTagName('html')[0].lang;\n            if (!jsDate.regional.hasOwnProperty(l)) {\n                l = jsDate.config.defaultLocale;\n            }\n        }\n        \n        return l;\n    };\n    \n    // ms in day\n    var day = 24 * 60 * 60 * 1000;\n    \n    // padd a number with zeros\n    var addZeros = function(num, digits) {\n        num = String(num);\n        var i = digits - num.length;\n        var s = String(Math.pow(10, i)).slice(1);\n        return s.concat(num);\n    };\n\n    // representations used for calculating differences between dates.\n    // This borrows heavily from Ken Snyder's work.\n    var multipliers = {\n        millisecond: 1,\n        second: 1000,\n        minute: 60 * 1000,\n        hour: 60 * 60 * 1000,\n        day: day,\n        week: 7 * day,\n        month: {\n            // add a number of months\n            add: function(d, number) {\n                // add any years needed (increments of 12)\n                multipliers.year.add(d, Math[number > 0 ? 'floor' : 'ceil'](number / 12));\n                // ensure that we properly wrap betwen December and January\n                // 11 % 12 = 11\n                // 12 % 12 = 0\n                var prevMonth = d.getMonth() + (number % 12);\n                if (prevMonth == 12) {\n                    prevMonth = 0;\n                    d.setYear(d.getFullYear() + 1);\n                } else if (prevMonth == -1) {\n                    prevMonth = 11;\n                    d.setYear(d.getFullYear() - 1);\n                }\n                d.setMonth(prevMonth);\n            },\n            // get the number of months between two Date objects (decimal to the nearest day)\n            diff: function(d1, d2) {\n                // get the number of years\n                var diffYears = d1.getFullYear() - d2.getFullYear();\n                // get the number of remaining months\n                var diffMonths = d1.getMonth() - d2.getMonth() + (diffYears * 12);\n                // get the number of remaining days\n                var diffDays = d1.getDate() - d2.getDate();\n                // return the month difference with the days difference as a decimal\n                return diffMonths + (diffDays / 30);\n            }\n        },\n        year: {\n            // add a number of years\n            add: function(d, number) {\n                d.setYear(d.getFullYear() + Math[number > 0 ? 'floor' : 'ceil'](number));\n            },\n            // get the number of years between two Date objects (decimal to the nearest day)\n            diff: function(d1, d2) {\n                return multipliers.month.diff(d1, d2) / 12;\n            }\n        }        \n    };\n    //\n    // Alias each multiplier with an 's' to allow 'year' and 'years' for example.\n    // This comes from Ken Snyders work.\n    //\n    for (var unit in multipliers) {\n        if (unit.substring(unit.length - 1) != 's') { // IE will iterate newly added properties :|\n            multipliers[unit + 's'] = multipliers[unit];\n        }\n    }\n    \n    //\n    // take a jsDate instance and a format code and return the formatted value.\n    // This is a somewhat modified version of Ken Snyder's method.\n    //\n    var format = function(d, code, syntax) {\n        // if shorcut codes are used, recursively expand those.\n        if (jsDate.formats[syntax][\"shortcuts\"][code]) {\n            return jsDate.strftime(d, jsDate.formats[syntax][\"shortcuts\"][code], syntax);\n        } else {\n            // get the format code function and addZeros() argument\n            var getter = (jsDate.formats[syntax][\"codes\"][code] || '').split('.');\n            var nbr = d['get' + getter[0]] ? d['get' + getter[0]]() : '';\n            if (getter[1]) {\n                nbr = addZeros(nbr, getter[1]);\n            }\n            return nbr;\n        }       \n    };\n    \n    /**\n     * @static\n     * Static function for convert a date to a string according to a given format.  Also acts as namespace for strftime format codes.\n     * <p>strftime formatting can be accomplished without creating a jsDate object by calling jsDate.strftime():</p>\n     * <pre class=\"code\">\n     * var formattedDate = jsDate.strftime('Feb 8, 2006 8:48:32', '%Y-%m-%d %H:%M:%S');\n     * </pre>\n     * @param {String | Number | Array | jsDate&nbsp;Object | Date&nbsp;Object} date A parsable date string, JavaScript time stamp, Array of form [year, month, day, hours, minutes, seconds, milliseconds], jsDate Object or Date object.\n     * @param {String} formatString String with embedded date formatting codes.  \n     * See: {@link jsDate.formats}. \n     * @param {String} syntax Optional syntax to use [default perl].\n     * @param {String} locale Optional locale to use.\n     * @returns {String} Formatted representation of the date.\n    */\n    //\n    // Logic as implemented here is very similar to Ken Snyder's Date Instance Methods.\n    //\n    jsDate.strftime = function(d, formatString, syntax, locale) {\n        var syn = 'perl';\n        var loc = jsDate.regional.getLocale();\n        \n        // check if syntax and locale are available or reversed\n        if (syntax && jsDate.formats.hasOwnProperty(syntax)) {\n            syn = syntax;\n        }\n        else if (syntax && jsDate.regional.hasOwnProperty(syntax)) {\n            loc = syntax;\n        }\n        \n        if (locale && jsDate.formats.hasOwnProperty(locale)) {\n            syn = locale;\n        }\n        else if (locale && jsDate.regional.hasOwnProperty(locale)) {\n            loc = locale;\n        }\n        \n        if (get_type(d) != \"[object Object]\" || d._type != \"jsDate\") {\n            d = new jsDate(d);\n            d.locale = loc;\n        }\n        if (!formatString) {\n            formatString = d.formatString || jsDate.regional[loc]['formatString'];\n        }\n        // default the format string to year-month-day\n        var source = formatString || '%Y-%m-%d', \n            result = '', \n            match;\n        // replace each format code\n        while (source.length > 0) {\n            if (match = source.match(jsDate.formats[syn].codes.matcher)) {\n                result += source.slice(0, match.index);\n                result += (match[1] || '') + format(d, match[2], syn);\n                source = source.slice(match.index + match[0].length);\n            } else {\n                result += source;\n                source = '';\n            }\n        }\n        return result;\n    };\n    \n    /**\n     * @namespace\n     * Namespace to hold format codes and format shortcuts.  \"perl\" and \"php\" format codes \n     * and shortcuts are defined by default.  Additional codes and shortcuts can be\n     * added like:\n     * \n     * <pre class=\"code\">\n     * jsDate.formats[\"perl\"] = {\n     *     \"codes\": {\n     *         matcher: /someregex/,\n     *         Y: \"fullYear\",  // name of \"get\" method without the \"get\",\n     *         ...,            // more codes\n     *     },\n     *     \"shortcuts\": {\n     *         F: '%Y-%m-%d',\n     *         ...,            // more shortcuts\n     *     }\n     * };\n     * </pre>\n     * \n     * <p>Additionally, ISO and SQL shortcuts are defined and can be accesses via:\n     * <code>jsDate.formats.ISO</code> and <code>jsDate.formats.SQL</code>\n     */\n    \n    jsDate.formats = {\n        ISO:'%Y-%m-%dT%H:%M:%S.%N%G',\n        SQL:'%Y-%m-%d %H:%M:%S'\n    };\n    \n    /**\n     * Perl format codes and shortcuts for strftime.\n     * \n     * A hash (object) of codes where each code must be an array where the first member is \n     * the name of a Date.prototype or jsDate.prototype function to call\n     * and optionally a second member indicating the number to pass to addZeros()\n     * \n     * <p>The following format codes are defined:</p>\n     * \n     * <pre class=\"code\">\n     * Code    Result                    Description\n     * == Years ==           \n     * %Y      2008                      Four-digit year\n     * %y      08                        Two-digit year\n     * \n     * == Months ==          \n     * %m      09                        Two-digit month\n     * %#m     9                         One or two-digit month\n     * %B      September                 Full month name\n     * %b      Sep                       Abbreviated month name\n     * \n     * == Days ==            \n     * %d      05                        Two-digit day of month\n     * %#d     5                         One or two-digit day of month\n     * %e      5                         One or two-digit day of month\n     * %A      Sunday                    Full name of the day of the week\n     * %a      Sun                       Abbreviated name of the day of the week\n     * %w      0                         Number of the day of the week (0 = Sunday, 6 = Saturday)\n     * \n     * == Hours ==           \n     * %H      23                        Hours in 24-hour format (two digits)\n     * %#H     3                         Hours in 24-hour integer format (one or two digits)\n     * %I      11                        Hours in 12-hour format (two digits)\n     * %#I     3                         Hours in 12-hour integer format (one or two digits)\n     * %p      PM                        AM or PM\n     * \n     * == Minutes ==         \n     * %M      09                        Minutes (two digits)\n     * %#M     9                         Minutes (one or two digits)\n     * \n     * == Seconds ==         \n     * %S      02                        Seconds (two digits)\n     * %#S     2                         Seconds (one or two digits)\n     * %s      1206567625723             Unix timestamp (Seconds past 1970-01-01 00:00:00)\n     * \n     * == Milliseconds ==    \n     * %N      008                       Milliseconds (three digits)\n     * %#N     8                         Milliseconds (one to three digits)\n     * \n     * == Timezone ==        \n     * %O      360                       difference in minutes between local time and GMT\n     * %Z      Mountain Standard Time    Name of timezone as reported by browser\n     * %G      06:00                     Hours and minutes between GMT\n     * \n     * == Shortcuts ==       \n     * %F      2008-03-26                %Y-%m-%d\n     * %T      05:06:30                  %H:%M:%S\n     * %X      05:06:30                  %H:%M:%S\n     * %x      03/26/08                  %m/%d/%y\n     * %D      03/26/08                  %m/%d/%y\n     * %#c     Wed Mar 26 15:31:00 2008  %a %b %e %H:%M:%S %Y\n     * %v      3-Sep-2008                %e-%b-%Y\n     * %R      15:31                     %H:%M\n     * %r      03:31:00 PM               %I:%M:%S %p\n     * \n     * == Characters ==      \n     * %n      \\n                        Newline\n     * %t      \\t                        Tab\n     * %%      %                         Percent Symbol\n     * </pre>\n     * \n     * <p>Formatting shortcuts that will be translated into their longer version.\n     * Be sure that format shortcuts do not refer to themselves: this will cause an infinite loop.</p>\n     * \n     * <p>Format codes and format shortcuts can be redefined after the jsDate\n     * module is imported.</p>\n     * \n     * <p>Note that if you redefine the whole hash (object), you must supply a \"matcher\"\n     * regex for the parser.  The default matcher is:</p>\n     * \n     * <code>/()%(#?(%|[a-z]))/i</code>\n     * \n     * <p>which corresponds to the Perl syntax used by default.</p>\n     * \n     * <p>By customizing the matcher and format codes, nearly any strftime functionality is possible.</p>\n     */\n     \n    jsDate.formats.perl = {\n        codes: {\n            //\n            // 2-part regex matcher for format codes\n            //\n            // first match must be the character before the code (to account for escaping)\n            // second match must be the format code character(s)\n            //\n            matcher: /()%(#?(%|[a-z]))/i,\n            // year\n            Y: 'FullYear',\n            y: 'ShortYear.2',\n            // month\n            m: 'MonthNumber.2',\n            '#m': 'MonthNumber',\n            B: 'MonthName',\n            b: 'AbbrMonthName',\n            // day\n            d: 'Date.2',\n            '#d': 'Date',\n            e: 'Date',\n            A: 'DayName',\n            a: 'AbbrDayName',\n            w: 'Day',\n            // hours\n            H: 'Hours.2',\n            '#H': 'Hours',\n            I: 'Hours12.2',\n            '#I': 'Hours12',\n            p: 'AMPM',\n            // minutes\n            M: 'Minutes.2',\n            '#M': 'Minutes',\n            // seconds\n            S: 'Seconds.2',\n            '#S': 'Seconds',\n            s: 'Unix',\n            // milliseconds\n            N: 'Milliseconds.3',\n            '#N': 'Milliseconds',\n            // timezone\n            O: 'TimezoneOffset',\n            Z: 'TimezoneName',\n            G: 'GmtOffset'  \n        },\n        \n        shortcuts: {\n            // date\n            F: '%Y-%m-%d',\n            // time\n            T: '%H:%M:%S',\n            X: '%H:%M:%S',\n            // local format date\n            x: '%m/%d/%y',\n            D: '%m/%d/%y',\n            // local format extended\n            '#c': '%a %b %e %H:%M:%S %Y',\n            // local format short\n            v: '%e-%b-%Y',\n            R: '%H:%M',\n            r: '%I:%M:%S %p',\n            // tab and newline\n            t: '\\t',\n            n: '\\n',\n            '%': '%'\n        }\n    };\n    \n    /**\n     * PHP format codes and shortcuts for strftime.\n     * \n     * A hash (object) of codes where each code must be an array where the first member is \n     * the name of a Date.prototype or jsDate.prototype function to call\n     * and optionally a second member indicating the number to pass to addZeros()\n     * \n     * <p>The following format codes are defined:</p>\n     * \n     * <pre class=\"code\">\n     * Code    Result                    Description\n     * === Days ===        \n     * %a      Sun through Sat           An abbreviated textual representation of the day\n     * %A      Sunday - Saturday         A full textual representation of the day\n     * %d      01 to 31                  Two-digit day of the month (with leading zeros)\n     * %e      1 to 31                   Day of the month, with a space preceding single digits.\n     * %j      001 to 366                Day of the year, 3 digits with leading zeros\n     * %u      1 - 7 (Mon - Sun)         ISO-8601 numeric representation of the day of the week\n     * %w      0 - 6 (Sun - Sat)         Numeric representation of the day of the week\n     *                                  \n     * === Week ===                     \n     * %U      13                        Full Week number, starting with the first Sunday as the first week\n     * %V      01 through 53             ISO-8601:1988 week number, starting with the first week of the year \n     *                                   with at least 4 weekdays, with Monday being the start of the week\n     * %W      46                        A numeric representation of the week of the year, \n     *                                   starting with the first Monday as the first week\n     * === Month ===                    \n     * %b      Jan through Dec           Abbreviated month name, based on the locale\n     * %B      January - December        Full month name, based on the locale\n     * %h      Jan through Dec           Abbreviated month name, based on the locale (an alias of %b)\n     * %m      01 - 12 (Jan - Dec)       Two digit representation of the month\n     * \n     * === Year ===                     \n     * %C      19                        Two digit century (year/100, truncated to an integer)\n     * %y      09 for 2009               Two digit year\n     * %Y      2038                      Four digit year\n     * \n     * === Time ===                     \n     * %H      00 through 23             Two digit representation of the hour in 24-hour format\n     * %I      01 through 12             Two digit representation of the hour in 12-hour format\n     * %l      1 through 12              Hour in 12-hour format, with a space preceeding single digits\n     * %M      00 through 59             Two digit representation of the minute\n     * %p      AM/PM                     UPPER-CASE 'AM' or 'PM' based on the given time\n     * %P      am/pm                     lower-case 'am' or 'pm' based on the given time\n     * %r      09:34:17 PM               Same as %I:%M:%S %p\n     * %R      00:35                     Same as %H:%M\n     * %S      00 through 59             Two digit representation of the second\n     * %T      21:34:17                  Same as %H:%M:%S\n     * %X      03:59:16                  Preferred time representation based on locale, without the date\n     * %z      -0500 or EST              Either the time zone offset from UTC or the abbreviation\n     * %Z      -0500 or EST              The time zone offset/abbreviation option NOT given by %z\n     * \n     * === Time and Date ===            \n     * %D      02/05/09                  Same as %m/%d/%y\n     * %F      2009-02-05                Same as %Y-%m-%d (commonly used in database datestamps)\n     * %s      305815200                 Unix Epoch Time timestamp (same as the time() function)\n     * %x      02/05/09                  Preferred date representation, without the time\n     * \n     * === Miscellaneous ===            \n     * %n        ---                     A newline character (\\n)\n     * %t        ---                     A Tab character (\\t)\n     * %%        ---                     A literal percentage character (%)\n     * </pre>\n     */\n \n    jsDate.formats.php = {\n        codes: {\n            //\n            // 2-part regex matcher for format codes\n            //\n            // first match must be the character before the code (to account for escaping)\n            // second match must be the format code character(s)\n            //\n            matcher: /()%((%|[a-z]))/i,\n            // day\n            a: 'AbbrDayName',\n            A: 'DayName',\n            d: 'Date.2',\n            e: 'Date',\n            j: 'DayOfYear.3',\n            u: 'DayOfWeek',\n            w: 'Day',\n            // week\n            U: 'FullWeekOfYear.2',\n            V: 'IsoWeek.2',\n            W: 'WeekOfYear.2',\n            // month\n            b: 'AbbrMonthName',\n            B: 'MonthName',\n            m: 'MonthNumber.2',\n            h: 'AbbrMonthName',\n            // year\n            C: 'Century.2',\n            y: 'ShortYear.2',\n            Y: 'FullYear',\n            // time\n            H: 'Hours.2',\n            I: 'Hours12.2',\n            l: 'Hours12',\n            p: 'AMPM',\n            P: 'AmPm',\n            M: 'Minutes.2',\n            S: 'Seconds.2',\n            s: 'Unix',\n            O: 'TimezoneOffset',\n            z: 'GmtOffset',\n            Z: 'TimezoneAbbr'\n        },\n        \n        shortcuts: {\n            D: '%m/%d/%y',\n            F: '%Y-%m-%d',\n            T: '%H:%M:%S',\n            X: '%H:%M:%S',\n            x: '%m/%d/%y',\n            R: '%H:%M',\n            r: '%I:%M:%S %p',\n            t: '\\t',\n            n: '\\n',\n            '%': '%'\n        }\n    };   \n    //\n    // Conceptually, the logic implemented here is similar to Ken Snyder's Date Instance Methods.\n    // I use his idea of a set of parsers which can be regular expressions or functions,\n    // iterating through those, and then seeing if Date.parse() will create a date.\n    // The parser expressions and functions are a little different and some bugs have been\n    // worked out.  Also, a lot of \"pre-parsing\" is done to fix implementation\n    // variations of Date.parse() between browsers.\n    //\n    jsDate.createDate = function(date) {\n        // if passing in multiple arguments, try Date constructor\n        if (date == null) {\n            return new Date();\n        }\n        // If the passed value is already a date object, return it\n        if (date instanceof Date) {\n            return date;\n        }\n        // if (typeof date == 'number') return new Date(date * 1000);\n        // If the passed value is an integer, interpret it as a javascript timestamp\n        if (typeof date == 'number') {\n            return new Date(date);\n        }\n        \n        // Before passing strings into Date.parse(), have to normalize them for certain conditions.\n        // If strings are not formatted staccording to the EcmaScript spec, results from Date parse will be implementation dependent.  \n        // \n        // For example: \n        //  * FF and Opera assume 2 digit dates are pre y2k, Chome assumes <50 is pre y2k, 50+ is 21st century.  \n        //  * Chrome will correctly parse '1984-1-25' into localtime, FF and Opera will not parse.\n        //  * Both FF, Chrome and Opera will parse '1984/1/25' into localtime.\n        \n        // remove leading and trailing spaces\n        var parsable = String(date).replace(/^\\s*(.+)\\s*$/g, '$1');\n        \n        // replace dahses (-) with slashes (/) in dates like n[nnn]/n[n]/n[nnn]\n        parsable = parsable.replace(/^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,4})/, \"$1/$2/$3\");\n        \n        /////////\n        // Need to check for '15-Dec-09' also.\n        // FF will not parse, but Chrome will.\n        // Chrome will set date to 2009 as well.\n        /////////\n        \n        // first check for 'dd-mmm-yyyy' or 'dd/mmm/yyyy' like '15-Dec-2010'\n        parsable = parsable.replace(/^(3[01]|[0-2]?\\d)[-\\/]([a-z]{3,})[-\\/](\\d{4})/i, \"$1 $2 $3\");\n        \n        // Now check for 'dd-mmm-yy' or 'dd/mmm/yy' and normalize years to default century.\n        var match = parsable.match(/^(3[01]|[0-2]?\\d)[-\\/]([a-z]{3,})[-\\/](\\d{2})\\D*/i);\n        if (match && match.length > 3) {\n            var m3 = parseFloat(match[3]);\n            var ny = jsDate.config.defaultCentury + m3;\n            ny = String(ny);\n            \n            // now replace 2 digit year with 4 digit year\n            parsable = parsable.replace(/^(3[01]|[0-2]?\\d)[-\\/]([a-z]{3,})[-\\/](\\d{2})\\D*/i, match[1] +' '+ match[2] +' '+ ny);\n            \n        }\n        \n        // Check for '1/19/70 8:14PM'\n        // where starts with mm/dd/yy or yy/mm/dd and have something after\n        // Check if 1st postiion is greater than 31, assume it is year.\n        // Assme all 2 digit years are 1900's.\n        // Finally, change them into US style mm/dd/yyyy representations.\n        match = parsable.match(/^([0-9]{1,2})[-\\/]([0-9]{1,2})[-\\/]([0-9]{1,2})[^0-9]/);\n        \n        function h1(parsable, match) {\n            var m1 = parseFloat(match[1]);\n            var m2 = parseFloat(match[2]);\n            var m3 = parseFloat(match[3]);\n            var cent = jsDate.config.defaultCentury;\n            var ny, nd, nm, str;\n            \n            if (m1 > 31) { // first number is a year\n                nd = m3;\n                nm = m2;\n                ny = cent + m1;\n            }\n            \n            else { // last number is the year\n                nd = m2;\n                nm = m1;\n                ny = cent + m3;\n            }\n            \n            str = nm+'/'+nd+'/'+ny;\n            \n            // now replace 2 digit year with 4 digit year\n            return  parsable.replace(/^([0-9]{1,2})[-\\/]([0-9]{1,2})[-\\/]([0-9]{1,2})/, str);\n        \n        }\n        \n        if (match && match.length > 3) {\n            parsable = h1(parsable, match);\n        }\n        \n        // Now check for '1/19/70' with nothing after and do as above\n        var match = parsable.match(/^([0-9]{1,2})[-\\/]([0-9]{1,2})[-\\/]([0-9]{1,2})$/);\n        \n        if (match && match.length > 3) {\n            parsable = h1(parsable, match);\n        }\n                \n        \n        var i = 0;\n        var length = jsDate.matchers.length;\n        var pattern,\n            ms,\n            current = parsable,\n            obj;\n        while (i < length) {\n            ms = Date.parse(current);\n            if (!isNaN(ms)) {\n                return new Date(ms);\n            }\n            pattern = jsDate.matchers[i];\n            if (typeof pattern == 'function') {\n                obj = pattern.call(jsDate, current);\n                if (obj instanceof Date) {\n                    return obj;\n                }\n            } else {\n                current = parsable.replace(pattern[0], pattern[1]);\n            }\n            i++;\n        }\n        return NaN;\n    };\n    \n\n    /**\n     * @static\n     * Handy static utility function to return the number of days in a given month.\n     * @param {Integer} year Year\n     * @param {Integer} month Month (1-12)\n     * @returns {Integer} Number of days in the month.\n    */\n    //\n    // handy utility method Borrowed right from Ken Snyder's Date Instance Mehtods.\n    // \n    jsDate.daysInMonth = function(year, month) {\n        if (month == 2) {\n            return new Date(year, 1, 29).getDate() == 29 ? 29 : 28;\n        }\n        return [undefined,31,undefined,31,30,31,30,31,31,30,31,30,31][month];\n    };\n\n\n    //\n    // An Array of regular expressions or functions that will attempt to match the date string.\n    // Functions are called with scope of a jsDate instance.\n    //\n    jsDate.matchers = [\n        // convert dd.mmm.yyyy to mm/dd/yyyy (world date to US date).\n        [/(3[01]|[0-2]\\d)\\s*\\.\\s*(1[0-2]|0\\d)\\s*\\.\\s*([1-9]\\d{3})/, '$2/$1/$3'],\n        // convert yyyy-mm-dd to mm/dd/yyyy (ISO date to US date).\n        [/([1-9]\\d{3})\\s*-\\s*(1[0-2]|0\\d)\\s*-\\s*(3[01]|[0-2]\\d)/, '$2/$3/$1'],\n        // Handle 12 hour or 24 hour time with milliseconds am/pm and optional date part.\n        function(str) { \n            var match = str.match(/^(?:(.+)\\s+)?([012]?\\d)(?:\\s*\\:\\s*(\\d\\d))?(?:\\s*\\:\\s*(\\d\\d(\\.\\d*)?))?\\s*(am|pm)?\\s*$/i);\n            //                   opt. date      hour       opt. minute     opt. second       opt. msec   opt. am or pm\n            if (match) {\n                if (match[1]) {\n                    var d = this.createDate(match[1]);\n                    if (isNaN(d)) {\n                        return;\n                    }\n                } else {\n                    var d = new Date();\n                    d.setMilliseconds(0);\n                }\n                var hour = parseFloat(match[2]);\n                if (match[6]) {\n                    hour = match[6].toLowerCase() == 'am' ? (hour == 12 ? 0 : hour) : (hour == 12 ? 12 : hour + 12);\n                }\n                d.setHours(hour, parseInt(match[3] || 0, 10), parseInt(match[4] || 0, 10), ((parseFloat(match[5] || 0)) || 0)*1000);\n                return d;\n            }\n            else {\n                return str;\n            }\n        },\n        // Handle ISO timestamp with time zone.\n        function(str) {\n            var match = str.match(/^(?:(.+))[T|\\s+]([012]\\d)(?:\\:(\\d\\d))(?:\\:(\\d\\d))(?:\\.\\d+)([\\+\\-]\\d\\d\\:\\d\\d)$/i);\n            if (match) {\n                if (match[1]) {\n                    var d = this.createDate(match[1]);\n                    if (isNaN(d)) {\n                        return;\n                    }\n                } else {\n                    var d = new Date();\n                    d.setMilliseconds(0);\n                }\n                var hour = parseFloat(match[2]);\n                d.setHours(hour, parseInt(match[3], 10), parseInt(match[4], 10), parseFloat(match[5])*1000);\n                return d;\n            }\n            else {\n                    return str;\n            }\n        },\n        // Try to match ambiguous strings like 12/8/22.\n        // Use FF date assumption that 2 digit years are 20th century (i.e. 1900's).\n        // This may be redundant with pre processing of date already performed.\n        function(str) {\n            var match = str.match(/^([0-3]?\\d)\\s*[-\\/.\\s]{1}\\s*([a-zA-Z]{3,9})\\s*[-\\/.\\s]{1}\\s*([0-3]?\\d)$/);\n            if (match) {\n                var d = new Date();\n                var cent = jsDate.config.defaultCentury;\n                var m1 = parseFloat(match[1]);\n                var m3 = parseFloat(match[3]);\n                var ny, nd, nm;\n                if (m1 > 31) { // first number is a year\n                    nd = m3;\n                    ny = cent + m1;\n                }\n                \n                else { // last number is the year\n                    nd = m1;\n                    ny = cent + m3;\n                }\n                \n                var nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()][\"monthNamesShort\"]);\n                \n                if (nm == -1) {\n                    nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()][\"monthNames\"]);\n                }\n            \n                d.setFullYear(ny, nm, nd);\n                d.setHours(0,0,0,0);\n                return d;\n            }\n            \n            else {\n                return str;\n            }\n        }      \n    ];\n\n    //\n    // I think John Reisig published this method on his blog, ejohn.\n    //\n    function inArray( elem, array ) {\n        if ( array.indexOf ) {\n            return array.indexOf( elem );\n        }\n\n        for ( var i = 0, length = array.length; i < length; i++ ) {\n            if ( array[ i ] === elem ) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n    \n    //\n    // Thanks to Kangax, Christian Sciberras and Stack Overflow for this method.\n    //\n    function get_type(thing){\n        if(thing===null) return \"[object Null]\"; // special case\n        return Object.prototype.toString.call(thing);\n    }\n    \n    $.jsDate = jsDate;\n\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    \n    // Class: $.jqplot.BarRenderer\n    // A plugin renderer for jqPlot to draw a bar plot.\n    // Draws series as a line.\n    \n    $.jqplot.BarRenderer = function(){\n        $.jqplot.LineRenderer.call(this);\n    };\n    \n    $.jqplot.BarRenderer.prototype = new $.jqplot.LineRenderer();\n    $.jqplot.BarRenderer.prototype.constructor = $.jqplot.BarRenderer;\n    \n    // called with scope of series.\n    $.jqplot.BarRenderer.prototype.init = function(options, plot) {\n        // Group: Properties\n        //\n        // prop: barPadding\n        // Number of pixels between adjacent bars at the same axis value.\n        this.barPadding = 8;\n        // prop: barMargin\n        // Number of pixels between groups of bars at adjacent axis values.\n        this.barMargin = 10;\n        // prop: barDirection\n        // 'vertical' = up and down bars, 'horizontal' = side to side bars\n        this.barDirection = 'vertical';\n        // prop: barWidth\n        // Width of the bar in pixels (auto by devaul).  null = calculated automatically.\n        this.barWidth = null;\n        // prop: shadowOffset\n        // offset of the shadow from the slice and offset of \n        // each succesive stroke of the shadow from the last.\n        this.shadowOffset = 2;\n        // prop: shadowDepth\n        // number of strokes to apply to the shadow, \n        // each stroke offset shadowOffset from the last.\n        this.shadowDepth = 5;\n        // prop: shadowAlpha\n        // transparency of the shadow (0 = transparent, 1 = opaque)\n        this.shadowAlpha = 0.08;\n        // prop: waterfall\n        // true to enable waterfall plot.\n        this.waterfall = false;\n        // prop: groups\n        // group bars into this many groups\n        this.groups = 1;\n        // prop: varyBarColor\n        // true to color each bar of a series separately rather than\n        // have every bar of a given series the same color.\n        // If used for non-stacked multiple series bar plots, user should\n        // specify a separate 'seriesColors' array for each series.\n        // Otherwise, each series will set their bars to the same color array.\n        // This option has no Effect for stacked bar charts and is disabled.\n        this.varyBarColor = false;\n        // prop: highlightMouseOver\n        // True to highlight slice when moused over.\n        // This must be false to enable highlightMouseDown to highlight when clicking on a slice.\n        this.highlightMouseOver = true;\n        // prop: highlightMouseDown\n        // True to highlight when a mouse button is pressed over a slice.\n        // This will be disabled if highlightMouseOver is true.\n        this.highlightMouseDown = false;\n        // prop: highlightColors\n        // an array of colors to use when highlighting a bar.\n        this.highlightColors = [];\n        // prop: transposedData\n        // NOT IMPLEMENTED YET.  True if this is a horizontal bar plot and \n        // x and y values are \"transposed\".  Tranposed, or \"swapped\", data is \n        // required prior to rev. 894 builds of jqPlot with horizontal bars. \n        // Allows backward compatability of bar renderer horizontal bars with \n        // old style data sets.\n        this.transposedData = true;\n        this.renderer.animation = {\n            show: false,\n            direction: 'down',\n            speed: 3000,\n            _supported: true\n        };\n        this._type = 'bar';\n        \n        // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver\n        if (options.highlightMouseDown && options.highlightMouseOver == null) {\n            options.highlightMouseOver = false;\n        }\n        \n        //////\n        // This is probably wrong here.\n        // After going back and forth on whether renderer should be the thing\n        // or extend the thing, it seems that it it best if it is a property\n        // on the thing.  This should be something that is commonized \n        // among series renderers in the future.\n        //////\n        $.extend(true, this, options);\n\n        // really should probably do this\n        $.extend(true, this.renderer, options);\n        // fill is still needed to properly draw the legend.\n        // bars have to be filled.\n        this.fill = true;\n\n        // if horizontal bar and animating, reset the default direction\n        if (this.barDirection === 'horizontal' && this.rendererOptions.animation && this.rendererOptions.animation.direction == null) {\n            this.renderer.animation.direction = 'left';\n        }\n        \n        if (this.waterfall) {\n            this.fillToZero = false;\n            this.disableStack = true;\n        }\n        \n        if (this.barDirection == 'vertical' ) {\n            this._primaryAxis = '_xaxis';\n            this._stackAxis = 'y';\n            this.fillAxis = 'y';\n        }\n        else {\n            this._primaryAxis = '_yaxis';\n            this._stackAxis = 'x';\n            this.fillAxis = 'x';\n        }\n        // index of the currenty highlighted point, if any\n        this._highlightedPoint = null;\n        // total number of values for all bar series, total number of bar series, and position of this series\n        this._plotSeriesInfo = null;\n        // Array of actual data colors used for each data point.\n        this._dataColors = [];\n        this._barPoints = [];\n        \n        // set the shape renderer options\n        var opts = {lineJoin:'miter', lineCap:'round', fill:true, isarc:false, strokeStyle:this.color, fillStyle:this.color, closePath:this.fill};\n        this.renderer.shapeRenderer.init(opts);\n        // set the shadow renderer options\n        var sopts = {lineJoin:'miter', lineCap:'round', fill:true, isarc:false, angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, depth:this.shadowDepth, closePath:this.fill};\n        this.renderer.shadowRenderer.init(sopts);\n        \n        plot.postInitHooks.addOnce(postInit);\n        plot.postDrawHooks.addOnce(postPlotDraw);\n        plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);\n        plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);\n        plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);\n        plot.eventListenerHooks.addOnce('jqplotClick', handleClick);\n        plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick); \n    };\n    \n    // called with scope of series\n    function barPreInit(target, data, seriesDefaults, options) {\n        if (this.rendererOptions.barDirection == 'horizontal') {\n            this._stackAxis = 'x';\n            this._primaryAxis = '_yaxis';\n        }\n        if (this.rendererOptions.waterfall == true) {\n            this._data = $.extend(true, [], this.data);\n            var sum = 0;\n            var pos = (!this.rendererOptions.barDirection || this.rendererOptions.barDirection === 'vertical' || this.transposedData === false) ? 1 : 0;\n            for(var i=0; i<this.data.length; i++) {\n                sum += this.data[i][pos];\n                if (i>0) {\n                    this.data[i][pos] += this.data[i-1][pos];\n                }\n            }\n            this.data[this.data.length] = (pos == 1) ? [this.data.length+1, sum] : [sum, this.data.length+1];\n            this._data[this._data.length] = (pos == 1) ? [this._data.length+1, sum] : [sum, this._data.length+1];\n        }\n        if (this.rendererOptions.groups > 1) {\n            this.breakOnNull = true;\n            var l = this.data.length;\n            var skip = parseInt(l/this.rendererOptions.groups, 10);\n            var count = 0;\n            for (var i=skip; i<l; i+=skip) {\n                this.data.splice(i+count, 0, [null, null]);\n                this._plotData.splice(i+count, 0, [null, null]);\n                this._stackData.splice(i+count, 0, [null, null]);\n                count++;\n            }\n            for (i=0; i<this.data.length; i++) {\n                if (this._primaryAxis == '_xaxis') {\n                    this.data[i][0] = i+1;\n                    this._plotData[i][0] = i+1;\n                    this._stackData[i][0] = i+1;\n                }\n                else {\n                    this.data[i][1] = i+1;\n                    this._plotData[i][1] = i+1;\n                    this._stackData[i][1] = i+1;\n                }\n            }\n        }\n    }\n    \n    $.jqplot.preSeriesInitHooks.push(barPreInit);\n    \n    // needs to be called with scope of series, not renderer.\n    $.jqplot.BarRenderer.prototype.calcSeriesNumbers = function() {\n        var nvals = 0;\n        var nseries = 0;\n        var paxis = this[this._primaryAxis];\n        var s, series, pos;\n        // loop through all series on this axis\n        for (var i=0; i < paxis._series.length; i++) {\n            series = paxis._series[i];\n            if (series === this) {\n                pos = i;\n            }\n            // is the series rendered as a bar?\n            if (series.renderer.constructor == $.jqplot.BarRenderer) {\n                // gridData may not be computed yet, use data length insted\n                nvals += series.data.length;\n                nseries += 1;\n            }\n        }\n        // return total number of values for all bar series, total number of bar series, and position of this series\n        return [nvals, nseries, pos];\n    };\n\n    $.jqplot.BarRenderer.prototype.setBarWidth = function() {\n        // need to know how many data values we have on the approprate axis and figure it out.\n        var i;\n        var nvals = 0;\n        var nseries = 0;\n        var paxis = this[this._primaryAxis];\n        var s, series, pos;\n        var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);\n        nvals = temp[0];\n        nseries = temp[1];\n        var nticks = paxis.numberTicks;\n        var nbins = (nticks-1)/2;\n        // so, now we have total number of axis values.\n        if (paxis.name == 'xaxis' || paxis.name == 'x2axis') {\n            if (this._stack) {\n                this.barWidth = (paxis._offsets.max - paxis._offsets.min) / nvals * nseries - this.barMargin;\n            }\n            else {\n                this.barWidth = ((paxis._offsets.max - paxis._offsets.min)/nbins  - this.barPadding * (nseries-1) - this.barMargin*2)/nseries;\n                // this.barWidth = (paxis._offsets.max - paxis._offsets.min) / nvals - this.barPadding - this.barMargin/nseries;\n            }\n        }\n        else {\n            if (this._stack) {\n                this.barWidth = (paxis._offsets.min - paxis._offsets.max) / nvals * nseries - this.barMargin;\n            }\n            else {\n                this.barWidth = ((paxis._offsets.min - paxis._offsets.max)/nbins  - this.barPadding * (nseries-1) - this.barMargin*2)/nseries;\n                // this.barWidth = (paxis._offsets.min - paxis._offsets.max) / nvals - this.barPadding - this.barMargin/nseries;\n            }\n        }\n        return [nvals, nseries];\n    };\n\n    function computeHighlightColors (colors) {\n        var ret = [];\n        for (var i=0; i<colors.length; i++){\n            var rgba = $.jqplot.getColorComponents(colors[i]);\n            var newrgb = [rgba[0], rgba[1], rgba[2]];\n            var sum = newrgb[0] + newrgb[1] + newrgb[2];\n            for (var j=0; j<3; j++) {\n                // when darkening, lowest color component can be is 60.\n                newrgb[j] = (sum > 570) ?  newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);\n                newrgb[j] = parseInt(newrgb[j], 10);\n            }\n            ret.push('rgb('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+')');\n        }\n        return ret;\n    }\n\n    function getStart(sidx, didx, comp, plot, axis) {\n        // check if sign change\n        var seriesIndex = sidx,\n            prevSeriesIndex = sidx - 1,\n            start,\n            prevVal,\n            aidx = (axis === 'x') ? 0 : 1;\n\n        // is this not the first series?\n        if (seriesIndex > 0) {\n            prevVal = plot.series[prevSeriesIndex]._plotData[didx][aidx];\n\n            // is there a sign change\n            if ((comp * prevVal) < 0) {\n                start = getStart(prevSeriesIndex, didx, comp, plot, axis);\n            }\n\n            // no sign change.\n            else {\n                start = plot.series[prevSeriesIndex].gridData[didx][aidx];\n            }\n\n        }\n\n        // if first series, return value at 0\n        else {\n\n            start = (aidx === 0) ? plot.series[seriesIndex]._xaxis.series_u2p(0) : plot.series[seriesIndex]._yaxis.series_u2p(0);\n        }\n\n        return start;\n    }\n\n    \n    $.jqplot.BarRenderer.prototype.draw = function(ctx, gridData, options, plot) {\n        var i;\n        // Ughhh, have to make a copy of options b/c it may be modified later.\n        var opts = $.extend({}, options);\n        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;\n        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;\n        var fill = (opts.fill != undefined) ? opts.fill : this.fill;\n        var xaxis = this.xaxis;\n        var yaxis = this.yaxis;\n        var xp = this._xaxis.series_u2p;\n        var yp = this._yaxis.series_u2p;\n        var pointx, pointy;\n        // clear out data colors.\n        this._dataColors = [];\n        this._barPoints = [];\n        \n        if (this.barWidth == null || this.rendererOptions.barWidth == null) {//check pull request https://bitbucket.org/cleonello/jqplot/pull-request/61/fix-for-issue-513/diff\n            this.renderer.setBarWidth.call(this);\n        }\n        \n        var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);\n        var nvals = temp[0];\n        var nseries = temp[1];\n        var pos = temp[2];\n        var points = [];\n        \n        if (this._stack) {\n            this._barNudge = 0;\n        }\n        else {\n            this._barNudge = (-Math.abs(nseries/2 - 0.5) + pos) * (this.barWidth + this.barPadding);\n        }\n        if (showLine) {\n            var negativeColors = new $.jqplot.ColorGenerator(this.negativeSeriesColors);\n            var positiveColors = new $.jqplot.ColorGenerator(this.seriesColors);\n            var negativeColor = negativeColors.get(this.index);\n            if (! this.useNegativeColors) {\n                negativeColor = opts.fillStyle;\n            }\n            var positiveColor = opts.fillStyle;\n            var base;\n            var xstart; \n            var ystart;\n            \n            if (this.barDirection == 'vertical') {\n                for (var i=0; i<gridData.length; i++) {\n                    if (!this._stack && this.data[i][1] == null) {\n                        continue;\n                    }\n                    points = [];\n                    base = gridData[i][0] + this._barNudge;\n                    \n                    // stacked\n                    if (this._stack && this._prevGridData.length) {\n                        ystart = getStart(this.index, i, this._plotData[i][1], plot, 'y');\n                    }\n\n                    // not stacked\n                    else {\n                        if (this.fillToZero) {\n                            ystart = this._yaxis.series_u2p(0);\n                        }\n                        else if (this.waterfall && i > 0 && i < this.gridData.length-1) {\n                            ystart = this.gridData[i-1][1];\n                        }\n                        else if (this.waterfall && i == 0 && i < this.gridData.length-1) {\n                            if (this._yaxis.min <= 0 && this._yaxis.max >= 0) {\n                                ystart = this._yaxis.series_u2p(0);\n                            }\n                            else if (this._yaxis.min > 0) {\n                                ystart = ctx.canvas.height;\n                            }\n                            else {\n                                ystart = 0;\n                            }\n                        }\n                        else if (this.waterfall && i == this.gridData.length - 1) {\n                            if (this._yaxis.min <= 0 && this._yaxis.max >= 0) {\n                                ystart = this._yaxis.series_u2p(0);\n                            }\n                            else if (this._yaxis.min > 0) {\n                                ystart = ctx.canvas.height;\n                            }\n                            else {\n                                ystart = 0;\n                            }\n                        }\n                        else {\n                            ystart = ctx.canvas.height;\n                        }\n                    }\n                    if ((this.fillToZero && this._plotData[i][1] < 0) || (this.waterfall && this._data[i][1] < 0)) {\n                        if (this.varyBarColor && !this._stack) {\n                            if (this.useNegativeColors) {\n                                opts.fillStyle = negativeColors.next();\n                            }\n                            else {\n                                opts.fillStyle = positiveColors.next();\n                            }\n                        }\n                        else {\n                            opts.fillStyle = negativeColor;\n                        }\n                    }\n                    else {\n                        if (this.varyBarColor && !this._stack) {\n                            opts.fillStyle = positiveColors.next();\n                        }\n                        else {\n                            opts.fillStyle = positiveColor;\n                        }\n                    }\n                    \n                    if (!this.fillToZero || this._plotData[i][1] >= 0) { \n                        points.push([base-this.barWidth/2, ystart]);\n                        points.push([base-this.barWidth/2, gridData[i][1]]);\n                        points.push([base+this.barWidth/2, gridData[i][1]]);\n                        points.push([base+this.barWidth/2, ystart]);\n                    }\n                    // for negative bars make sure points are always ordered clockwise\n                    else {              \n                        points.push([base-this.barWidth/2, gridData[i][1]]);\n                        points.push([base-this.barWidth/2, ystart]);\n                        points.push([base+this.barWidth/2, ystart]);\n                        points.push([base+this.barWidth/2, gridData[i][1]]);\n                    }\n                    this._barPoints.push(points);\n                    // now draw the shadows if not stacked.\n                    // for stacked plots, they are predrawn by drawShadow\n                    if (shadow && !this._stack) {\n                        var sopts = $.extend(true, {}, opts);\n                        // need to get rid of fillStyle on shadow.\n                        delete sopts.fillStyle;\n                        this.renderer.shadowRenderer.draw(ctx, points, sopts);\n                    }\n                    var clr = opts.fillStyle || this.color;\n                    this._dataColors.push(clr);\n                    this.renderer.shapeRenderer.draw(ctx, points, opts); \n                }\n            }\n            \n            else if (this.barDirection == 'horizontal'){\n                for (var i=0; i<gridData.length; i++) {\n                    if (!this._stack && this.data[i][0] == null) {\n                        continue;\n                    }\n                    points = [];\n                    base = gridData[i][1] - this._barNudge;\n                    xstart;\n                    \n                    if (this._stack && this._prevGridData.length) {\n                        xstart = getStart(this.index, i, this._plotData[i][0], plot, 'x');\n                    }\n                    // not stacked\n                    else {\n                        if (this.fillToZero) {\n                            xstart = this._xaxis.series_u2p(0);\n                        }\n                        else if (this.waterfall && i > 0 && i < this.gridData.length-1) {\n                            xstart = this.gridData[i-1][0];\n                        }\n                        else if (this.waterfall && i == 0 && i < this.gridData.length-1) {\n                            if (this._xaxis.min <= 0 && this._xaxis.max >= 0) {\n                                xstart = this._xaxis.series_u2p(0);\n                            }\n                            else if (this._xaxis.min > 0) {\n                                xstart = 0;\n                            }\n                            else {\n                                xstart = 0;\n                            }\n                        }\n                        else if (this.waterfall && i == this.gridData.length - 1) {\n                            if (this._xaxis.min <= 0 && this._xaxis.max >= 0) {\n                                xstart = this._xaxis.series_u2p(0);\n                            }\n                            else if (this._xaxis.min > 0) {\n                                xstart = 0;\n                            }\n                            else {\n                                xstart = ctx.canvas.width;\n                            }\n                        }\n                        else {\n                            xstart = 0;\n                        }\n                    }\n                    if ((this.fillToZero && this._plotData[i][0] < 0) || (this.waterfall && this._data[i][0] < 0)) {\n                        if (this.varyBarColor && !this._stack) {\n                            if (this.useNegativeColors) {\n                                opts.fillStyle = negativeColors.next();\n                            }\n                            else {\n                                opts.fillStyle = positiveColors.next();\n                            }\n                        }\n                        else {\n                            opts.fillStyle = negativeColor;\n                        }\n                    }\n                    else {\n                        if (this.varyBarColor && !this._stack) {\n                            opts.fillStyle = positiveColors.next();\n                        }\n                        else {\n                            opts.fillStyle = positiveColor;\n                        }                    \n                    }\n                    \n\n                    if (!this.fillToZero || this._plotData[i][0] >= 0) {\n                        points.push([xstart, base + this.barWidth / 2]);\n                        points.push([xstart, base - this.barWidth / 2]);\n                        points.push([gridData[i][0], base - this.barWidth / 2]);\n                        points.push([gridData[i][0], base + this.barWidth / 2]);\n                    }\n                    else {\n                        points.push([gridData[i][0], base + this.barWidth / 2]);\n                        points.push([gridData[i][0], base - this.barWidth / 2]);\n                        points.push([xstart, base - this.barWidth / 2]);\n                        points.push([xstart, base + this.barWidth / 2]);\n                    }\n\n                    this._barPoints.push(points);\n                    // now draw the shadows if not stacked.\n                    // for stacked plots, they are predrawn by drawShadow\n                    if (shadow && !this._stack) {\n                        var sopts = $.extend(true, {}, opts);\n                        delete sopts.fillStyle;\n                        this.renderer.shadowRenderer.draw(ctx, points, sopts);\n                    }\n                    var clr = opts.fillStyle || this.color;\n                    this._dataColors.push(clr);\n                    this.renderer.shapeRenderer.draw(ctx, points, opts);\n                } \n            }\n        }                \n        \n        if (this.highlightColors.length == 0) {\n            this.highlightColors = $.jqplot.computeHighlightColors(this._dataColors);\n        }\n        \n        else if (typeof(this.highlightColors) == 'string') {\n            var temp = this.highlightColors;\n            this.highlightColors = [];\n            for (var i=0; i<this._dataColors.length; i++) {\n                this.highlightColors.push(temp);\n            }\n        }\n        \n    };\n    \n     \n    // for stacked plots, shadows will be pre drawn by drawShadow.\n    $.jqplot.BarRenderer.prototype.drawShadow = function(ctx, gridData, options, plot) {\n        var i;\n        var opts = (options != undefined) ? options : {};\n        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;\n        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;\n        var fill = (opts.fill != undefined) ? opts.fill : this.fill;\n        var xaxis = this.xaxis;\n        var yaxis = this.yaxis;\n        var xp = this._xaxis.series_u2p;\n        var yp = this._yaxis.series_u2p;\n        var pointx, points, pointy, nvals, nseries, pos;\n        \n        if (this._stack && this.shadow) {\n            if (this.barWidth == null) {\n                this.renderer.setBarWidth.call(this);\n            }\n        \n            var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);\n            nvals = temp[0];\n            nseries = temp[1];\n            pos = temp[2];\n        \n            if (this._stack) {\n                this._barNudge = 0;\n            }\n            else {\n                this._barNudge = (-Math.abs(nseries/2 - 0.5) + pos) * (this.barWidth + this.barPadding);\n            }\n            if (showLine) {\n            \n                if (this.barDirection == 'vertical') {\n                    for (var i=0; i<gridData.length; i++) {\n                        if (this.data[i][1] == null) {\n                            continue;\n                        }\n                        points = [];\n                        var base = gridData[i][0] + this._barNudge;\n                        var ystart;\n                    \n                        if (this._stack && this._prevGridData.length) {\n                            ystart = getStart(this.index, i, this._plotData[i][1], plot, 'y');\n                        }\n                        else {\n                            if (this.fillToZero) {\n                                ystart = this._yaxis.series_u2p(0);\n                            }\n                            else {\n                                ystart = ctx.canvas.height;\n                            }\n                        }\n                    \n                        points.push([base-this.barWidth/2, ystart]);\n                        points.push([base-this.barWidth/2, gridData[i][1]]);\n                        points.push([base+this.barWidth/2, gridData[i][1]]);\n                        points.push([base+this.barWidth/2, ystart]);\n                        this.renderer.shadowRenderer.draw(ctx, points, opts);\n                    }\n                }\n            \n                else if (this.barDirection == 'horizontal'){\n                    for (var i=0; i<gridData.length; i++) {\n                        if (this.data[i][0] == null) {\n                            continue;\n                        }\n                        points = [];\n                        var base = gridData[i][1] - this._barNudge;\n                        var xstart;\n                    \n                        if (this._stack && this._prevGridData.length) {\n                            xstart = getStart(this.index, i, this._plotData[i][0], plot, 'x');\n                        }\n                        else {\n                            if (this.fillToZero) {\n                                xstart = this._xaxis.series_u2p(0);\n                            }\n                            else {\n                                xstart = 0;\n                            }\n                        }\n                    \n                        points.push([xstart, base+this.barWidth/2]);\n                        points.push([gridData[i][0], base+this.barWidth/2]);\n                        points.push([gridData[i][0], base-this.barWidth/2]);\n                        points.push([xstart, base-this.barWidth/2]);\n                        this.renderer.shadowRenderer.draw(ctx, points, opts);\n                    }  \n                }\n            }   \n            \n        }\n    };\n    \n    function postInit(target, data, options) {\n        for (var i=0; i<this.series.length; i++) {\n            if (this.series[i].renderer.constructor == $.jqplot.BarRenderer) {\n                // don't allow mouseover and mousedown at same time.\n                if (this.series[i].highlightMouseOver) {\n                    this.series[i].highlightMouseDown = false;\n                }\n            }\n        }\n    }\n    \n    // called within context of plot\n    // create a canvas which we can draw on.\n    // insert it before the eventCanvas, so eventCanvas will still capture events.\n    function postPlotDraw() {\n        // Memory Leaks patch    \n        if (this.plugins.barRenderer && this.plugins.barRenderer.highlightCanvas) {\n\n            this.plugins.barRenderer.highlightCanvas.resetCanvas();\n            this.plugins.barRenderer.highlightCanvas = null;\n        }\n         \n        this.plugins.barRenderer = {highlightedSeriesIndex:null};\n        this.plugins.barRenderer.highlightCanvas = new $.jqplot.GenericCanvas();\n        \n        this.eventCanvas._elem.before(this.plugins.barRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-barRenderer-highlight-canvas', this._plotDimensions, this));\n        this.plugins.barRenderer.highlightCanvas.setContext();\n        this.eventCanvas._elem.bind('mouseleave', {plot:this}, function (ev) { unhighlight(ev.data.plot); });\n    }   \n    \n    function highlight (plot, sidx, pidx, points) {\n        var s = plot.series[sidx];\n        var canvas = plot.plugins.barRenderer.highlightCanvas;\n        canvas._ctx.clearRect(0,0,canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n        s._highlightedPoint = pidx;\n        plot.plugins.barRenderer.highlightedSeriesIndex = sidx;\n        var opts = {fillStyle: s.highlightColors[pidx]};\n        s.renderer.shapeRenderer.draw(canvas._ctx, points, opts);\n        canvas = null;\n    }\n    \n    function unhighlight (plot) {\n        var canvas = plot.plugins.barRenderer.highlightCanvas;\n        canvas._ctx.clearRect(0,0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);\n        for (var i=0; i<plot.series.length; i++) {\n            plot.series[i]._highlightedPoint = null;\n        }\n        plot.plugins.barRenderer.highlightedSeriesIndex = null;\n        plot.target.trigger('jqplotDataUnhighlight');\n        canvas =  null;\n    }\n    \n    \n    function handleMove(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            var evt1 = jQuery.Event('jqplotDataMouseOver');\n            evt1.pageX = ev.pageX;\n            evt1.pageY = ev.pageY;\n            plot.target.trigger(evt1, ins);\n            if (plot.series[ins[0]].show && plot.series[ins[0]].highlightMouseOver &&\n                !(ins[0] == plot.plugins.barRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {\n                var evt = jQuery.Event('jqplotDataHighlight');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);\n            }\n        }\n        else if (neighbor == null) {\n            unhighlight (plot);\n        }\n    }\n    \n    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.barRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {\n                var evt = jQuery.Event('jqplotDataHighlight');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                plot.target.trigger(evt, ins);\n                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);\n            }\n        }\n        else if (neighbor == null) {\n            unhighlight (plot);\n        }\n    }\n    \n    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {\n        var idx = plot.plugins.barRenderer.highlightedSeriesIndex;\n        if (idx != null && plot.series[idx].highlightMouseDown) {\n            unhighlight(plot);\n        }\n    }\n    \n    function handleClick(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            var evt = jQuery.Event('jqplotDataClick');\n            evt.which = ev.which;\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            plot.target.trigger(evt, ins);\n        }\n    }\n    \n    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {\n        if (neighbor) {\n            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];\n            var idx = plot.plugins.barRenderer.highlightedSeriesIndex;\n            if (idx != null && plot.series[idx].highlightMouseDown) {\n                unhighlight(plot);\n            }\n            var evt = jQuery.Event('jqplotDataRightClick');\n            evt.which = ev.which;\n            evt.pageX = ev.pageX;\n            evt.pageY = ev.pageY;\n            plot.target.trigger(evt, ins);\n        }\n    }\n    \n    \n})(jQuery);\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    /**\n    * Class: $.jqplot.CanvasAxisLabelRenderer\n    * Renderer to draw axis labels with a canvas element to support advanced\n    * featrues such as rotated text.  This renderer uses a separate rendering engine\n    * to draw the text on the canvas.  Two modes of rendering the text are available.\n    * If the browser has native font support for canvas fonts (currently Mozila 3.5\n    * and Safari 4), you can enable text rendering with the canvas fillText method.\n    * You do so by setting the \"enableFontSupport\" option to true. \n    * \n    * Browsers lacking native font support will have the text drawn on the canvas\n    * using the Hershey font metrics.  Even if the \"enableFontSupport\" option is true\n    * non-supporting browsers will still render with the Hershey font.\n    * \n    */\n    $.jqplot.CanvasAxisLabelRenderer = function(options) {\n        // Group: Properties\n        \n        // prop: angle\n        // angle of text, measured clockwise from x axis.\n        this.angle = 0;\n        // name of the axis associated with this tick\n        this.axis;\n        // prop: show\n        // whether or not to show the tick (mark and label).\n        this.show = true;\n        // prop: showLabel\n        // whether or not to show the label.\n        this.showLabel = true;\n        // prop: label\n        // label for the axis.\n        this.label = '';\n        // prop: fontFamily\n        // CSS spec for the font-family css attribute.\n        // Applies only to browsers supporting native font rendering in the\n        // canvas tag.  Currently Mozilla 3.5 and Safari 4.\n        this.fontFamily = '\"Trebuchet MS\", Arial, Helvetica, sans-serif';\n        // prop: fontSize\n        // CSS spec for font size.\n        this.fontSize = '11pt';\n        // prop: fontWeight\n        // CSS spec for fontWeight:  normal, bold, bolder, lighter or a number 100 - 900\n        this.fontWeight = 'normal';\n        // prop: fontStretch\n        // Multiplier to condense or expand font width.  \n        // Applies only to browsers which don't support canvas native font rendering.\n        this.fontStretch = 1.0;\n        // prop: textColor\n        // css spec for the color attribute.\n        this.textColor = '#666666';\n        // prop: enableFontSupport\n        // true to turn on native canvas font support in Mozilla 3.5+ and Safari 4+.\n        // If true, label will be drawn with canvas tag native support for fonts.\n        // If false, label will be drawn with Hershey font metrics.\n        this.enableFontSupport = true;\n        // prop: pt2px\n        // Point to pixel scaling factor, used for computing height of bounding box\n        // around a label.  The labels text renderer has a default setting of 1.4, which \n        // should be suitable for most fonts.  Leave as null to use default.  If tops of\n        // letters appear clipped, increase this.  If bounding box seems too big, decrease.\n        // This is an issue only with the native font renderering capabilities of Mozilla\n        // 3.5 and Safari 4 since they do not provide a method to determine the font height.\n        this.pt2px = null;\n        \n        this._elem;\n        this._ctx;\n        this._plotWidth;\n        this._plotHeight;\n        this._plotDimensions = {height:null, width:null};\n        \n        $.extend(true, this, options);\n        \n        if (options.angle == null && this.axis != 'xaxis' && this.axis != 'x2axis') {\n            this.angle = -90;\n        }\n        \n        var ropts = {fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily};\n        if (this.pt2px) {\n            ropts.pt2px = this.pt2px;\n        }\n        \n        if (this.enableFontSupport) {\n            if ($.jqplot.support_canvas_text()) {\n                this._textRenderer = new $.jqplot.CanvasFontRenderer(ropts);\n            }\n            \n            else {\n                this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); \n            }\n        }\n        else {\n            this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); \n        }\n    };\n    \n    $.jqplot.CanvasAxisLabelRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n        this._textRenderer.init({fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily});\n    };\n    \n    // return width along the x axis\n    // will check first to see if an element exists.\n    // if not, will return the computed text box width.\n    $.jqplot.CanvasAxisLabelRenderer.prototype.getWidth = function(ctx) {\n        if (this._elem) {\n         return this._elem.outerWidth(true);\n        }\n        else {\n            var tr = this._textRenderer;\n            var l = tr.getWidth(ctx);\n            var h = tr.getHeight(ctx);\n            var w = Math.abs(Math.sin(tr.angle)*h) + Math.abs(Math.cos(tr.angle)*l);\n            return w;\n        }\n    };\n    \n    // return height along the y axis.\n    $.jqplot.CanvasAxisLabelRenderer.prototype.getHeight = function(ctx) {\n        if (this._elem) {\n         return this._elem.outerHeight(true);\n        }\n        else {\n            var tr = this._textRenderer;\n            var l = tr.getWidth(ctx);\n            var h = tr.getHeight(ctx);\n            var w = Math.abs(Math.cos(tr.angle)*h) + Math.abs(Math.sin(tr.angle)*l);\n            return w;\n        }\n    };\n    \n    $.jqplot.CanvasAxisLabelRenderer.prototype.getAngleRad = function() {\n        var a = this.angle * Math.PI/180;\n        return a;\n    };\n    \n    $.jqplot.CanvasAxisLabelRenderer.prototype.draw = function(ctx, plot) {\n          // Memory Leaks patch\n          if (this._elem) {\n              if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                  window.G_vmlCanvasManager.uninitElement(this._elem.get(0));\n              }\n            \n              this._elem.emptyForce();\n              this._elem = null;\n          }\n\n        // create a canvas here, but can't draw on it untill it is appended\n        // to dom for IE compatability.\n        var elem = plot.canvasManager.getCanvas();\n\n        this._textRenderer.setText(this.label, ctx);\n        var w = this.getWidth(ctx);\n        var h = this.getHeight(ctx);\n        elem.width = w;\n        elem.height = h;\n        elem.style.width = w;\n        elem.style.height = h;\n        \n        elem = plot.canvasManager.initCanvas(elem);\n\n        this._elem = $(elem);\n        this._elem.css({ position: 'absolute'});\n        this._elem.addClass('jqplot-'+this.axis+'-label');\n        \n        elem = null;\n        return this._elem;\n    };\n    \n    $.jqplot.CanvasAxisLabelRenderer.prototype.pack = function() {\n        this._textRenderer.draw(this._elem.get(0).getContext(\"2d\"), this.label);\n    };\n    \n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    /**\n    *  Class: $.jqplot.CanvasAxisTickRenderer\n    * Renderer to draw axis ticks with a canvas element to support advanced\n    * featrues such as rotated text.  This renderer uses a separate rendering engine\n    * to draw the text on the canvas.  Two modes of rendering the text are available.\n    * If the browser has native font support for canvas fonts (currently Mozila 3.5\n    * and Safari 4), you can enable text rendering with the canvas fillText method.\n    * You do so by setting the \"enableFontSupport\" option to true. \n    * \n    * Browsers lacking native font support will have the text drawn on the canvas\n    * using the Hershey font metrics.  Even if the \"enableFontSupport\" option is true\n    * non-supporting browsers will still render with the Hershey font.\n    */\n    $.jqplot.CanvasAxisTickRenderer = function(options) {\n        // Group: Properties\n        \n        // prop: mark\n        // tick mark on the axis.  One of 'inside', 'outside', 'cross', '' or null.\n        this.mark = 'outside';\n        // prop: showMark\n        // whether or not to show the mark on the axis.\n        this.showMark = true;\n        // prop: showGridline\n        // whether or not to draw the gridline on the grid at this tick.\n        this.showGridline = true;\n        // prop: isMinorTick\n        // if this is a minor tick.\n        this.isMinorTick = false;\n        // prop: angle\n        // angle of text, measured clockwise from x axis.\n        this.angle = 0;\n        // prop:  markSize\n        // Length of the tick marks in pixels.  For 'cross' style, length\n        // will be stoked above and below axis, so total length will be twice this.\n        this.markSize = 4;\n        // prop: show\n        // whether or not to show the tick (mark and label).\n        this.show = true;\n        // prop: showLabel\n        // whether or not to show the label.\n        this.showLabel = true;\n        // prop: labelPosition\n        // 'auto', 'start', 'middle' or 'end'.\n        // Whether tick label should be positioned so the start, middle, or end\n        // of the tick mark.\n        this.labelPosition = 'auto';\n        this.label = '';\n        this.value = null;\n        this._styles = {};\n        // prop: formatter\n        // A class of a formatter for the tick text.\n        // The default $.jqplot.DefaultTickFormatter uses sprintf.\n        this.formatter = $.jqplot.DefaultTickFormatter;\n        // prop: formatString\n        // string passed to the formatter.\n        this.formatString = '';\n        // prop: prefix\n        // String to prepend to the tick label.\n        // Prefix is prepended to the formatted tick label.\n        this.prefix = '';\n        // prop: fontFamily\n        // css spec for the font-family css attribute.\n        this.fontFamily = '\"Trebuchet MS\", Arial, Helvetica, sans-serif';\n        // prop: fontSize\n        // CSS spec for font size.\n        this.fontSize = '10pt';\n        // prop: fontWeight\n        // CSS spec for fontWeight\n        this.fontWeight = 'normal';\n        // prop: fontStretch\n        // Multiplier to condense or expand font width.  \n        // Applies only to browsers which don't support canvas native font rendering.\n        this.fontStretch = 1.0;\n        // prop: textColor\n        // css spec for the color attribute.\n        this.textColor = '#666666';\n        // prop: enableFontSupport\n        // true to turn on native canvas font support in Mozilla 3.5+ and Safari 4+.\n        // If true, tick label will be drawn with canvas tag native support for fonts.\n        // If false, tick label will be drawn with Hershey font metrics.\n        this.enableFontSupport = true;\n        // prop: pt2px\n        // Point to pixel scaling factor, used for computing height of bounding box\n        // around a label.  The labels text renderer has a default setting of 1.4, which \n        // should be suitable for most fonts.  Leave as null to use default.  If tops of\n        // letters appear clipped, increase this.  If bounding box seems too big, decrease.\n        // This is an issue only with the native font renderering capabilities of Mozilla\n        // 3.5 and Safari 4 since they do not provide a method to determine the font height.\n        this.pt2px = null;\n        \n        this._elem;\n        this._ctx;\n        this._plotWidth;\n        this._plotHeight;\n        this._plotDimensions = {height:null, width:null};\n        \n        $.extend(true, this, options);\n        \n        var ropts = {fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily};\n        if (this.pt2px) {\n            ropts.pt2px = this.pt2px;\n        }\n        \n        if (this.enableFontSupport) {\n            if ($.jqplot.support_canvas_text()) {\n                this._textRenderer = new $.jqplot.CanvasFontRenderer(ropts);\n            }\n            \n            else {\n                this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); \n            }\n        }\n        else {\n            this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); \n        }\n    };\n    \n    $.jqplot.CanvasAxisTickRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n        this._textRenderer.init({fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily});\n    };\n    \n    // return width along the x axis\n    // will check first to see if an element exists.\n    // if not, will return the computed text box width.\n    $.jqplot.CanvasAxisTickRenderer.prototype.getWidth = function(ctx) {\n        if (this._elem) {\n         return this._elem.outerWidth(true);\n        }\n        else {\n            var tr = this._textRenderer;\n            var l = tr.getWidth(ctx);\n            var h = tr.getHeight(ctx);\n            var w = Math.abs(Math.sin(tr.angle)*h) + Math.abs(Math.cos(tr.angle)*l);\n            return w;\n        }\n    };\n    \n    // return height along the y axis.\n    $.jqplot.CanvasAxisTickRenderer.prototype.getHeight = function(ctx) {\n        if (this._elem) {\n         return this._elem.outerHeight(true);\n        }\n        else {\n            var tr = this._textRenderer;\n            var l = tr.getWidth(ctx);\n            var h = tr.getHeight(ctx);\n            var w = Math.abs(Math.cos(tr.angle)*h) + Math.abs(Math.sin(tr.angle)*l);\n            return w;\n        }\n    };\n\n    // return top.\n    $.jqplot.CanvasAxisTickRenderer.prototype.getTop = function(ctx) {\n        if (this._elem) {\n         return this._elem.position().top;\n        }\n        else {\n            return null;\n        }\n    };\n    \n    $.jqplot.CanvasAxisTickRenderer.prototype.getAngleRad = function() {\n        var a = this.angle * Math.PI/180;\n        return a;\n    };\n    \n    \n    $.jqplot.CanvasAxisTickRenderer.prototype.setTick = function(value, axisName, isMinor) {\n        this.value = value;\n        if (isMinor) {\n            this.isMinorTick = true;\n        }\n        return this;\n    };\n    \n    $.jqplot.CanvasAxisTickRenderer.prototype.draw = function(ctx, plot) {\n        if (!this.label) {\n            this.label = this.prefix + this.formatter(this.formatString, this.value);\n        }\n        \n        // Memory Leaks patch\n        if (this._elem) {\n            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {\n                window.G_vmlCanvasManager.uninitElement(this._elem.get(0));\n            }\n            \n            this._elem.emptyForce();\n            this._elem = null;\n        }\n\n        // create a canvas here, but can't draw on it untill it is appended\n        // to dom for IE compatability.\n\n        var elem = plot.canvasManager.getCanvas();\n\n        this._textRenderer.setText(this.label, ctx);\n        var w = this.getWidth(ctx);\n        var h = this.getHeight(ctx);\n        // canvases seem to need to have width and heigh attributes directly set.\n        elem.width = w;\n        elem.height = h;\n        elem.style.width = w;\n        elem.style.height = h;\n        elem.style.textAlign = 'left';\n        elem.style.position = 'absolute';\n\n        elem = plot.canvasManager.initCanvas(elem);\n\n        this._elem = $(elem);\n        this._elem.css(this._styles);\n        this._elem.addClass('jqplot-'+this.axis+'-tick');\n\n        elem = null;\n        return this._elem;\n    };\n    \n    $.jqplot.CanvasAxisTickRenderer.prototype.pack = function() {\n        this._textRenderer.draw(this._elem.get(0).getContext(\"2d\"), this.label);\n    };\n    \n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n *\n * included jsDate library by Chris Leonello:\n *\n * Copyright (c) 2010-2015 Chris Leonello\n *\n * jsDate is currently available for use in all personal or commercial projects \n * under both the MIT and GPL version 2.0 licenses. This means that you can \n * choose the license that best suits your project and use it accordingly.\n *\n * jsDate borrows many concepts and ideas from the Date Instance \n * Methods by Ken Snyder along with some parts of Ken's actual code.\n * \n * Ken's original Date Instance Methods and copyright notice:\n * \n * Ken Snyder (ken d snyder at gmail dot com)\n * 2008-09-10\n * version 2.0.2 (http://kendsnyder.com/sandbox/date/)     \n * Creative Commons Attribution License 3.0 (http://creativecommons.org/licenses/by/3.0/)\n *\n * jqplotToImage function based on Larry Siden's export-jqplot-to-png.js.\n * Larry has generously given permission to adapt his code for inclusion\n * into jqPlot.\n *\n * Larry's original code can be found here:\n *\n * https://github.com/lsiden/export-jqplot-to-png\n * \n * \n */\n\n(function($) {    \n    // This code is a modified version of the canvastext.js code, copyright below:\n    //\n    // This code is released to the public domain by Jim Studt, 2007.\n    // He may keep some sort of up to date copy at http://www.federated.com/~jim/canvastext/\n    //\n    $.jqplot.CanvasTextRenderer = function(options){\n        this.fontStyle = 'normal';  // normal, italic, oblique [not implemented]\n        this.fontVariant = 'normal';    // normal, small caps [not implemented]\n        this.fontWeight = 'normal'; // normal, bold, bolder, lighter, 100 - 900\n        this.fontSize = '10px'; \n        this.fontFamily = 'sans-serif';\n        this.fontStretch = 1.0;\n        this.fillStyle = '#666666';\n        this.angle = 0;\n        this.textAlign = 'start';\n        this.textBaseline = 'alphabetic';\n        this.text;\n        this.width;\n        this.height;\n        this.pt2px = 1.28;\n\n        $.extend(true, this, options);\n        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);\n        this.setHeight();\n    };\n    \n    $.jqplot.CanvasTextRenderer.prototype.init = function(options) {\n        $.extend(true, this, options);\n        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);\n        this.setHeight();\n    };\n    \n    // convert css spec into point size\n    // returns float\n    $.jqplot.CanvasTextRenderer.prototype.normalizeFontSize = function(sz) {\n        sz = String(sz);\n        var n = parseFloat(sz);\n        if (sz.indexOf('px') > -1) {\n            return n/this.pt2px;\n        }\n        else if (sz.indexOf('pt') > -1) {\n            return n;\n        }\n        else if (sz.indexOf('em') > -1) {\n            return n*12;\n        }\n        else if (sz.indexOf('%') > -1) {\n            return n*12/100;\n        }\n        // default to pixels;\n        else {\n            return n/this.pt2px;\n        }\n    };\n    \n    \n    $.jqplot.CanvasTextRenderer.prototype.fontWeight2Float = function(w) {\n        // w = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900\n        // return values adjusted for Hershey font.\n        if (Number(w)) {\n            return w/400;\n        }\n        else {\n            switch (w) {\n                case 'normal':\n                    return 1;\n                    break;\n                case 'bold':\n                    return 1.75;\n                    break;\n                case 'bolder':\n                    return 2.25;\n                    break;\n                case 'lighter':\n                    return 0.75;\n                    break;\n                default:\n                    return 1;\n                    break;\n             }   \n        }\n    };\n    \n    $.jqplot.CanvasTextRenderer.prototype.getText = function() {\n        return this.text;\n    };\n    \n    $.jqplot.CanvasTextRenderer.prototype.setText = function(t, ctx) {\n        this.text = t;\n        this.setWidth(ctx);\n        return this;\n    };\n    \n    $.jqplot.CanvasTextRenderer.prototype.getWidth = function(ctx) {\n        return this.width;\n    };\n    \n    $.jqplot.CanvasTextRenderer.prototype.setWidth = function(ctx, w) {\n        if (!w) {\n            this.width = this.measure(ctx, this.text);\n        }\n        else {\n            this.width = w;   \n        }\n        return this;\n    };\n    \n    // return height in pixels.\n    $.jqplot.CanvasTextRenderer.prototype.getHeight = function(ctx) {\n        return this.height;\n    };\n    \n    // w - height in pt\n    // set heigh in px\n    $.jqplot.CanvasTextRenderer.prototype.setHeight = function(w) {\n        if (!w) {\n            //height = this.fontSize /0.75;\n            this.height = this.normalizedFontSize * this.pt2px;\n        }\n        else {\n            this.height = w;   \n        }\n        return this;\n    };\n\n    $.jqplot.CanvasTextRenderer.prototype.letter = function (ch)\n    {\n        return this.letters[ch];\n    };\n\n    $.jqplot.CanvasTextRenderer.prototype.ascent = function()\n    {\n        return this.normalizedFontSize;\n    };\n\n    $.jqplot.CanvasTextRenderer.prototype.descent = function()\n    {\n        return 7.0*this.normalizedFontSize/25.0;\n    };\n\n    $.jqplot.CanvasTextRenderer.prototype.measure = function(ctx, str)\n    {\n        var total = 0;\n        var len = str.length;\n \n        for (var i = 0; i < len; i++) {\n            var c = this.letter(str.charAt(i));\n            if (c) {\n                total += c.width * this.normalizedFontSize / 25.0 * this.fontStretch;\n            }\n        }\n        return total;\n    };\n\n    $.jqplot.CanvasTextRenderer.prototype.draw = function(ctx,str)\n    {\n        var x = 0;\n        // leave room at bottom for descenders.\n        var y = this.height*0.72;\n         var total = 0;\n         var len = str.length;\n         var mag = this.normalizedFontSize / 25.0;\n\n         ctx.save();\n         var tx, ty;\n         \n         // 1st quadrant\n         if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {\n             tx = 0;\n             ty = -Math.sin(this.angle) * this.width;\n         }\n         // 4th quadrant\n         else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {\n             tx = Math.sin(this.angle) * this.height;\n             ty = 0;\n         }\n         // 2nd quadrant\n         else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {\n             tx = -Math.cos(this.angle) * this.width;\n             ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;\n         }\n         // 3rd quadrant\n         else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {\n             tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;\n             ty = -Math.cos(this.angle) * this.height;\n         }\n         \n         ctx.strokeStyle = this.fillStyle;\n         ctx.fillStyle = this.fillStyle;\n         ctx.translate(tx, ty);\n         ctx.rotate(this.angle);\n         ctx.lineCap = \"round\";\n         // multiplier was 2.0\n         var fact = (this.normalizedFontSize > 30) ? 2.0 : 2 + (30 - this.normalizedFontSize)/20;\n         ctx.lineWidth = fact * mag * this.fontWeight2Float(this.fontWeight);\n         \n         for ( var i = 0; i < len; i++) {\n            var c = this.letter( str.charAt(i));\n            if ( !c) {\n                continue;\n            }\n\n            ctx.beginPath();\n\n            var penUp = 1;\n            var needStroke = 0;\n            for ( var j = 0; j < c.points.length; j++) {\n              var a = c.points[j];\n              if ( a[0] == -1 && a[1] == -1) {\n                  penUp = 1;\n                  continue;\n              }\n              if ( penUp) {\n                  ctx.moveTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);\n                  penUp = false;\n              } else {\n                  ctx.lineTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);\n              }\n            }\n            ctx.stroke();\n            x += c.width*mag*this.fontStretch;\n         }\n         ctx.restore();\n         return total;\n    };\n\n    $.jqplot.CanvasTextRenderer.prototype.letters = {\n         ' ': { width: 16, points: [] },\n         '!': { width: 10, points: [[5,21],[5,7],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },\n         '\"': { width: 16, points: [[4,21],[4,14],[-1,-1],[12,21],[12,14]] },\n         '#': { width: 21, points: [[11,25],[4,-7],[-1,-1],[17,25],[10,-7],[-1,-1],[4,12],[18,12],[-1,-1],[3,6],[17,6]] },\n         '$': { width: 20, points: [[8,25],[8,-4],[-1,-1],[12,25],[12,-4],[-1,-1],[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },\n         '%': { width: 24, points: [[21,21],[3,0],[-1,-1],[8,21],[10,19],[10,17],[9,15],[7,14],[5,14],[3,16],[3,18],[4,20],[6,21],[8,21],[10,20],[13,19],[16,19],[19,20],[21,21],[-1,-1],[17,7],[15,6],[14,4],[14,2],[16,0],[18,0],[20,1],[21,3],[21,5],[19,7],[17,7]] },\n         '&': { width: 26, points: [[23,12],[23,13],[22,14],[21,14],[20,13],[19,11],[17,6],[15,3],[13,1],[11,0],[7,0],[5,1],[4,2],[3,4],[3,6],[4,8],[5,9],[12,13],[13,14],[14,16],[14,18],[13,20],[11,21],[9,20],[8,18],[8,16],[9,13],[11,10],[16,3],[18,1],[20,0],[22,0],[23,1],[23,2]] },\n         '\\'': { width: 10, points: [[5,19],[4,20],[5,21],[6,20],[6,18],[5,16],[4,15]] },\n         '(': { width: 14, points: [[11,25],[9,23],[7,20],[5,16],[4,11],[4,7],[5,2],[7,-2],[9,-5],[11,-7]] },\n         ')': { width: 14, points: [[3,25],[5,23],[7,20],[9,16],[10,11],[10,7],[9,2],[7,-2],[5,-5],[3,-7]] },\n         '*': { width: 16, points: [[8,21],[8,9],[-1,-1],[3,18],[13,12],[-1,-1],[13,18],[3,12]] },\n         '+': { width: 26, points: [[13,18],[13,0],[-1,-1],[4,9],[22,9]] },\n         ',': { width: 10, points: [[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },\n         '-': { width: 18, points: [[6,9],[12,9]] },\n         '.': { width: 10, points: [[5,2],[4,1],[5,0],[6,1],[5,2]] },\n         '/': { width: 22, points: [[20,25],[2,-7]] },\n         '0': { width: 20, points: [[9,21],[6,20],[4,17],[3,12],[3,9],[4,4],[6,1],[9,0],[11,0],[14,1],[16,4],[17,9],[17,12],[16,17],[14,20],[11,21],[9,21]] },\n         '1': { width: 20, points: [[6,17],[8,18],[11,21],[11,0]] },\n         '2': { width: 20, points: [[4,16],[4,17],[5,19],[6,20],[8,21],[12,21],[14,20],[15,19],[16,17],[16,15],[15,13],[13,10],[3,0],[17,0]] },\n         '3': { width: 20, points: [[5,21],[16,21],[10,13],[13,13],[15,12],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },\n         '4': { width: 20, points: [[13,21],[3,7],[18,7],[-1,-1],[13,21],[13,0]] },\n         '5': { width: 20, points: [[15,21],[5,21],[4,12],[5,13],[8,14],[11,14],[14,13],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },\n         '6': { width: 20, points: [[16,18],[15,20],[12,21],[10,21],[7,20],[5,17],[4,12],[4,7],[5,3],[7,1],[10,0],[11,0],[14,1],[16,3],[17,6],[17,7],[16,10],[14,12],[11,13],[10,13],[7,12],[5,10],[4,7]] },\n         '7': { width: 20, points: [[17,21],[7,0],[-1,-1],[3,21],[17,21]] },\n         '8': { width: 20, points: [[8,21],[5,20],[4,18],[4,16],[5,14],[7,13],[11,12],[14,11],[16,9],[17,7],[17,4],[16,2],[15,1],[12,0],[8,0],[5,1],[4,2],[3,4],[3,7],[4,9],[6,11],[9,12],[13,13],[15,14],[16,16],[16,18],[15,20],[12,21],[8,21]] },\n         '9': { width: 20, points: [[16,14],[15,11],[13,9],[10,8],[9,8],[6,9],[4,11],[3,14],[3,15],[4,18],[6,20],[9,21],[10,21],[13,20],[15,18],[16,14],[16,9],[15,4],[13,1],[10,0],[8,0],[5,1],[4,3]] },\n         ':': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },\n         ';': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },\n         '<': { width: 24, points: [[20,18],[4,9],[20,0]] },\n         '=': { width: 26, points: [[4,12],[22,12],[-1,-1],[4,6],[22,6]] },\n         '>': { width: 24, points: [[4,18],[20,9],[4,0]] },\n         '?': { width: 18, points: [[3,16],[3,17],[4,19],[5,20],[7,21],[11,21],[13,20],[14,19],[15,17],[15,15],[14,13],[13,12],[9,10],[9,7],[-1,-1],[9,2],[8,1],[9,0],[10,1],[9,2]] },\n         '@': { width: 27, points: [[18,13],[17,15],[15,16],[12,16],[10,15],[9,14],[8,11],[8,8],[9,6],[11,5],[14,5],[16,6],[17,8],[-1,-1],[12,16],[10,14],[9,11],[9,8],[10,6],[11,5],[-1,-1],[18,16],[17,8],[17,6],[19,5],[21,5],[23,7],[24,10],[24,12],[23,15],[22,17],[20,19],[18,20],[15,21],[12,21],[9,20],[7,19],[5,17],[4,15],[3,12],[3,9],[4,6],[5,4],[7,2],[9,1],[12,0],[15,0],[18,1],[20,2],[21,3],[-1,-1],[19,16],[18,8],[18,6],[19,5]] },\n         'A': { width: 18, points: [[9,21],[1,0],[-1,-1],[9,21],[17,0],[-1,-1],[4,7],[14,7]] },\n         'B': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[-1,-1],[4,11],[13,11],[16,10],[17,9],[18,7],[18,4],[17,2],[16,1],[13,0],[4,0]] },\n         'C': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5]] },\n         'D': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[11,21],[14,20],[16,18],[17,16],[18,13],[18,8],[17,5],[16,3],[14,1],[11,0],[4,0]] },\n         'E': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11],[-1,-1],[4,0],[17,0]] },\n         'F': { width: 18, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11]] },\n         'G': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[18,8],[-1,-1],[13,8],[18,8]] },\n         'H': { width: 22, points: [[4,21],[4,0],[-1,-1],[18,21],[18,0],[-1,-1],[4,11],[18,11]] },\n         'I': { width: 8, points: [[4,21],[4,0]] },\n         'J': { width: 16, points: [[12,21],[12,5],[11,2],[10,1],[8,0],[6,0],[4,1],[3,2],[2,5],[2,7]] },\n         'K': { width: 21, points: [[4,21],[4,0],[-1,-1],[18,21],[4,7],[-1,-1],[9,12],[18,0]] },\n         'L': { width: 17, points: [[4,21],[4,0],[-1,-1],[4,0],[16,0]] },\n         'M': { width: 24, points: [[4,21],[4,0],[-1,-1],[4,21],[12,0],[-1,-1],[20,21],[12,0],[-1,-1],[20,21],[20,0]] },\n         'N': { width: 22, points: [[4,21],[4,0],[-1,-1],[4,21],[18,0],[-1,-1],[18,21],[18,0]] },\n         'O': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21]] },\n         'P': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,14],[17,12],[16,11],[13,10],[4,10]] },\n         'Q': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21],[-1,-1],[12,4],[18,-2]] },\n         'R': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[4,11],[-1,-1],[11,11],[18,0]] },\n         'S': { width: 20, points: [[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },\n         'T': { width: 16, points: [[8,21],[8,0],[-1,-1],[1,21],[15,21]] },\n         'U': { width: 22, points: [[4,21],[4,6],[5,3],[7,1],[10,0],[12,0],[15,1],[17,3],[18,6],[18,21]] },\n         'V': { width: 18, points: [[1,21],[9,0],[-1,-1],[17,21],[9,0]] },\n         'W': { width: 24, points: [[2,21],[7,0],[-1,-1],[12,21],[7,0],[-1,-1],[12,21],[17,0],[-1,-1],[22,21],[17,0]] },\n         'X': { width: 20, points: [[3,21],[17,0],[-1,-1],[17,21],[3,0]] },\n         'Y': { width: 18, points: [[1,21],[9,11],[9,0],[-1,-1],[17,21],[9,11]] },\n         'Z': { width: 20, points: [[17,21],[3,0],[-1,-1],[3,21],[17,21],[-1,-1],[3,0],[17,0]] },\n         '[': { width: 14, points: [[4,25],[4,-7],[-1,-1],[5,25],[5,-7],[-1,-1],[4,25],[11,25],[-1,-1],[4,-7],[11,-7]] },\n         '\\\\': { width: 14, points: [[0,21],[14,-3]] },\n         ']': { width: 14, points: [[9,25],[9,-7],[-1,-1],[10,25],[10,-7],[-1,-1],[3,25],[10,25],[-1,-1],[3,-7],[10,-7]] },\n         '^': { width: 16, points: [[6,15],[8,18],[10,15],[-1,-1],[3,12],[8,17],[13,12],[-1,-1],[8,17],[8,0]] },\n         '_': { width: 16, points: [[0,-2],[16,-2]] },\n         '`': { width: 10, points: [[6,21],[5,20],[4,18],[4,16],[5,15],[6,16],[5,17]] },\n         'a': { width: 19, points: [[15,14],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },\n         'b': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },\n         'c': { width: 18, points: [[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },\n         'd': { width: 19, points: [[15,21],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },\n         'e': { width: 18, points: [[3,8],[15,8],[15,10],[14,12],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },\n         'f': { width: 12, points: [[10,21],[8,21],[6,20],[5,17],[5,0],[-1,-1],[2,14],[9,14]] },\n         'g': { width: 19, points: [[15,14],[15,-2],[14,-5],[13,-6],[11,-7],[8,-7],[6,-6],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },\n         'h': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },\n         'i': { width: 8, points: [[3,21],[4,20],[5,21],[4,22],[3,21],[-1,-1],[4,14],[4,0]] },\n         'j': { width: 10, points: [[5,21],[6,20],[7,21],[6,22],[5,21],[-1,-1],[6,14],[6,-3],[5,-6],[3,-7],[1,-7]] },\n         'k': { width: 17, points: [[4,21],[4,0],[-1,-1],[14,14],[4,4],[-1,-1],[8,8],[15,0]] },\n         'l': { width: 8, points: [[4,21],[4,0]] },\n         'm': { width: 30, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0],[-1,-1],[15,10],[18,13],[20,14],[23,14],[25,13],[26,10],[26,0]] },\n         'n': { width: 19, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },\n         'o': { width: 19, points: [[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3],[16,6],[16,8],[15,11],[13,13],[11,14],[8,14]] },\n         'p': { width: 19, points: [[4,14],[4,-7],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },\n         'q': { width: 19, points: [[15,14],[15,-7],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },\n         'r': { width: 13, points: [[4,14],[4,0],[-1,-1],[4,8],[5,11],[7,13],[9,14],[12,14]] },\n         's': { width: 17, points: [[14,11],[13,13],[10,14],[7,14],[4,13],[3,11],[4,9],[6,8],[11,7],[13,6],[14,4],[14,3],[13,1],[10,0],[7,0],[4,1],[3,3]] },\n         't': { width: 12, points: [[5,21],[5,4],[6,1],[8,0],[10,0],[-1,-1],[2,14],[9,14]] },\n         'u': { width: 19, points: [[4,14],[4,4],[5,1],[7,0],[10,0],[12,1],[15,4],[-1,-1],[15,14],[15,0]] },\n         'v': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0]] },\n         'w': { width: 22, points: [[3,14],[7,0],[-1,-1],[11,14],[7,0],[-1,-1],[11,14],[15,0],[-1,-1],[19,14],[15,0]] },\n         'x': { width: 17, points: [[3,14],[14,0],[-1,-1],[14,14],[3,0]] },\n         'y': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0],[6,-4],[4,-6],[2,-7],[1,-7]] },\n         'z': { width: 17, points: [[14,14],[3,0],[-1,-1],[3,14],[14,14],[-1,-1],[3,0],[14,0]] },\n         '{': { width: 14, points: [[9,25],[7,24],[6,23],[5,21],[5,19],[6,17],[7,16],[8,14],[8,12],[6,10],[-1,-1],[7,24],[6,22],[6,20],[7,18],[8,17],[9,15],[9,13],[8,11],[4,9],[8,7],[9,5],[9,3],[8,1],[7,0],[6,-2],[6,-4],[7,-6],[-1,-1],[6,8],[8,6],[8,4],[7,2],[6,1],[5,-1],[5,-3],[6,-5],[7,-6],[9,-7]] },\n         '|': { width: 8, points: [[4,25],[4,-7]] },\n         '}': { width: 14, points: [[5,25],[7,24],[8,23],[9,21],[9,19],[8,17],[7,16],[6,14],[6,12],[8,10],[-1,-1],[7,24],[8,22],[8,20],[7,18],[6,17],[5,15],[5,13],[6,11],[10,9],[6,7],[5,5],[5,3],[6,1],[7,0],[8,-2],[8,-4],[7,-6],[-1,-1],[8,8],[6,6],[6,4],[7,2],[8,1],[9,-1],[9,-3],[8,-5],[7,-6],[5,-7]] },\n         '~': { width: 24, points: [[3,6],[3,8],[4,11],[6,12],[8,12],[10,11],[14,8],[16,7],[18,7],[20,8],[21,10],[-1,-1],[3,8],[4,10],[6,11],[8,11],[10,10],[14,7],[16,6],[18,6],[20,7],[21,10],[21,12]] }\n     };\n     \n    $.jqplot.CanvasFontRenderer = function(options) {\n        options = options || {};\n        if (!options.pt2px) {\n            options.pt2px = 1.5;\n        }\n        $.jqplot.CanvasTextRenderer.call(this, options);\n    };\n    \n    $.jqplot.CanvasFontRenderer.prototype = new $.jqplot.CanvasTextRenderer({});\n    $.jqplot.CanvasFontRenderer.prototype.constructor = $.jqplot.CanvasFontRenderer;\n\n    $.jqplot.CanvasFontRenderer.prototype.measure = function(ctx, str)\n    {\n        // var fstyle = this.fontStyle+' '+this.fontVariant+' '+this.fontWeight+' '+this.fontSize+' '+this.fontFamily;\n        var fstyle = this.fontSize+' '+this.fontFamily;\n        ctx.save();\n        ctx.font = fstyle;\n        var w = ctx.measureText(str).width;\n        ctx.restore();\n        return w;\n    };\n\n    $.jqplot.CanvasFontRenderer.prototype.draw = function(ctx, str)\n    {\n        var x = 0;\n        // leave room at bottom for descenders.\n        var y = this.height*0.72;\n        //var y = 12;\n\n         ctx.save();\n         var tx, ty;\n         \n         // 1st quadrant\n         if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {\n             tx = 0;\n             ty = -Math.sin(this.angle) * this.width;\n         }\n         // 4th quadrant\n         else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {\n             tx = Math.sin(this.angle) * this.height;\n             ty = 0;\n         }\n         // 2nd quadrant\n         else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {\n             tx = -Math.cos(this.angle) * this.width;\n             ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;\n         }\n         // 3rd quadrant\n         else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {\n             tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;\n             ty = -Math.cos(this.angle) * this.height;\n         }\n         ctx.strokeStyle = this.fillStyle;\n         ctx.fillStyle = this.fillStyle;\n        // var fstyle = this.fontStyle+' '+this.fontVariant+' '+this.fontWeight+' '+this.fontSize+' '+this.fontFamily;\n        var fstyle = this.fontSize+' '+this.fontFamily;\n         ctx.font = fstyle;\n         ctx.translate(tx, ty);\n         ctx.rotate(this.angle);\n         ctx.fillText(str, x, y);\n         // ctx.strokeText(str, x, y);\n\n         ctx.restore();\n    };\n    \n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {   \n    /**\n    *  class: $.jqplot.CategoryAxisRenderer\n    *  A plugin for jqPlot to render a category style axis, with equal pixel spacing between y data values of a series.\n    *  \n    *  To use this renderer, include the plugin in your source\n    *  > <script type=\"text/javascript\" language=\"javascript\" src=\"plugins/jqplot.categoryAxisRenderer.js\"></script>\n    *  \n    *  and supply the appropriate options to your plot\n    *  \n    *  > {axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer}}}\n    **/\n    $.jqplot.CategoryAxisRenderer = function(options) {\n        $.jqplot.LinearAxisRenderer.call(this);\n        // prop: sortMergedLabels\n        // True to sort tick labels when labels are created by merging\n        // x axis values from multiple series.  That is, say you have\n        // two series like:\n        // > line1 = [[2006, 4],            [2008, 9], [2009, 16]];\n        // > line2 = [[2006, 3], [2007, 7], [2008, 6]];\n        // If no label array is specified, tick labels will be collected\n        // from the x values of the series.  With sortMergedLabels\n        // set to true, tick labels will be:\n        // > [2006, 2007, 2008, 2009]\n        // With sortMergedLabels set to false, tick labels will be:\n        // > [2006, 2008, 2009, 2007]\n        //\n        // Note, this property is specified on the renderOptions for the \n        // axes when creating a plot:\n        // > axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer, rendererOptions:{sortMergedLabels:true}}}\n        this.sortMergedLabels = false;\n    };\n    \n    $.jqplot.CategoryAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();\n    $.jqplot.CategoryAxisRenderer.prototype.constructor = $.jqplot.CategoryAxisRenderer;\n    \n    $.jqplot.CategoryAxisRenderer.prototype.init = function(options){\n        this.groups = 1;\n        this.groupLabels = [];\n        this._groupLabels = [];\n        this._grouped = false;\n        this._barsPerGroup = null;\n        this.reverse = false;\n        // prop: tickRenderer\n        // A class of a rendering engine for creating the ticks labels displayed on the plot, \n        // See <$.jqplot.AxisTickRenderer>.\n        // this.tickRenderer = $.jqplot.AxisTickRenderer;\n        // this.labelRenderer = $.jqplot.AxisLabelRenderer;\n        $.extend(true, this, {tickOptions:{formatString:'%d'}}, options);\n        var db = this._dataBounds;\n        // Go through all the series attached to this axis and find\n        // the min/max bounds for this axis.\n        for (var i=0; i<this._series.length; i++) {\n            var s = this._series[i];\n            if (s.groups) {\n                this.groups = s.groups;\n            }\n            var d = s.data;\n            \n            for (var j=0; j<d.length; j++) { \n                if (this.name == 'xaxis' || this.name == 'x2axis') {\n                    if (d[j][0] < db.min || db.min == null) {\n                        db.min = d[j][0];\n                    }\n                    if (d[j][0] > db.max || db.max == null) {\n                        db.max = d[j][0];\n                    }\n                }              \n                else {\n                    if (d[j][1] < db.min || db.min == null) {\n                        db.min = d[j][1];\n                    }\n                    if (d[j][1] > db.max || db.max == null) {\n                        db.max = d[j][1];\n                    }\n                }              \n            }\n        }\n        \n        if (this.groupLabels.length) {\n            this.groups = this.groupLabels.length;\n        }\n    };\n \n\n    $.jqplot.CategoryAxisRenderer.prototype.createTicks = function() {\n        // we're are operating on an axis here\n        var ticks = this._ticks;\n        var userTicks = this.ticks;\n        var name = this.name;\n        // databounds were set on axis initialization.\n        var db = this._dataBounds;\n        var dim, interval;\n        var min, max;\n        var pos1, pos2;\n        var tt, i;\n\n        // if we already have ticks, use them.\n        if (userTicks.length) {\n            // adjust with blanks if we have groups\n            if (this.groups > 1 && !this._grouped) {\n                var l = userTicks.length;\n                var skip = parseInt(l/this.groups, 10);\n                var count = 0;\n                for (var i=skip; i<l; i+=skip) {\n                    userTicks.splice(i+count, 0, ' ');\n                    count++;\n                }\n                this._grouped = true;\n            }\n            this.min = 0.5;\n            this.max = userTicks.length + 0.5;\n            var range = this.max - this.min;\n            this.numberTicks = 2*userTicks.length + 1;\n            for (i=0; i<userTicks.length; i++){\n                tt = this.min + 2 * i * range / (this.numberTicks-1);\n                // need a marker before and after the tick\n                var t = new this.tickRenderer(this.tickOptions);\n                t.showLabel = false;\n                // t.showMark = true;\n                t.setTick(tt, this.name);\n                this._ticks.push(t);\n                var t = new this.tickRenderer(this.tickOptions);\n                t.label = userTicks[i];\n                // t.showLabel = true;\n                t.showMark = false;\n                t.showGridline = false;\n                t.setTick(tt+0.5, this.name);\n                this._ticks.push(t);\n            }\n            // now add the last tick at the end\n            var t = new this.tickRenderer(this.tickOptions);\n            t.showLabel = false;\n            // t.showMark = true;\n            t.setTick(tt+1, this.name);\n            this._ticks.push(t);\n        }\n\n        // we don't have any ticks yet, let's make some!\n        else {\n            if (name == 'xaxis' || name == 'x2axis') {\n                dim = this._plotDimensions.width;\n            }\n            else {\n                dim = this._plotDimensions.height;\n            }\n            \n            // if min, max and number of ticks specified, user can't specify interval.\n            if (this.min != null && this.max != null && this.numberTicks != null) {\n                this.tickInterval = null;\n            }\n            \n            // if max, min, and interval specified and interval won't fit, ignore interval.\n            if (this.min != null && this.max != null && this.tickInterval != null) {\n                if (parseInt((this.max-this.min)/this.tickInterval, 10) != (this.max-this.min)/this.tickInterval) {\n                    this.tickInterval = null;\n                }\n            }\n        \n            // find out how many categories are in the lines and collect labels\n            var labels = [];\n            var numcats = 0;\n            var min = 0.5;\n            var max, val;\n            var isMerged = false;\n            for (var i=0; i<this._series.length; i++) {\n                var s = this._series[i];\n                for (var j=0; j<s.data.length; j++) {\n                    if (this.name == 'xaxis' || this.name == 'x2axis') {\n                        val = s.data[j][0];\n                    }\n                    else {\n                        val = s.data[j][1];\n                    }\n                    if ($.inArray(val, labels) == -1) {\n                        isMerged = true;\n                        numcats += 1;      \n                        labels.push(val);\n                    }\n                }\n            }\n            \n            if (isMerged && this.sortMergedLabels) {\n                if (typeof labels[0] == \"string\") {\n                    labels.sort();\n                } else {\n                    labels.sort(function(a,b) { return a - b; });\n                }\n            }\n            \n            // keep a reference to these tick labels to use for redrawing plot (see bug #57)\n            this.ticks = labels;\n            \n            // now bin the data values to the right lables.\n            for (var i=0; i<this._series.length; i++) {\n                var s = this._series[i];\n                for (var j=0; j<s.data.length; j++) {\n                    if (this.name == 'xaxis' || this.name == 'x2axis') {\n                        val = s.data[j][0];\n                    }\n                    else {\n                        val = s.data[j][1];\n                    }\n                    // for category axis, force the values into category bins.\n                    // we should have the value in the label array now.\n                    var idx = $.inArray(val, labels)+1;\n                    if (this.name == 'xaxis' || this.name == 'x2axis') {\n                        s.data[j][0] = idx;\n                    }\n                    else {\n                        s.data[j][1] = idx;\n                    }\n                }\n            }\n            \n            // adjust with blanks if we have groups\n            if (this.groups > 1 && !this._grouped) {\n                var l = labels.length;\n                var skip = parseInt(l/this.groups, 10);\n                var count = 0;\n                for (var i=skip; i<l; i+=skip+1) {\n                    labels[i] = ' ';\n                }\n                this._grouped = true;\n            }\n        \n            max = numcats + 0.5;\n            if (this.numberTicks == null) {\n                this.numberTicks = 2*numcats + 1;\n            }\n\n            var range = max - min;\n            this.min = min;\n            this.max = max;\n            var track = 0;\n            \n            // todo: adjust this so more ticks displayed.\n            var maxVisibleTicks = parseInt(3+dim/10, 10);\n            var skip = parseInt(numcats/maxVisibleTicks, 10);\n\n            if (this.tickInterval == null) {\n\n                this.tickInterval = range / (this.numberTicks-1);\n\n            }\n            // if tickInterval is specified, we will ignore any computed maximum.\n            for (var i=0; i<this.numberTicks; i++){\n                tt = this.min + i * this.tickInterval;\n                var t = new this.tickRenderer(this.tickOptions);\n                // if even tick, it isn't a category, it's a divider\n                if (i/2 == parseInt(i/2, 10)) {\n                    t.showLabel = false;\n                    t.showMark = true;\n                }\n                else {\n                    if (skip>0 && track<skip) {\n                        t.showLabel = false;\n                        track += 1;\n                    }\n                    else {\n                        t.showLabel = true;\n                        track = 0;\n                    } \n                    t.label = t.formatter(t.formatString, labels[(i-1)/2]);\n                    t.showMark = false;\n                    t.showGridline = false;\n                }\n                t.setTick(tt, this.name);\n                this._ticks.push(t);\n            }\n        }\n        \n    };\n    \n    // called with scope of axis\n    $.jqplot.CategoryAxisRenderer.prototype.draw = function(ctx, plot) {\n        if (this.show) {\n            // populate the axis label and value properties.\n            // createTicks is a method on the renderer, but\n            // call it within the scope of the axis.\n            this.renderer.createTicks.call(this);\n            // fill a div with axes labels in the right direction.\n            // Need to pregenerate each axis to get its bounds and\n            // position it and the labels correctly on the plot.\n            var dim=0;\n            var temp;\n            // Added for theming.\n            if (this._elem) {\n                // this._elem.empty();\n                // Memory Leaks patch\n                this._elem.emptyForce();\n            }\n\n            this._elem = this._elem || $('<div class=\"jqplot-axis jqplot-'+this.name+'\" style=\"position:absolute;\"></div>');\n            \n            if (this.name == 'xaxis' || this.name == 'x2axis') {\n                this._elem.width(this._plotDimensions.width);\n            }\n            else {\n                this._elem.height(this._plotDimensions.height);\n            }\n            \n            // create a _label object.\n            this.labelOptions.axis = this.name;\n            this._label = new this.labelRenderer(this.labelOptions);\n            if (this._label.show) {\n                var elem = this._label.draw(ctx, plot);\n                elem.appendTo(this._elem);\n            }\n    \n            var t = this._ticks;\n            for (var i=0; i<t.length; i++) {\n                var tick = t[i];\n                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {\n                    var elem = tick.draw(ctx, plot);\n                    elem.appendTo(this._elem);\n                }\n            }\n        \n            this._groupLabels = [];\n            // now make group labels\n            for (var i=0; i<this.groupLabels.length; i++)\n            {\n                var elem = $('<div style=\"position:absolute;\" class=\"jqplot-'+this.name+'-groupLabel\"></div>');\n                elem.html(this.groupLabels[i]);\n                this._groupLabels.push(elem);\n                elem.appendTo(this._elem);\n            }\n        }\n        return this._elem;\n    };\n    \n    // called with scope of axis\n    $.jqplot.CategoryAxisRenderer.prototype.set = function() { \n        var dim = 0;\n        var temp;\n        var w = 0;\n        var h = 0;\n        var lshow = (this._label == null) ? false : this._label.show;\n        if (this.show) {\n            var t = this._ticks;\n            for (var i=0; i<t.length; i++) {\n                var tick = t[i];\n                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {\n                    if (this.name == 'xaxis' || this.name == 'x2axis') {\n                        temp = tick._elem.outerHeight(true);\n                    }\n                    else {\n                        temp = tick._elem.outerWidth(true);\n                    }\n                    if (temp > dim) {\n                        dim = temp;\n                    }\n                }\n            }\n            \n            var dim2 = 0;\n            for (var i=0; i<this._groupLabels.length; i++) {\n                var l = this._groupLabels[i];\n                if (this.name == 'xaxis' || this.name == 'x2axis') {\n                    temp = l.outerHeight(true);\n                }\n                else {\n                    temp = l.outerWidth(true);\n                }\n                if (temp > dim2) {\n                    dim2 = temp;\n                }\n            }\n            \n            if (lshow) {\n                w = this._label._elem.outerWidth(true);\n                h = this._label._elem.outerHeight(true); \n            }\n            if (this.name == 'xaxis') {\n                dim += dim2 + h;\n                this._elem.css({'height':dim+'px', left:'0px', bottom:'0px'});\n            }\n            else if (this.name == 'x2axis') {\n                dim += dim2 + h;\n                this._elem.css({'height':dim+'px', left:'0px', top:'0px'});\n            }\n            else if (this.name == 'yaxis') {\n                dim += dim2 + w;\n                this._elem.css({'width':dim+'px', left:'0px', top:'0px'});\n                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {\n                    this._label._elem.css('width', w+'px');\n                }\n            }\n            else {\n                dim += dim2 + w;\n                this._elem.css({'width':dim+'px', right:'0px', top:'0px'});\n                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {\n                    this._label._elem.css('width', w+'px');\n                }\n            }\n        }  \n    };\n    \n    // called with scope of axis\n    $.jqplot.CategoryAxisRenderer.prototype.pack = function(pos, offsets) {\n        var ticks = this._ticks;\n        var max = this.max;\n        var min = this.min;\n        var offmax = offsets.max;\n        var offmin = offsets.min;\n        var lshow = (this._label == null) ? false : this._label.show;\n        var i;\n\n        for (var p in pos) {\n            this._elem.css(p, pos[p]);\n        }\n        \n        this._offsets = offsets;\n        // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.\n        var pixellength = offmax - offmin;\n        var unitlength = max - min;\n        \n        if (!this.reverse) {\n            // point to unit and unit to point conversions references to Plot DOM element top left corner.\n            \n            this.u2p = function(u){\n                return (u - min) * pixellength / unitlength + offmin;\n            };\n\n            this.p2u = function(p){\n                return (p - offmin) * unitlength / pixellength + min;\n            };\n                    \n            if (this.name == 'xaxis' || this.name == 'x2axis'){\n                this.series_u2p = function(u){\n                    return (u - min) * pixellength / unitlength;\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + min;\n                };\n            }\n            \n            else {\n                this.series_u2p = function(u){\n                    return (u - max) * pixellength / unitlength;\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + max;\n                };\n            }\n        }\n\n        else {\n            // point to unit and unit to point conversions references to Plot DOM element top left corner.\n            \n            this.u2p = function(u){\n                return offmin + (max - u) * pixellength / unitlength;\n            };\n\n            this.p2u = function(p){\n                return min + (p - offmin) * unitlength / pixellength;\n            };\n                    \n            if (this.name == 'xaxis' || this.name == 'x2axis'){\n                this.series_u2p = function(u){\n                    return (max - u) * pixellength / unitlength;\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + max;\n                };\n            }\n            \n            else {\n                this.series_u2p = function(u){\n                    return (min - u) * pixellength / unitlength;\n                };\n                this.series_p2u = function(p){\n                    return p * unitlength / pixellength + min;\n                };\n            }\n\n        }\n            \n        \n        if (this.show) {\n            if (this.name == 'xaxis' || this.name == 'x2axis') {\n                for (i=0; i<ticks.length; i++) {\n                    var t = ticks[i];\n                    if (t.show && t.showLabel) {\n                        var shim;\n                        \n                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                            // will need to adjust auto positioning based on which axis this is.\n                            var temp = (this.name == 'xaxis') ? 1 : -1;\n                            switch (t.labelPosition) {\n                                case 'auto':\n                                    // position at end\n                                    if (temp * t.angle < 0) {\n                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    }\n                                    // position at start\n                                    else {\n                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'end':\n                                    shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                                case 'start':\n                                    shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    break;\n                                case 'middle':\n                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                                default:\n                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                            }\n                        }\n                        else {\n                            shim = -t.getWidth()/2;\n                        }\n                        var val = this.u2p(t.value) + shim + 'px';\n                        t._elem.css('left', val);\n                        t.pack();\n                    }\n                }\n                \n                var labeledge=['bottom', 0];\n                if (lshow) {\n                    var w = this._label._elem.outerWidth(true);\n                    this._label._elem.css('left', offmin + pixellength/2 - w/2 + 'px');\n                    if (this.name == 'xaxis') {\n                        this._label._elem.css('bottom', '0px');\n                        labeledge = ['bottom', this._label._elem.outerHeight(true)];\n                    }\n                    else {\n                        this._label._elem.css('top', '0px');\n                        labeledge = ['top', this._label._elem.outerHeight(true)];\n                    }\n                    this._label.pack();\n                }\n                \n                // draw the group labels\n                var step = parseInt(this._ticks.length/this.groups, 10) + 1;\n                for (i=0; i<this._groupLabels.length; i++) {\n                    var mid = 0;\n                    var count = 0;\n                    for (var j=i*step; j<(i+1)*step; j++) {\n                        if (j >= this._ticks.length-1) continue; // the last tick does not exist as there is no other group in order to have an empty one.\n                        if (this._ticks[j]._elem && this._ticks[j].label != \" \") {\n                            var t = this._ticks[j]._elem;\n                            var p = t.position();\n                            mid += p.left + t.outerWidth(true)/2;\n                            count++;\n                        }\n                    }\n                    mid = mid/count;\n                    this._groupLabels[i].css({'left':(mid - this._groupLabels[i].outerWidth(true)/2)});\n                    this._groupLabels[i].css(labeledge[0], labeledge[1]);\n                }\n            }\n            else {\n                for (i=0; i<ticks.length; i++) {\n                    var t = ticks[i];\n                    if (t.show && t.showLabel) {                        \n                        var shim;\n                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                            // will need to adjust auto positioning based on which axis this is.\n                            var temp = (this.name == 'yaxis') ? 1 : -1;\n                            switch (t.labelPosition) {\n                                case 'auto':\n                                    // position at end\n                                case 'end':\n                                    if (temp * t.angle < 0) {\n                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                    }\n                                    else {\n                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'start':\n                                    if (t.angle > 0) {\n                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                    }\n                                    else {\n                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'middle':\n                                    // if (t.angle > 0) {\n                                    //     shim = -t.getHeight()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    // }\n                                    // else {\n                                    //     shim = -t.getHeight()/2 - t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    // }\n                                    shim = -t.getHeight()/2;\n                                    break;\n                                default:\n                                    shim = -t.getHeight()/2;\n                                    break;\n                            }\n                        }\n                        else {\n                            shim = -t.getHeight()/2;\n                        }\n                        \n                        var val = this.u2p(t.value) + shim + 'px';\n                        t._elem.css('top', val);\n                        t.pack();\n                    }\n                }\n                \n                var labeledge=['left', 0];\n                if (lshow) {\n                    var h = this._label._elem.outerHeight(true);\n                    this._label._elem.css('top', offmax - pixellength/2 - h/2 + 'px');\n                    if (this.name == 'yaxis') {\n                        this._label._elem.css('left', '0px');\n                        labeledge = ['left', this._label._elem.outerWidth(true)];\n                    }\n                    else {\n                        this._label._elem.css('right', '0px');\n                        labeledge = ['right', this._label._elem.outerWidth(true)];\n                    }   \n                    this._label.pack();\n                }\n                \n                // draw the group labels, position top here, do left after label position.\n                var step = parseInt(this._ticks.length/this.groups, 10) + 1; // step is one more than before as we don't want to have overlaps in loops\n                for (i=0; i<this._groupLabels.length; i++) {\n                    var mid = 0;\n                    var count = 0;\n                    for (var j=i*step; j<(i+1)*step; j++) { // j must never reach (i+1)*step as we don't want to have overlap between loops\n                        if (j >= this._ticks.length-1) continue; // the last tick does not exist as there is no other group in order to have an empty one.\n                        if (this._ticks[j]._elem && this._ticks[j].label != \" \") {\n                            var t = this._ticks[j]._elem;\n                            var p = t.position();\n                            mid += p.top + t.outerHeight()/2;\n                            count++;\n                        }\n                    }\n                    mid = mid/count;\n                    this._groupLabels[i].css({'top':mid - this._groupLabels[i].outerHeight()/2});\n                    this._groupLabels[i].css(labeledge[0], labeledge[1]);\n                    \n                }\n            }\n        }\n    };    \n    \n    \n})(jQuery);\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    \n    /**\n     * Class: $.jqplot.Cursor\n     * Plugin class representing the cursor as displayed on the plot.\n     */\n    $.jqplot.Cursor = function(options) {\n        // Group: Properties\n        //\n        // prop: style\n        // CSS spec for cursor style\n        this.style = 'crosshair';\n        this.previousCursor = 'auto';\n        // prop: show\n        // whether to show the cursor or not.\n        this.show = $.jqplot.config.enablePlugins;\n        // prop: showTooltip\n        // show a cursor position tooltip.  Location of the tooltip\n        // will be controlled by followMouse and tooltipLocation.\n        this.showTooltip = true;\n        // prop: followMouse\n        // Tooltip follows the mouse, it is not at a fixed location.\n        // Tooltip will show on the grid at the location given by\n        // tooltipLocation, offset from the grid edge by tooltipOffset.\n        this.followMouse = false;\n        // prop: tooltipLocation\n        // Where to position tooltip.  If followMouse is true, this is\n        // relative to the cursor, otherwise, it is relative to the grid.\n        // One of 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'\n        this.tooltipLocation = 'se';\n        // prop: tooltipOffset\n        // Pixel offset of tooltip from the grid boudaries or cursor center.\n        this.tooltipOffset = 6;\n        // prop: showTooltipGridPosition\n        // show the grid pixel coordinates of the mouse.\n        this.showTooltipGridPosition = false;\n        // prop: showTooltipUnitPosition\n        // show the unit (data) coordinates of the mouse.\n        this.showTooltipUnitPosition = true;\n        // prop: showTooltipDataPosition\n        // Used with showVerticalLine to show intersecting data points in the tooltip.\n        this.showTooltipDataPosition = false;\n        // prop: tooltipFormatString\n        // sprintf format string for the tooltip.\n        // Uses Ash Searle's javascript sprintf implementation\n        // found here: http://hexmen.com/blog/2007/03/printf-sprintf/\n        // See http://perldoc.perl.org/functions/sprintf.html for reference\n        // Note, if showTooltipDataPosition is true, the default tooltipFormatString\n        // will be set to the cursorLegendFormatString, not the default given here.\n        this.tooltipFormatString = '%.4P, %.4P';\n        // prop: useAxesFormatters\n        // Use the x and y axes formatters to format the text in the tooltip.\n        this.useAxesFormatters = true;\n        // prop: tooltipAxisGroups\n        // Show position for the specified axes.\n        // This is an array like [['xaxis', 'yaxis'], ['xaxis', 'y2axis']]\n        // Default is to compute automatically for all visible axes.\n        this.tooltipAxisGroups = [];\n        // prop: zoom\n        // Enable plot zooming.\n        this.zoom = false;\n        // zoomProxy and zoomTarget properties are not directly set by user.  \n        // They Will be set through call to zoomProxy method.\n        this.zoomProxy = false;\n        this.zoomTarget = false;\n        // prop: looseZoom\n        // Will expand zoom range to provide more rounded tick values.\n        // Works only with linear, log and date axes.\n        this.looseZoom = true;\n        // prop: clickReset\n        // Will reset plot zoom if single click on plot without drag.\n        this.clickReset = false;\n        // prop: dblClickReset\n        // Will reset plot zoom if double click on plot without drag.\n        this.dblClickReset = true;\n        // prop: showVerticalLine\n        // draw a vertical line across the plot which follows the cursor.\n        // When the line is near a data point, a special legend and/or tooltip can\n        // be updated with the data values.\n        this.showVerticalLine = false;\n        // prop: showHorizontalLine\n        // draw a horizontal line across the plot which follows the cursor.\n        this.showHorizontalLine = false;\n        // prop: constrainZoomTo\n        // 'none', 'x' or 'y'\n        this.constrainZoomTo = 'none';\n        // // prop: autoscaleConstraint\n        // // when a constrained axis is specified, true will\n        // // auatoscale the adjacent axis.\n        // this.autoscaleConstraint = true;\n        this.shapeRenderer = new $.jqplot.ShapeRenderer();\n        this._zoom = {start:[], end:[], started: false, zooming:false, isZoomed:false, axes:{start:{}, end:{}}, gridpos:{}, datapos:{}};\n        this._tooltipElem;\n        this.zoomCanvas;\n        this.cursorCanvas;\n        // prop: intersectionThreshold\n        // pixel distance from data point or marker to consider cursor lines intersecting with point.\n        // If data point markers are not shown, this should be >= 1 or will often miss point intersections.\n        this.intersectionThreshold = 2;\n        // prop: showCursorLegend\n        // Replace the plot legend with an enhanced legend displaying intersection information.\n        this.showCursorLegend = false;\n        // prop: cursorLegendFormatString\n        // Format string used in the cursor legend.  If showTooltipDataPosition is true,\n        // this will also be the default format string used by tooltipFormatString.\n        this.cursorLegendFormatString = $.jqplot.Cursor.cursorLegendFormatString;\n        // whether the cursor is over the grid or not.\n        this._oldHandlers = {onselectstart: null, ondrag: null, onmousedown: null};\n        // prop: constrainOutsideZoom\n        // True to limit actual zoom area to edges of grid, even when zooming\n        // outside of plot area.  That is, can't zoom out by mousing outside plot.\n        this.constrainOutsideZoom = true;\n        // prop: showTooltipOutsideZoom\n        // True will keep updating the tooltip when zooming of the grid.\n        this.showTooltipOutsideZoom = false;\n        // true if mouse is over grid, false if not.\n        this.onGrid = false;\n        $.extend(true, this, options);\n    };\n    \n    $.jqplot.Cursor.cursorLegendFormatString = '%s x:%s, y:%s';\n    \n    // called with scope of plot\n    $.jqplot.Cursor.init = function (target, data, opts){\n        // add a cursor attribute to the plot\n        var options = opts || {};\n        this.plugins.cursor = new $.jqplot.Cursor(options.cursor);\n        var c = this.plugins.cursor;\n\n        if (c.show) {\n            $.jqplot.eventListenerHooks.push(['jqplotMouseEnter', handleMouseEnter]);\n            $.jqplot.eventListenerHooks.push(['jqplotMouseLeave', handleMouseLeave]);\n            $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMouseMove]);\n            \n            if (c.showCursorLegend) {              \n                opts.legend = opts.legend || {};\n                opts.legend.renderer =  $.jqplot.CursorLegendRenderer;\n                opts.legend.formatString = this.plugins.cursor.cursorLegendFormatString;\n                opts.legend.show = true;\n            }\n            \n            if (c.zoom) {\n                $.jqplot.eventListenerHooks.push(['jqplotMouseDown', handleMouseDown]);\n                \n                if (c.clickReset) {\n                    $.jqplot.eventListenerHooks.push(['jqplotClick', handleClick]);\n                }\n                \n                if (c.dblClickReset) {\n                    $.jqplot.eventListenerHooks.push(['jqplotDblClick', handleDblClick]);\n                }             \n            }\n    \n            this.resetZoom = function() {\n                var axes = this.axes;\n                if (!c.zoomProxy) {\n                    for (var ax in axes) {\n                        axes[ax].reset();\n                        axes[ax]._ticks = [];\n                        // fake out tick creation algorithm to make sure original auto\n                        // computed format string is used if _overrideFormatString is true\n                        if (c._zoom.axes[ax] !== undefined) {\n                            axes[ax]._autoFormatString = c._zoom.axes[ax].tickFormatString;\n                        }\n                    }\n                    this.redraw();\n                }\n                else {\n                    var ctx = this.plugins.cursor.zoomCanvas._ctx;\n                    ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n                    ctx = null;\n                }\n                this.plugins.cursor._zoom.isZoomed = false;\n                this.target.trigger('jqplotResetZoom', [this, this.plugins.cursor]);\n            };\n            \n\n            if (c.showTooltipDataPosition) {\n                c.showTooltipUnitPosition = false;\n                c.showTooltipGridPosition = false;\n                if (options.cursor.tooltipFormatString == undefined) {\n                    c.tooltipFormatString = $.jqplot.Cursor.cursorLegendFormatString;\n                }\n            }\n        }\n    };\n    \n    // called with context of plot\n    $.jqplot.Cursor.postDraw = function() {\n        var c = this.plugins.cursor;\n        \n        // Memory Leaks patch\n        if (c.zoomCanvas) {\n            c.zoomCanvas.resetCanvas();\n            c.zoomCanvas = null;\n        }\n        \n        if (c.cursorCanvas) {\n            c.cursorCanvas.resetCanvas();\n            c.cursorCanvas = null;\n        }\n        \n        if (c._tooltipElem) {\n            c._tooltipElem.emptyForce();\n            c._tooltipElem = null;\n        }\n\n        \n        if (c.zoom) {\n            c.zoomCanvas = new $.jqplot.GenericCanvas();\n            this.eventCanvas._elem.before(c.zoomCanvas.createElement(this._gridPadding, 'jqplot-zoom-canvas', this._plotDimensions, this));\n            c.zoomCanvas.setContext();\n        }\n\n        var elem = document.createElement('div');\n        c._tooltipElem = $(elem);\n        elem = null;\n        c._tooltipElem.addClass('jqplot-cursor-tooltip');\n        c._tooltipElem.css({position:'absolute', display:'none'});\n        \n        \n        if (c.zoomCanvas) {\n            c.zoomCanvas._elem.before(c._tooltipElem);\n        }\n\n        else {\n            this.eventCanvas._elem.before(c._tooltipElem);\n        }\n\n        if (c.showVerticalLine || c.showHorizontalLine) {\n            c.cursorCanvas = new $.jqplot.GenericCanvas();\n            this.eventCanvas._elem.before(c.cursorCanvas.createElement(this._gridPadding, 'jqplot-cursor-canvas', this._plotDimensions, this));\n            c.cursorCanvas.setContext();\n        }\n\n        // if we are showing the positions in unit coordinates, and no axes groups\n        // were specified, create a default set.\n        if (c.showTooltipUnitPosition){\n            if (c.tooltipAxisGroups.length === 0) {\n                var series = this.series;\n                var s;\n                var temp = [];\n                for (var i=0; i<series.length; i++) {\n                    s = series[i];\n                    var ax = s.xaxis+','+s.yaxis;\n                    if ($.inArray(ax, temp) == -1) {\n                        temp.push(ax);\n                    }\n                }\n                for (var i=0; i<temp.length; i++) {\n                    c.tooltipAxisGroups.push(temp[i].split(','));\n                }\n            }\n        }\n    };\n    \n    // Group: methods\n    //\n    // method: $.jqplot.Cursor.zoomProxy\n    // links targetPlot to controllerPlot so that plot zooming of\n    // targetPlot will be controlled by zooming on the controllerPlot.\n    // controllerPlot will not actually zoom, but acts as an\n    // overview plot.  Note, the zoom options must be set to true for\n    // zoomProxy to work.\n    $.jqplot.Cursor.zoomProxy = function(targetPlot, controllerPlot) {\n        var tc = targetPlot.plugins.cursor;\n        var cc = controllerPlot.plugins.cursor;\n        tc.zoomTarget = true;\n        tc.zoom = true;\n        tc.style = 'auto';\n        tc.dblClickReset = false;\n        cc.zoom = true;\n        cc.zoomProxy = true;\n              \n        controllerPlot.target.bind('jqplotZoom', plotZoom);\n        controllerPlot.target.bind('jqplotResetZoom', plotReset);\n\n        function plotZoom(ev, gridpos, datapos, plot, cursor) {\n            tc.doZoom(gridpos, datapos, targetPlot, cursor);\n        } \n\n        function plotReset(ev, plot, cursor) {\n            targetPlot.resetZoom();\n        }\n    };\n    \n    $.jqplot.Cursor.prototype.resetZoom = function(plot, cursor) {\n        var axes = plot.axes;\n        var cax = cursor._zoom.axes;\n        if (!plot.plugins.cursor.zoomProxy && cursor._zoom.isZoomed) {\n            for (var ax in axes) {\n                // axes[ax]._ticks = [];\n                // axes[ax].min = cax[ax].min;\n                // axes[ax].max = cax[ax].max;\n                // axes[ax].numberTicks = cax[ax].numberTicks; \n                // axes[ax].tickInterval = cax[ax].tickInterval;\n                // // for date axes\n                // axes[ax].daTickInterval = cax[ax].daTickInterval;\n                axes[ax].reset();\n                axes[ax]._ticks = [];\n                // fake out tick creation algorithm to make sure original auto\n                // computed format string is used if _overrideFormatString is true\n                axes[ax]._autoFormatString = cax[ax].tickFormatString;\n            }\n            plot.redraw();\n            cursor._zoom.isZoomed = false;\n        }\n        else {\n            var ctx = cursor.zoomCanvas._ctx;\n            ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n            ctx = null;\n        }\n        plot.target.trigger('jqplotResetZoom', [plot, cursor]);\n    };\n    \n    $.jqplot.Cursor.resetZoom = function(plot) {\n        plot.resetZoom();\n    };\n    \n    $.jqplot.Cursor.prototype.doZoom = function (gridpos, datapos, plot, cursor) {\n        var c = cursor;\n        var axes = plot.axes;\n        var zaxes = c._zoom.axes;\n        var start = zaxes.start;\n        var end = zaxes.end;\n        var min, max, dp, span,\n            newmin, newmax, curax, _numberTicks, ret;\n        var ctx = plot.plugins.cursor.zoomCanvas._ctx;\n        // don't zoom if zoom area is too small (in pixels)\n        if ((c.constrainZoomTo == 'none' && Math.abs(gridpos.x - c._zoom.start[0]) > 6 && Math.abs(gridpos.y - c._zoom.start[1]) > 6) || (c.constrainZoomTo == 'x' && Math.abs(gridpos.x - c._zoom.start[0]) > 6) ||  (c.constrainZoomTo == 'y' && Math.abs(gridpos.y - c._zoom.start[1]) > 6)) {\n            if (!plot.plugins.cursor.zoomProxy) {\n                for (var ax in datapos) {\n                    // make a copy of the original axes to revert back.\n                    if (c._zoom.axes[ax] == undefined) {\n                        c._zoom.axes[ax] = {};\n                        c._zoom.axes[ax].numberTicks = axes[ax].numberTicks;\n                        c._zoom.axes[ax].tickInterval = axes[ax].tickInterval;\n                        // for date axes...\n                        c._zoom.axes[ax].daTickInterval = axes[ax].daTickInterval;\n                        c._zoom.axes[ax].min = axes[ax].min;\n                        c._zoom.axes[ax].max = axes[ax].max;\n                        c._zoom.axes[ax].tickFormatString = (axes[ax].tickOptions != null) ? axes[ax].tickOptions.formatString :  '';\n                    }\n\n\n                    if ((c.constrainZoomTo == 'none') || (c.constrainZoomTo == 'x' && ax.charAt(0) == 'x') || (c.constrainZoomTo == 'y' && ax.charAt(0) == 'y')) {   \n                        dp = datapos[ax];\n                        if (dp != null) {           \n                            if (dp > start[ax]) { \n                                newmin = start[ax];\n                                newmax = dp;\n                            }\n                            else {\n                                span = start[ax] - dp;\n                                newmin = dp;\n                                newmax = start[ax];\n                            }\n\n                            curax = axes[ax];\n\n                            _numberTicks = null;\n\n                            // if aligning this axis, use number of ticks from previous axis.\n                            // Do I need to reset somehow if alignTicks is changed and then graph is replotted??\n                            if (curax.alignTicks) {\n                                if (curax.name === 'x2axis' && plot.axes.xaxis.show) {\n                                    _numberTicks = plot.axes.xaxis.numberTicks;\n                                }\n                                else if (curax.name.charAt(0) === 'y' && curax.name !== 'yaxis' && curax.name !== 'yMidAxis' && plot.axes.yaxis.show) {\n                                    _numberTicks = plot.axes.yaxis.numberTicks;\n                                }\n                            }\n                            \n                            if (this.looseZoom && (axes[ax].renderer.constructor === $.jqplot.LinearAxisRenderer || axes[ax].renderer.constructor === $.jqplot.LogAxisRenderer )) { //} || axes[ax].renderer.constructor === $.jqplot.DateAxisRenderer)) {\n\n                                ret = $.jqplot.LinearTickGenerator(newmin, newmax, curax._scalefact, _numberTicks);\n\n                                // if new minimum is less than \"true\" minimum of axis display, adjust it\n                                if (axes[ax].tickInset && ret[0] < axes[ax].min + axes[ax].tickInset * axes[ax].tickInterval) {\n                                    ret[0] += ret[4];\n                                    ret[2] -= 1;\n                                }\n\n                                // if new maximum is greater than \"true\" max of axis display, adjust it\n                                if (axes[ax].tickInset && ret[1] > axes[ax].max - axes[ax].tickInset * axes[ax].tickInterval) {\n                                    ret[1] -= ret[4];\n                                    ret[2] -= 1;\n                                }\n\n                                // for log axes, don't fall below current minimum, this will look bad and can't have 0 in range anyway.\n                                if (axes[ax].renderer.constructor === $.jqplot.LogAxisRenderer && ret[0] < axes[ax].min) {\n                                    // remove a tick and shift min up\n                                    ret[0] += ret[4];\n                                    ret[2] -= 1;\n                                }\n\n                                axes[ax].min = ret[0];\n                                axes[ax].max = ret[1];\n                                axes[ax]._autoFormatString = ret[3];\n                                axes[ax].numberTicks = ret[2];\n                                axes[ax].tickInterval = ret[4];\n                                // for date axes...\n                                axes[ax].daTickInterval = [ret[4]/1000, 'seconds'];\n                            }\n                            else {\n                                axes[ax].min = newmin;\n                                axes[ax].max = newmax;\n                                axes[ax].tickInterval = null;\n                                axes[ax].numberTicks = null;\n                                // for date axes...\n                                axes[ax].daTickInterval = null;\n                            }\n\n                            axes[ax]._ticks = [];\n                        }\n                    }\n                            \n                    // if ((c.constrainZoomTo == 'x' && ax.charAt(0) == 'y' && c.autoscaleConstraint) || (c.constrainZoomTo == 'y' && ax.charAt(0) == 'x' && c.autoscaleConstraint)) {\n                    //     dp = datapos[ax];\n                    //     if (dp != null) {\n                    //         axes[ax].max == null;\n                    //         axes[ax].min = null;\n                    //     }\n                    // }\n                }\n                ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n                plot.redraw();\n                c._zoom.isZoomed = true;\n                ctx = null;\n            }\n            plot.target.trigger('jqplotZoom', [gridpos, datapos, plot, cursor]);\n        }\n    };\n    \n    $.jqplot.preInitHooks.push($.jqplot.Cursor.init);\n    $.jqplot.postDrawHooks.push($.jqplot.Cursor.postDraw);\n    \n    function updateTooltip(gridpos, datapos, plot) {\n        var c = plot.plugins.cursor;\n        var s = '';\n        var addbr = false;\n        if (c.showTooltipGridPosition) {\n            s = gridpos.x+', '+gridpos.y;\n            addbr = true;\n        }\n        if (c.showTooltipUnitPosition) {\n            var g;\n            for (var i=0; i<c.tooltipAxisGroups.length; i++) {\n                g = c.tooltipAxisGroups[i];\n                if (addbr) {\n                    s += '<br />';\n                }\n                if (c.useAxesFormatters) {\n                    for (var j=0; j<g.length; j++) {\n                        if (j) {\n                            s += ', ';\n                        }\n                        var af = plot.axes[g[j]]._ticks[0].formatter;\n                        var afstr = plot.axes[g[j]]._ticks[0].formatString;\n                        s += af(afstr, datapos[g[j]]);\n                    }\n                }\n                else {\n                    s += $.jqplot.sprintf(c.tooltipFormatString, datapos[g[0]], datapos[g[1]]);\n                }\n                addbr = true;\n            }\n        }\n        \n        if (c.showTooltipDataPosition) {\n            var series = plot.series; \n            var ret = getIntersectingPoints(plot, gridpos.x, gridpos.y);\n            var addbr = false;\n        \n            for (var i = 0; i< series.length; i++) {\n                if (series[i].show) {\n                    var idx = series[i].index;\n                    var label = series[i].label.toString();\n                    var cellid = $.inArray(idx, ret.indices);\n                    var sx = undefined;\n                    var sy = undefined;\n                    if (cellid != -1) {\n                        var data = ret.data[cellid].data;\n                        if (c.useAxesFormatters) {\n                            var xf = series[i]._xaxis._ticks[0].formatter;\n                            var yf = series[i]._yaxis._ticks[0].formatter;\n                            var xfstr = series[i]._xaxis._ticks[0].formatString;\n                            var yfstr = series[i]._yaxis._ticks[0].formatString;\n                            sx = xf(xfstr, data[0]);\n                            sy = yf(yfstr, data[1]);\n                        }\n                        else {\n                            sx = data[0];\n                            sy = data[1];\n                        }\n                        if (addbr) {\n                            s += '<br />';\n                        }\n                        s += $.jqplot.sprintf(c.tooltipFormatString, label, sx, sy);\n                        addbr = true;\n                    }\n                }\n            }\n            \n        }\n        c._tooltipElem.html(s);\n    }\n    \n    function moveLine(gridpos, plot) {\n        var c = plot.plugins.cursor;\n        var ctx = c.cursorCanvas._ctx;\n        ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n        if (c.showVerticalLine) {\n            c.shapeRenderer.draw(ctx, [[gridpos.x, 0], [gridpos.x, ctx.canvas.height]]);\n        }\n        if (c.showHorizontalLine) {\n            c.shapeRenderer.draw(ctx, [[0, gridpos.y], [ctx.canvas.width, gridpos.y]]);\n        }\n        var ret = getIntersectingPoints(plot, gridpos.x, gridpos.y);\n        if (c.showCursorLegend) {\n            var cells = $(plot.targetId + ' td.jqplot-cursor-legend-label');\n            for (var i=0; i<cells.length; i++) {\n                var idx = $(cells[i]).data('seriesIndex');\n                var series = plot.series[idx];\n                var label = series.label.toString();\n                var cellid = $.inArray(idx, ret.indices);\n                var sx = undefined;\n                var sy = undefined;\n                if (cellid != -1) {\n                    var data = ret.data[cellid].data;\n                    if (c.useAxesFormatters) {\n                        var xf = series._xaxis._ticks[0].formatter;\n                        var yf = series._yaxis._ticks[0].formatter;\n                        var xfstr = series._xaxis._ticks[0].formatString;\n                        var yfstr = series._yaxis._ticks[0].formatString;\n                        sx = xf(xfstr, data[0]);\n                        sy = yf(yfstr, data[1]);\n                    }\n                    else {\n                        sx = data[0];\n                        sy = data[1];\n                    }\n                }\n                if (plot.legend.escapeHtml) {\n                    $(cells[i]).text($.jqplot.sprintf(c.cursorLegendFormatString, label, sx, sy));\n                }\n                else {\n                    $(cells[i]).html($.jqplot.sprintf(c.cursorLegendFormatString, label, sx, sy));\n                }\n            }        \n        }\n        ctx = null;\n    }\n        \n    function getIntersectingPoints(plot, x, y) {\n        var ret = {indices:[], data:[]};\n        var s, i, d0, d, j, r, p;\n        var threshold;\n        var c = plot.plugins.cursor;\n        for (var i=0; i<plot.series.length; i++) {\n            s = plot.series[i];\n            r = s.renderer;\n            if (s.show) {\n                threshold = c.intersectionThreshold;\n                if (s.showMarker) {\n                    threshold += s.markerRenderer.size/2;\n                }\n                for (var j=0; j<s.gridData.length; j++) {\n                    p = s.gridData[j];\n                    // check vertical line\n                    if (c.showVerticalLine) {\n                        if (Math.abs(x-p[0]) <= threshold) {\n                            ret.indices.push(i);\n                            ret.data.push({seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]});\n                        }\n                    }\n                } \n            }\n        }\n        return ret;\n    }\n    \n    function moveTooltip(gridpos, plot) {\n        var c = plot.plugins.cursor;  \n        var elem = c._tooltipElem;\n        switch (c.tooltipLocation) {\n            case 'nw':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset - elem.outerHeight(true);\n                break;\n            case 'n':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;\n                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset - elem.outerHeight(true);\n                break;\n            case 'ne':\n                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset - elem.outerHeight(true);\n                break;\n            case 'e':\n                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;\n                break;\n            case 'se':\n                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;\n                break;\n            case 's':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;\n                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;\n                break;\n            case 'sw':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;\n                break;\n            case 'w':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;\n                break;\n            default:\n                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;\n                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;\n                break;\n        }\n            \n        elem.css('left', x);\n        elem.css('top', y);\n        elem = null;\n    }\n    \n    function positionTooltip(plot) { \n        // fake a grid for positioning\n        var grid = plot._gridPadding; \n        var c = plot.plugins.cursor;\n        var elem = c._tooltipElem;  \n        switch (c.tooltipLocation) {\n            case 'nw':\n                var a = grid.left + c.tooltipOffset;\n                var b = grid.top + c.tooltipOffset;\n                elem.css('left', a);\n                elem.css('top', b);\n                break;\n            case 'n':\n                var a = (grid.left + (plot._plotDimensions.width - grid.right))/2 - elem.outerWidth(true)/2;\n                var b = grid.top + c.tooltipOffset;\n                elem.css('left', a);\n                elem.css('top', b);\n                break;\n            case 'ne':\n                var a = grid.right + c.tooltipOffset;\n                var b = grid.top + c.tooltipOffset;\n                elem.css({right:a, top:b});\n                break;\n            case 'e':\n                var a = grid.right + c.tooltipOffset;\n                var b = (grid.top + (plot._plotDimensions.height - grid.bottom))/2 - elem.outerHeight(true)/2;\n                elem.css({right:a, top:b});\n                break;\n            case 'se':\n                var a = grid.right + c.tooltipOffset;\n                var b = grid.bottom + c.tooltipOffset;\n                elem.css({right:a, bottom:b});\n                break;\n            case 's':\n                var a = (grid.left + (plot._plotDimensions.width - grid.right))/2 - elem.outerWidth(true)/2;\n                var b = grid.bottom + c.tooltipOffset;\n                elem.css({left:a, bottom:b});\n                break;\n            case 'sw':\n                var a = grid.left + c.tooltipOffset;\n                var b = grid.bottom + c.tooltipOffset;\n                elem.css({left:a, bottom:b});\n                break;\n            case 'w':\n                var a = grid.left + c.tooltipOffset;\n                var b = (grid.top + (plot._plotDimensions.height - grid.bottom))/2 - elem.outerHeight(true)/2;\n                elem.css({left:a, top:b});\n                break;\n            default:  // same as 'se'\n                var a = grid.right - c.tooltipOffset;\n                var b = grid.bottom + c.tooltipOffset;\n                elem.css({right:a, bottom:b});\n                break;\n        }\n        elem = null;\n    }\n    \n    function handleClick (ev, gridpos, datapos, neighbor, plot) {\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        var c = plot.plugins.cursor;\n        if (c.clickReset) {\n            c.resetZoom(plot, c);\n        }\n        var sel = window.getSelection;\n        if (document.selection && document.selection.empty)\n        {\n            document.selection.empty();\n        }\n        else if (sel && !sel().isCollapsed) {\n            sel().collapse();\n        }\n        return false;\n    }\n    \n    function handleDblClick (ev, gridpos, datapos, neighbor, plot) {\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        var c = plot.plugins.cursor;\n        if (c.dblClickReset) {\n            c.resetZoom(plot, c);\n        }\n        var sel = window.getSelection;\n        if (document.selection && document.selection.empty)\n        {\n            document.selection.empty();\n        }\n        else if (sel && !sel().isCollapsed) {\n            sel().collapse();\n        }\n        return false;\n    }\n    \n    function handleMouseLeave(ev, gridpos, datapos, neighbor, plot) {\n        var c = plot.plugins.cursor;\n        c.onGrid = false;\n        if (c.show) {\n            $(ev.target).css('cursor', c.previousCursor);\n            if (c.showTooltip && !(c._zoom.zooming && c.showTooltipOutsideZoom && !c.constrainOutsideZoom)) {\n                c._tooltipElem.empty();\n                c._tooltipElem.hide();\n            }\n            if (c.zoom) {\n                c._zoom.gridpos = gridpos;\n                c._zoom.datapos = datapos;\n            }\n            if (c.showVerticalLine || c.showHorizontalLine) {\n                var ctx = c.cursorCanvas._ctx;\n                ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n                ctx = null;\n            }\n            if (c.showCursorLegend) {\n                var cells = $(plot.targetId + ' td.jqplot-cursor-legend-label');\n                for (var i=0; i<cells.length; i++) {\n                    var idx = $(cells[i]).data('seriesIndex');\n                    var series = plot.series[idx];\n                    var label = series.label.toString();\n                    if (plot.legend.escapeHtml) {\n                        $(cells[i]).text($.jqplot.sprintf(c.cursorLegendFormatString, label, undefined, undefined));\n                    }\n                    else {\n                        $(cells[i]).html($.jqplot.sprintf(c.cursorLegendFormatString, label, undefined, undefined));\n                    }\n                \n                }        \n            }\n        }\n    }\n    \n    function handleMouseEnter(ev, gridpos, datapos, neighbor, plot) {\n        var c = plot.plugins.cursor;\n        c.onGrid = true;\n        if (c.show) {\n            c.previousCursor = ev.target.style.cursor;\n            ev.target.style.cursor = c.style;\n            if (c.showTooltip) {\n                updateTooltip(gridpos, datapos, plot);\n                if (c.followMouse) {\n                    moveTooltip(gridpos, plot);\n                }\n                else {\n                    positionTooltip(plot);\n                }\n                c._tooltipElem.show();\n            }\n            if (c.showVerticalLine || c.showHorizontalLine) {\n                moveLine(gridpos, plot);\n            }\n        }\n\n    }    \n    \n    function handleMouseMove(ev, gridpos, datapos, neighbor, plot) {\n        var c = plot.plugins.cursor;\n        if (c.show) {\n            if (c.showTooltip) {\n                updateTooltip(gridpos, datapos, plot);\n                if (c.followMouse) {\n                    moveTooltip(gridpos, plot);\n                }\n            }\n            if (c.showVerticalLine || c.showHorizontalLine) {\n                moveLine(gridpos, plot);\n            }\n        }\n    }\n            \n    function getEventPosition(ev) {\n        var plot = ev.data.plot;\n        var go = plot.eventCanvas._elem.offset();\n        var gridPos = {x:ev.pageX - go.left, y:ev.pageY - go.top};\n        //////\n        // TO DO: handle yMidAxis\n        //////\n        var dataPos = {xaxis:null, yaxis:null, x2axis:null, y2axis:null, y3axis:null, y4axis:null, y5axis:null, y6axis:null, y7axis:null, y8axis:null, y9axis:null, yMidAxis:null};\n        var an = ['xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];\n        var ax = plot.axes;\n        var n, axis;\n        for (n=11; n>0; n--) {\n            axis = an[n-1];\n            if (ax[axis].show) {\n                dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]);\n            }\n        }\n\n        return {offsets:go, gridPos:gridPos, dataPos:dataPos};\n    }    \n    \n    function handleZoomMove(ev) {\n        var plot = ev.data.plot;\n        var c = plot.plugins.cursor;\n        // don't do anything if not on grid.\n        if (c.show && c.zoom && c._zoom.started && !c.zoomTarget) {\n            ev.preventDefault();\n            var ctx = c.zoomCanvas._ctx;\n            var positions = getEventPosition(ev);\n            var gridpos = positions.gridPos;\n            var datapos = positions.dataPos;\n            c._zoom.gridpos = gridpos;\n            c._zoom.datapos = datapos;\n            c._zoom.zooming = true;\n            var xpos = gridpos.x;\n            var ypos = gridpos.y;\n            var height = ctx.canvas.height;\n            var width = ctx.canvas.width;\n            if (c.showTooltip && !c.onGrid && c.showTooltipOutsideZoom) {\n                updateTooltip(gridpos, datapos, plot);\n                if (c.followMouse) {\n                    moveTooltip(gridpos, plot);\n                }\n            }\n            if (c.constrainZoomTo == 'x') {\n                c._zoom.end = [xpos, height];\n            }\n            else if (c.constrainZoomTo == 'y') {\n                c._zoom.end = [width, ypos];\n            }\n            else {\n                c._zoom.end = [xpos, ypos];\n            }\n            var sel = window.getSelection;\n            if (document.selection && document.selection.empty)\n            {\n                document.selection.empty();\n            }\n            else if (sel && !sel().isCollapsed) {\n                sel().collapse();\n            }\n            drawZoomBox.call(c);\n            ctx = null;\n        }\n    }\n    \n    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {\n        var c = plot.plugins.cursor;\n        if(plot.plugins.mobile){\n            $(document).one('vmouseup.jqplot_cursor', {plot:plot}, handleMouseUp);\n        } else {\n            $(document).one('mouseup.jqplot_cursor', {plot:plot}, handleMouseUp);\n        }\n        var axes = plot.axes;\n        if (document.onselectstart != undefined) {\n            c._oldHandlers.onselectstart = document.onselectstart;\n            document.onselectstart = function () { return false; };\n        }\n        if (document.ondrag != undefined) {\n            c._oldHandlers.ondrag = document.ondrag;\n            document.ondrag = function () { return false; };\n        }\n        if (document.onmousedown != undefined) {\n            c._oldHandlers.onmousedown = document.onmousedown;\n            document.onmousedown = function () { return false; };\n        }\n        if (c.zoom) {\n            if (!c.zoomProxy) {\n                var ctx = c.zoomCanvas._ctx;\n                ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n                ctx = null;\n            }\n            if (c.constrainZoomTo == 'x') {\n                c._zoom.start = [gridpos.x, 0];\n            }\n            else if (c.constrainZoomTo == 'y') {\n                c._zoom.start = [0, gridpos.y];\n            }\n            else {\n                c._zoom.start = [gridpos.x, gridpos.y];\n            }\n            c._zoom.started = true;\n            for (var ax in datapos) {\n                // get zoom starting position.\n                c._zoom.axes.start[ax] = datapos[ax];\n            }  \n           if(plot.plugins.mobile){\n                $(document).bind('vmousemove.jqplotCursor', {plot:plot}, handleZoomMove);              \n            } else {\n                $(document).bind('mousemove.jqplotCursor', {plot:plot}, handleZoomMove);              \n            }\n\n        }\n    }\n    \n    function handleMouseUp(ev) {\n        var plot = ev.data.plot;\n        var c = plot.plugins.cursor;\n        if (c.zoom && c._zoom.zooming && !c.zoomTarget) {\n            var xpos = c._zoom.gridpos.x;\n            var ypos = c._zoom.gridpos.y;\n            var datapos = c._zoom.datapos;\n            var height = c.zoomCanvas._ctx.canvas.height;\n            var width = c.zoomCanvas._ctx.canvas.width;\n            var axes = plot.axes;\n            \n            if (c.constrainOutsideZoom && !c.onGrid) {\n                if (xpos < 0) { xpos = 0; }\n                else if (xpos > width) { xpos = width; }\n                if (ypos < 0) { ypos = 0; }\n                else if (ypos > height) { ypos = height; }\n                \n                for (var axis in datapos) {\n                    if (datapos[axis]) {\n                        if (axis.charAt(0) == 'x') {\n                            datapos[axis] = axes[axis].series_p2u(xpos);\n                        }\n                        else {\n                            datapos[axis] = axes[axis].series_p2u(ypos);\n                        }\n                    }\n                }\n            }\n            \n            if (c.constrainZoomTo == 'x') {\n                ypos = height;\n            }\n            else if (c.constrainZoomTo == 'y') {\n                xpos = width;\n            }\n            c._zoom.end = [xpos, ypos];\n            c._zoom.gridpos = {x:xpos, y:ypos};\n            \n            c.doZoom(c._zoom.gridpos, datapos, plot, c);\n        }\n        c._zoom.started = false;\n        c._zoom.zooming = false;\n        \n        $(document).unbind('mousemove.jqplotCursor', handleZoomMove);\n        \n        if (document.onselectstart != undefined && c._oldHandlers.onselectstart != null){\n            document.onselectstart = c._oldHandlers.onselectstart;\n            c._oldHandlers.onselectstart = null;\n        }\n        if (document.ondrag != undefined && c._oldHandlers.ondrag != null){\n            document.ondrag = c._oldHandlers.ondrag;\n            c._oldHandlers.ondrag = null;\n        }\n        if (document.onmousedown != undefined && c._oldHandlers.onmousedown != null){\n            document.onmousedown = c._oldHandlers.onmousedown;\n            c._oldHandlers.onmousedown = null;\n        }\n\n    }\n    \n    function drawZoomBox() {\n        var start = this._zoom.start;\n        var end = this._zoom.end;\n        var ctx = this.zoomCanvas._ctx;\n        var l, t, h, w;\n        if (end[0] > start[0]) {\n            l = start[0];\n            w = end[0] - start[0];\n        }\n        else {\n            l = end[0];\n            w = start[0] - end[0];\n        }\n        if (end[1] > start[1]) {\n            t = start[1];\n            h = end[1] - start[1];\n        }\n        else {\n            t = end[1];\n            h = start[1] - end[1];\n        }\n        ctx.fillStyle = 'rgba(0,0,0,0.2)';\n        ctx.strokeStyle = '#999999';\n        ctx.lineWidth = 1.0;\n        ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);\n        ctx.fillRect(0,0,ctx.canvas.width, ctx.canvas.height);\n        ctx.clearRect(l, t, w, h);\n        // IE won't show transparent fill rect, so stroke a rect also.\n        ctx.strokeRect(l,t,w,h);\n        ctx = null;\n    }\n    \n    $.jqplot.CursorLegendRenderer = function(options) {\n        $.jqplot.TableLegendRenderer.call(this, options);\n        this.formatString = '%s';\n    };\n    \n    $.jqplot.CursorLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();\n    $.jqplot.CursorLegendRenderer.prototype.constructor = $.jqplot.CursorLegendRenderer;\n    \n    // called in context of a Legend\n    $.jqplot.CursorLegendRenderer.prototype.draw = function() {\n        if (this._elem) {\n            this._elem.emptyForce();\n            this._elem = null;\n        }\n        if (this.show) {\n            var series = this._series, s;\n            // make a table.  one line label per row.\n            var elem = document.createElement('table');\n            this._elem = $(elem);\n            elem = null;\n            this._elem.addClass('jqplot-legend jqplot-cursor-legend');\n            this._elem.css('position', 'absolute');\n        \n            var pad = false;\n            for (var i = 0; i< series.length; i++) {\n                s = series[i];\n                if (s.show && s.showLabel) {\n                    var lt = $.jqplot.sprintf(this.formatString, s.label.toString());\n                    if (lt) {\n                        var color = s.color;\n                        if (s._stack && !s.fill) {\n                            color = '';\n                        }\n                        addrow.call(this, lt, color, pad, i);\n                        pad = true;\n                    }\n                    // let plugins add more rows to legend.  Used by trend line plugin.\n                    for (var j=0; j<$.jqplot.addLegendRowHooks.length; j++) {\n                        var item = $.jqplot.addLegendRowHooks[j].call(this, s);\n                        if (item) {\n                            addrow.call(this, item.label, item.color, pad);\n                            pad = true;\n                        } \n                    }\n                }\n            }\n            series = s = null;\n            delete series;\n            delete s;\n        }\n        \n        function addrow(label, color, pad, idx) {\n            var rs = (pad) ? this.rowSpacing : '0';\n            var tr = $('<tr class=\"jqplot-legend jqplot-cursor-legend\"></tr>').appendTo(this._elem);\n            tr.data('seriesIndex', idx);\n            $('<td class=\"jqplot-legend jqplot-cursor-legend-swatch\" style=\"padding-top:'+rs+';\">'+\n                '<div style=\"border:1px solid #cccccc;padding:0.2em;\">'+\n                '<div class=\"jqplot-cursor-legend-swatch\" style=\"background-color:'+color+';\"></div>'+\n                '</div></td>').appendTo(tr);\n            var td = $('<td class=\"jqplot-legend jqplot-cursor-legend-label\" style=\"vertical-align:middle;padding-top:'+rs+';\"></td>');\n            td.appendTo(tr);\n            td.data('seriesIndex', idx);\n            if (this.escapeHtml) {\n                td.text(label);\n            }\n            else {\n                td.html(label);\n            }\n            tr = null;\n            td = null;\n        }\n        return this._elem;\n    };\n    \n})(jQuery);\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {  \n    /**\n     * Class: $.jqplot.DateAxisRenderer\n     * A plugin for a jqPlot to render an axis as a series of date values.\n     * This renderer has no options beyond those supplied by the <Axis> class.\n     * It supplies its own tick formatter, so the tickOptions.formatter option\n     * should not be overridden.\n     * \n     * Thanks to Ken Synder for his enhanced Date instance methods which are\n     * included with this code <http://kendsnyder.com/sandbox/date/>.\n     * \n     * To use this renderer, include the plugin in your source\n     * > <script type=\"text/javascript\" language=\"javascript\" src=\"plugins/jqplot.dateAxisRenderer.js\"></script>\n     * \n     * and supply the appropriate options to your plot\n     * \n     * > {axes:{xaxis:{renderer:$.jqplot.DateAxisRenderer}}}\n     * \n     * Dates can be passed into the axis in almost any recognizable value and \n     * will be parsed.  They will be rendered on the axis in the format\n     * specified by tickOptions.formatString.  e.g. tickOptions.formatString = '%Y-%m-%d'.\n     * \n     * Accecptable format codes \n     * are:\n     * \n     * > Code    Result                  Description\n     * >             == Years ==\n     * > %Y      2008                Four-digit year\n     * > %y      08                  Two-digit year\n     * >             == Months ==\n     * > %m      09                  Two-digit month\n     * > %#m     9                   One or two-digit month\n     * > %B      September           Full month name\n     * > %b      Sep                 Abbreviated month name\n     * >             == Days ==\n     * > %d      05                  Two-digit day of month\n     * > %#d     5                   One or two-digit day of month\n     * > %e      5                   One or two-digit day of month\n     * > %A      Sunday              Full name of the day of the week\n     * > %a      Sun                 Abbreviated name of the day of the week\n     * > %w      0                   Number of the day of the week (0 = Sunday, 6 = Saturday)\n     * > %o      th                  The ordinal suffix string following the day of the month\n     * >             == Hours ==\n     * > %H      23                  Hours in 24-hour format (two digits)\n     * > %#H     3                   Hours in 24-hour integer format (one or two digits)\n     * > %I      11                  Hours in 12-hour format (two digits)\n     * > %#I     3                   Hours in 12-hour integer format (one or two digits)\n     * > %p      PM                  AM or PM\n     * >             == Minutes ==\n     * > %M      09                  Minutes (two digits)\n     * > %#M     9                   Minutes (one or two digits)\n     * >             == Seconds ==\n     * > %S      02                  Seconds (two digits)\n     * > %#S     2                   Seconds (one or two digits)\n     * > %s      1206567625723       Unix timestamp (Seconds past 1970-01-01 00:00:00)\n     * >             == Milliseconds ==\n     * > %N      008                 Milliseconds (three digits)\n     * > %#N     8                   Milliseconds (one to three digits)\n     * >             == Timezone ==\n     * > %O      360                 difference in minutes between local time and GMT\n     * > %Z      Mountain Standard Time  Name of timezone as reported by browser\n     * > %G      -06:00              Hours and minutes between GMT\n     * >             == Shortcuts ==\n     * > %F      2008-03-26          %Y-%m-%d\n     * > %T      05:06:30            %H:%M:%S\n     * > %X      05:06:30            %H:%M:%S\n     * > %x      03/26/08            %m/%d/%y\n     * > %D      03/26/08            %m/%d/%y\n     * > %#c     Wed Mar 26 15:31:00 2008  %a %b %e %H:%M:%S %Y\n     * > %v      3-Sep-2008          %e-%b-%Y\n     * > %R      15:31               %H:%M\n     * > %r      3:31:00 PM          %I:%M:%S %p\n     * >             == Characters ==\n     * > %n      \\n                  Newline\n     * > %t      \\t                  Tab\n     * > %%      %                   Percent Symbol \n     */\n    $.jqplot.DateAxisRenderer = function() {\n        $.jqplot.LinearAxisRenderer.call(this);\n        this.date = new $.jsDate();\n    };\n\n    var second = 1000;\n    var minute = 60 * second;\n    var hour = 60 * minute;\n    var day = 24 * hour;\n    var week = 7 * day;\n\n    // these are less definitive\n    var month = 30.4368499 * day;\n    var year = 365.242199 * day;\n\n    var daysInMonths = [31,28,31,30,31,30,31,30,31,30,31,30];\n    // array of consistent nice intervals.  Longer intervals\n    // will depend on days in month, days in year, etc.\n    var niceFormatStrings = ['%M:%S.%#N', '%M:%S.%#N', '%M:%S.%#N', '%M:%S', '%M:%S', '%M:%S', '%M:%S', '%H:%M:%S', '%H:%M:%S', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%a %H:%M', '%a %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%v', '%v', '%v', '%v', '%v', '%v', '%v'];\n    var niceIntervals = [0.1*second, 0.2*second, 0.5*second, second, 2*second, 5*second, 10*second, 15*second, 30*second, minute, 2*minute, 5*minute, 10*minute, 15*minute, 30*minute, hour, 2*hour, 4*hour, 6*hour, 8*hour, 12*hour, day, 2*day, 3*day, 4*day, 5*day, week, 2*week];\n\n    var niceMonthlyIntervals = [];\n\n    function bestDateInterval(min, max, titarget) {\n        // iterate through niceIntervals to find one closest to titarget\n        var badness = Number.MAX_VALUE;\n        var temp, bestTi, bestfmt;\n        for (var i=0, l=niceIntervals.length; i < l; i++) {\n            temp = Math.abs(titarget - niceIntervals[i]);\n            if (temp < badness) {\n                badness = temp;\n                bestTi = niceIntervals[i];\n                bestfmt = niceFormatStrings[i];\n            }\n        }\n\n        return [bestTi, bestfmt];\n    }\n    \n    $.jqplot.DateAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();\n    $.jqplot.DateAxisRenderer.prototype.constructor = $.jqplot.DateAxisRenderer;\n    \n    $.jqplot.DateTickFormatter = function(format, val) {\n        if (!format) {\n            format = '%Y/%m/%d';\n        }\n        return $.jsDate.strftime(val, format);\n    };\n    \n    $.jqplot.DateAxisRenderer.prototype.init = function(options){\n        // prop: tickRenderer\n        // A class of a rendering engine for creating the ticks labels displayed on the plot, \n        // See <$.jqplot.AxisTickRenderer>.\n        // this.tickRenderer = $.jqplot.AxisTickRenderer;\n        // this.labelRenderer = $.jqplot.AxisLabelRenderer;\n        this.tickOptions.formatter = $.jqplot.DateTickFormatter;\n        // prop: tickInset\n        // Controls the amount to inset the first and last ticks from \n        // the edges of the grid, in multiples of the tick interval.\n        // 0 is no inset, 0.5 is one half a tick interval, 1 is a full\n        // tick interval, etc.\n        this.tickInset = 0;\n        // prop: drawBaseline\n        // True to draw the axis baseline.\n        this.drawBaseline = true;\n        // prop: baselineWidth\n        // width of the baseline in pixels.\n        this.baselineWidth = null;\n        // prop: baselineColor\n        // CSS color spec for the baseline.\n        this.baselineColor = null;\n        this.daTickInterval = null;\n        this._daTickInterval = null;\n        \n        $.extend(true, this, options);\n        \n        var db = this._dataBounds,\n            stats, \n            sum,\n            s,\n            d,\n            pd,\n            sd,\n            intv;\n        \n        // Go through all the series attached to this axis and find\n        // the min/max bounds for this axis.\n        for (var i=0; i<this._series.length; i++) {\n            stats = {intervals:[], frequencies:{}, sortedIntervals:[], min:null, max:null, mean:null};\n            sum = 0;\n            s = this._series[i];\n            d = s.data;\n            pd = s._plotData;\n            sd = s._stackData;\n            intv = 0;\n            \n            for (var j=0; j<d.length; j++) { \n                if (this.name == 'xaxis' || this.name == 'x2axis') {\n                    d[j][0] = new $.jsDate(d[j][0]).getTime();\n                    pd[j][0] = new $.jsDate(d[j][0]).getTime();\n                    sd[j][0] = new $.jsDate(d[j][0]).getTime();\n                    if ((d[j][0] != null && d[j][0] < db.min) || db.min == null) {\n                        db.min = d[j][0];\n                    }\n                    if ((d[j][0] != null && d[j][0] > db.max) || db.max == null) {\n                        db.max = d[j][0];\n                    }\n                    if (j>0) {\n                        intv = Math.abs(d[j][0] - d[j-1][0]);\n                        stats.intervals.push(intv);\n                        if (stats.frequencies.hasOwnProperty(intv)) {\n                            stats.frequencies[intv] += 1;\n                        }\n                        else {\n                            stats.frequencies[intv] = 1;\n                        }\n                    }\n                    sum += intv;\n                    \n                }              \n                else {\n                    d[j][1] = new $.jsDate(d[j][1]).getTime();\n                    pd[j][1] = new $.jsDate(d[j][1]).getTime();\n                    sd[j][1] = new $.jsDate(d[j][1]).getTime();\n                    if ((d[j][1] != null && d[j][1] < db.min) || db.min == null) {\n                        db.min = d[j][1];\n                    }\n                    if ((d[j][1] != null && d[j][1] > db.max) || db.max == null) {\n                        db.max = d[j][1];\n                    }\n                    if (j>0) {\n                        intv = Math.abs(d[j][1] - d[j-1][1]);\n                        stats.intervals.push(intv);\n                        if (stats.frequencies.hasOwnProperty(intv)) {\n                            stats.frequencies[intv] += 1;\n                        }\n                        else {\n                            stats.frequencies[intv] = 1;\n                        }\n                    }\n                }\n                sum += intv;              \n            }\n\n            if (s.renderer.bands) {\n                if (s.renderer.bands.hiData.length) {\n                    var bd = s.renderer.bands.hiData;\n                    for (var j=0, l=bd.length; j < l; j++) {\n                        if (this.name === 'xaxis' || this.name === 'x2axis') {\n                            bd[j][0] = new $.jsDate(bd[j][0]).getTime();\n                            if ((bd[j][0] != null && bd[j][0] > db.max) || db.max == null) {\n                                db.max = bd[j][0];\n                            }                        \n                        }              \n                        else {\n                            bd[j][1] = new $.jsDate(bd[j][1]).getTime();\n                            if ((bd[j][1] != null && bd[j][1] > db.max) || db.max == null) {\n                                db.max = bd[j][1];\n                            }\n                        }\n                    }\n                }\n                if (s.renderer.bands.lowData.length) {\n                    var bd = s.renderer.bands.lowData;\n                    for (var j=0, l=bd.length; j < l; j++) {\n                        if (this.name === 'xaxis' || this.name === 'x2axis') {\n                            bd[j][0] = new $.jsDate(bd[j][0]).getTime();\n                            if ((bd[j][0] != null && bd[j][0] < db.min) || db.min == null) {\n                                db.min = bd[j][0];\n                            }                       \n                        }              \n                        else {\n                            bd[j][1] = new $.jsDate(bd[j][1]).getTime();\n                            if ((bd[j][1] != null && bd[j][1] < db.min) || db.min == null) {\n                                db.min = bd[j][1];\n                            }\n                        }\n                    }\n                }\n            }\n            \n            var tempf = 0,\n                tempn=0;\n            for (var n in stats.frequencies) {\n                stats.sortedIntervals.push({interval:n, frequency:stats.frequencies[n]});\n            }\n            stats.sortedIntervals.sort(function(a, b){\n                return b.frequency - a.frequency;\n            });\n            \n            stats.min = $.jqplot.arrayMin(stats.intervals);\n            stats.max = $.jqplot.arrayMax(stats.intervals);\n            stats.mean = sum/d.length;\n            this._intervalStats.push(stats);\n            stats = sum = s = d = pd = sd = null;\n        }\n        db = null;\n        \n    };\n    \n    // called with scope of an axis\n    $.jqplot.DateAxisRenderer.prototype.reset = function() {\n        this.min = this._options.min;\n        this.max = this._options.max;\n        this.tickInterval = this._options.tickInterval;\n        this.numberTicks = this._options.numberTicks;\n        this._autoFormatString = '';\n        if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {\n            this.tickOptions.formatString = '';\n        }\n        this.daTickInterval = this._daTickInterval;\n        // this._ticks = this.__ticks;\n    };\n    \n    $.jqplot.DateAxisRenderer.prototype.createTicks = function(plot) {\n        // we're are operating on an axis here\n        var ticks = this._ticks;\n        var userTicks = this.ticks;\n        var name = this.name;\n        // databounds were set on axis initialization.\n        var db = this._dataBounds;\n        var iv = this._intervalStats;\n        var dim = (this.name.charAt(0) === 'x') ? this._plotDimensions.width : this._plotDimensions.height;\n        var interval;\n        var min, max;\n        var pos1, pos2;\n        var tt, i;\n        var threshold = 30;\n        var insetMult = 1;\n        var daTickInterval = null;\n        \n        // if user specified a tick interval, convert to usable.\n        if (this.tickInterval != null)\n        {\n            // if interval is a number or can be converted to one, use it.\n            // Assume it is in SECONDS!!!\n            if (Number(this.tickInterval)) {\n                daTickInterval = [Number(this.tickInterval), 'seconds'];\n            }\n            // else, parse out something we can build from.\n            else if (typeof this.tickInterval == \"string\") {\n                var parts = this.tickInterval.split(' ');\n                if (parts.length == 1) {\n                    daTickInterval = [1, parts[0]];\n                }\n                else if (parts.length == 2) {\n                    daTickInterval = [parts[0], parts[1]];\n                }\n            }\n        }\n\n        var tickInterval = this.tickInterval;\n        \n        // if we already have ticks, use them.\n        // ticks must be in order of increasing value.\n        \n        min = new $.jsDate((this.min != null) ? this.min : db.min).getTime();\n        max = new $.jsDate((this.max != null) ? this.max : db.max).getTime();\n\n        // see if we're zooming.  if we are, don't use the min and max we're given,\n        // but compute some nice ones.  They will be reset later.\n\n        var cursor = plot.plugins.cursor;\n\n        if (cursor && cursor._zoom && cursor._zoom.zooming) {\n            this.min = null;\n            this.max = null;\n        }\n\n        var range = max - min;\n\n        if (this.tickOptions == null || !this.tickOptions.formatString) {\n            this._overrideFormatString = true;\n        }\n        \n        if (userTicks.length) {\n            // ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed\n            for (i=0; i<userTicks.length; i++){\n                var ut = userTicks[i];\n                var t = new this.tickRenderer(this.tickOptions);\n                if (ut.constructor == Array) {\n                    t.value = new $.jsDate(ut[0]).getTime();\n                    t.label = ut[1];\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    t.setTick(t.value, this.name);\n                    this._ticks.push(t);\n                }\n                \n                else {\n                    t.value = new $.jsDate(ut).getTime();\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    t.setTick(t.value, this.name);\n                    this._ticks.push(t);\n                }\n            }\n            this.numberTicks = userTicks.length;\n            this.min = this._ticks[0].value;\n            this.max = this._ticks[this.numberTicks-1].value;\n            this.daTickInterval = [(this.max - this.min) / (this.numberTicks - 1)/1000, 'seconds'];\n        }\n\n        ////////\n        // We don't have any ticks yet, let's make some!\n        ////////\n\n        // special case when there is only one point, make three tick marks to center the point\n        else if (this.min == null && this.max == null && db.min == db.max)\n        {\n             var onePointOpts = $.extend(true, {}, this.tickOptions, {name: this.name, value: null});\n             var delta = 300000;\n             this.min = db.min - delta;\n             this.max = db.max + delta;\n             this.numberTicks = 3;\n\n             for(var i=this.min;i<=this.max;i+= delta)\n             {\n                 onePointOpts.value = i;\n\n                 var t = new this.tickRenderer(onePointOpts);\n\n                 if (this._overrideFormatString && this._autoFormatString != '') {\n                    t.formatString = this._autoFormatString;\n                 }\n\n                 t.showLabel = false;\n                 t.showMark = false;\n\n                 this._ticks.push(t);\n             }\n\n             if(this.showTicks) {\n                 this._ticks[1].showLabel = true;\n             }\n             if(this.showTickMarks) {\n                 this._ticks[1].showTickMarks = true;\n             }                   \n        }\n        // if user specified min and max are null, we set those to make best ticks.\n        else if (this.min == null && this.max == null) {\n\n            var opts = $.extend(true, {}, this.tickOptions, {name: this.name, value: null});\n\n            // want to find a nice interval \n            var nttarget,\n                titarget;\n\n            // if no tickInterval or numberTicks options specified,  make a good guess.\n            if (!this.tickInterval && !this.numberTicks) {\n                var tdim = Math.max(dim, threshold+1);\n                // how many ticks to put on the axis?\n                // date labels tend to be long.  If ticks not rotated,\n                // don't use too many and have a high spacing factor.\n                // If we are rotating ticks, use a lower factor.\n                var spacingFactor = 115;\n                if (this.tickRenderer === $.jqplot.CanvasAxisTickRenderer && this.tickOptions.angle) {\n                    spacingFactor = 115 - 40 * Math.abs(Math.sin(this.tickOptions.angle/180*Math.PI));\n                }\n\n                nttarget =  Math.ceil((tdim-threshold)/spacingFactor + 1);\n                titarget = (max - min) / (nttarget - 1);\n            }\n\n            // If tickInterval is specified, we'll try to honor it.\n            // Not guaranteed to get this interval, but we'll get as close as\n            // we can.\n            // tickInterval will be used before numberTicks, that is if\n            // both are specified, numberTicks will be ignored.\n            else if (this.tickInterval) {\n                titarget = new $.jsDate(0).add(daTickInterval[0], daTickInterval[1]).getTime();\n            }\n\n            // if numberTicks specified, try to honor it.\n            // Not guaranteed, but will try to get close.\n            else if (this.numberTicks) {\n                nttarget = this.numberTicks;\n                titarget = (max - min) / (nttarget - 1);\n            }\n\n            // If we can use an interval of 2 weeks or less, pick best one\n            if (titarget <= 19*day) {\n                var ret = bestDateInterval(min, max, titarget);\n                var tempti = ret[0];\n                this._autoFormatString = ret[1];\n\n                min = new $.jsDate(min);\n                min = Math.floor((min.getTime() - min.getUtcOffset())/tempti) * tempti + min.getUtcOffset();\n\n                nttarget = Math.ceil((max - min) / tempti) + 1;\n                this.min = min;\n                this.max = min + (nttarget - 1) * tempti;\n\n                // if max is less than max, add an interval\n                if (this.max < max) {\n                    this.max += tempti;\n                    nttarget += 1;\n                }\n                this.tickInterval = tempti;\n                this.numberTicks = nttarget;\n\n                for (var i=0; i<nttarget; i++) {\n                    opts.value = this.min + i * tempti;\n                    t = new this.tickRenderer(opts);\n                    \n                    if (this._overrideFormatString && this._autoFormatString != '') {\n                        t.formatString = this._autoFormatString;\n                    }\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    this._ticks.push(t);\n                }\n\n                insetMult = this.tickInterval;\n            }\n\n            // should we use a monthly interval?\n            else if (titarget <= 9 * month) {\n\n                this._autoFormatString = '%v';\n\n                // how many months in an interval?\n                var intv = Math.round(titarget/month);\n                if (intv < 1) {\n                    intv = 1;\n                }\n                else if (intv > 6) {\n                    intv = 6;\n                }\n\n                // figure out the starting month and ending month.\n                var mstart = new $.jsDate(min).setDate(1).setHours(0,0,0,0);\n\n                // See if max ends exactly on a month\n                var tempmend = new $.jsDate(max);\n                var mend = new $.jsDate(max).setDate(1).setHours(0,0,0,0);\n\n                if (tempmend.getTime() !== mend.getTime()) {\n                    mend = mend.add(1, 'month');\n                }\n\n                var nmonths = mend.diff(mstart, 'month');\n\n                nttarget = Math.ceil(nmonths/intv) + 1;\n\n                this.min = mstart.getTime();\n                this.max = mstart.clone().add((nttarget - 1) * intv, 'month').getTime();\n                this.numberTicks = nttarget;\n\n                for (var i=0; i<nttarget; i++) {\n                    if (i === 0) {\n                        opts.value = mstart.getTime();\n                    }\n                    else {\n                        opts.value = mstart.add(intv, 'month').getTime();\n                    }\n                    t = new this.tickRenderer(opts);\n                    \n                    if (this._overrideFormatString && this._autoFormatString != '') {\n                        t.formatString = this._autoFormatString;\n                    }\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    this._ticks.push(t);\n                }\n\n                insetMult = intv * month;\n            }\n\n            // use yearly intervals\n            else {\n\n                this._autoFormatString = '%v';\n\n                // how many years in an interval?\n                var intv = Math.round(titarget/year);\n                if (intv < 1) {\n                    intv = 1;\n                }\n\n                // figure out the starting and ending years.\n                var mstart = new $.jsDate(min).setMonth(0, 1).setHours(0,0,0,0);\n                var mend = new $.jsDate(max).add(1, 'year').setMonth(0, 1).setHours(0,0,0,0);\n\n                var nyears = mend.diff(mstart, 'year');\n\n                nttarget = Math.ceil(nyears/intv) + 1;\n\n                this.min = mstart.getTime();\n                this.max = mstart.clone().add((nttarget - 1) * intv, 'year').getTime();\n                this.numberTicks = nttarget;\n\n                for (var i=0; i<nttarget; i++) {\n                    if (i === 0) {\n                        opts.value = mstart.getTime();\n                    }\n                    else {\n                        opts.value = mstart.add(intv, 'year').getTime();\n                    }\n                    t = new this.tickRenderer(opts);\n                    \n                    if (this._overrideFormatString && this._autoFormatString != '') {\n                        t.formatString = this._autoFormatString;\n                    }\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    this._ticks.push(t);\n                }\n\n                insetMult = intv * year;\n            }\n        }\n\n        ////////\n        // Some option(s) specified, work around that.\n        ////////\n        \n        else {      \n            if (name == 'xaxis' || name == 'x2axis') {\n                dim = this._plotDimensions.width;\n            }\n            else {\n                dim = this._plotDimensions.height;\n            }\n            \n            // if min, max and number of ticks specified, user can't specify interval.\n            if (this.min != null && this.max != null && this.numberTicks != null) {\n                this.tickInterval = null;\n            }\n            \n            if (this.tickInterval != null && daTickInterval != null) {\n                this.daTickInterval = daTickInterval;\n            }\n            \n            // if min and max are same, space them out a bit\n            if (min == max) {\n                var adj = 24*60*60*500;  // 1/2 day\n                min -= adj;\n                max += adj;\n            }\n\n            range = max - min;\n            \n            var optNumTicks = 2 + parseInt(Math.max(0, dim-100)/100, 10);\n            \n            \n            var rmin, rmax;\n            \n            rmin = (this.min != null) ? new $.jsDate(this.min).getTime() : min - range/2*(this.padMin - 1);\n            rmax = (this.max != null) ? new $.jsDate(this.max).getTime() : max + range/2*(this.padMax - 1);\n            this.min = rmin;\n            this.max = rmax;\n            range = this.max - this.min;\n            \n            if (this.numberTicks == null){\n                // if tickInterval is specified by user, we will ignore computed maximum.\n                // max will be equal or greater to fit even # of ticks.\n                if (this.daTickInterval != null) {\n                    var nc = new $.jsDate(this.max).diff(this.min, this.daTickInterval[1], true);\n                    this.numberTicks = Math.ceil(nc/this.daTickInterval[0]) +1;\n                    // this.max = new $.jsDate(this.min).add(this.numberTicks-1, this.daTickInterval[1]).getTime();\n                    this.max = new $.jsDate(this.min).add((this.numberTicks-1) * this.daTickInterval[0], this.daTickInterval[1]).getTime();\n                }\n                else if (dim > 200) {\n                    this.numberTicks = parseInt(3+(dim-200)/100, 10);\n                }\n                else {\n                    this.numberTicks = 2;\n                }\n            }\n            \n            insetMult = range / (this.numberTicks-1)/1000;\n\n            if (this.daTickInterval == null) {\n                this.daTickInterval = [insetMult, 'seconds'];\n            }\n\n\n            for (var i=0; i<this.numberTicks; i++){\n                var min = new $.jsDate(this.min);\n                tt = min.add(i*this.daTickInterval[0], this.daTickInterval[1]).getTime();\n                var t = new this.tickRenderer(this.tickOptions);\n                // var t = new $.jqplot.AxisTickRenderer(this.tickOptions);\n                if (!this.showTicks) {\n                    t.showLabel = false;\n                    t.showMark = false;\n                }\n                else if (!this.showTickMarks) {\n                    t.showMark = false;\n                }\n                t.setTick(tt, this.name);\n                this._ticks.push(t);\n            }\n        }\n\n        if (this.tickInset) {\n            this.min = this.min - this.tickInset * insetMult;\n            this.max = this.max + this.tickInset * insetMult;\n        }\n\n        if (this._daTickInterval == null) {\n            this._daTickInterval = this.daTickInterval;    \n        }\n\n        ticks = null;\n    };\n   \n})(jQuery);\n\n","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMove]);\n    \n    /**\n     * Class: $.jqplot.Highlighter\n     * Plugin which will highlight data points when they are moused over.\n     * \n     * To use this plugin, include the js\n     * file in your source:\n     * \n     * > <script type=\"text/javascript\" src=\"plugins/jqplot.highlighter.js\"></script>\n     * \n     * A tooltip providing information about the data point is enabled by default.\n     * To disable the tooltip, set \"showTooltip\" to false.\n     * \n     * You can control what data is displayed in the tooltip with various\n     * options.  The \"tooltipAxes\" option controls whether the x, y or both\n     * data values are displayed.\n     * \n     * Some chart types (e.g. hi-low-close) have more than one y value per\n     * data point. To display the additional values in the tooltip, set the\n     * \"yvalues\" option to the desired number of y values present (3 for a hlc chart).\n     * \n     * By default, data values will be formatted with the same formatting\n     * specifiers as used to format the axis ticks.  A custom format code\n     * can be supplied with the tooltipFormatString option.  This will apply \n     * to all values in the tooltip.  \n     * \n     * For more complete control, the \"formatString\" option can be set.  This\n     * Allows conplete control over tooltip formatting.  Values are passed to\n     * the format string in an order determined by the \"tooltipAxes\" and \"yvalues\"\n     * options.  So, if you have a hi-low-close chart and you just want to display \n     * the hi-low-close values in the tooltip, you could set a formatString like:\n     * \n     * > highlighter: {\n     * >     tooltipAxes: 'y',\n     * >     yvalues: 3,\n     * >     formatString:'<table class=\"jqplot-highlighter\">\n     * >         <tr><td>hi:</td><td>%s</td></tr>\n     * >         <tr><td>low:</td><td>%s</td></tr>\n     * >         <tr><td>close:</td><td>%s</td></tr></table>'\n     * > }\n     * \n     */\n    $.jqplot.Highlighter = function(options) {\n        // Group: Properties\n        //\n        //prop: show\n        // true to show the highlight.\n        this.show = $.jqplot.config.enablePlugins;\n        // prop: markerRenderer\n        // Renderer used to draw the marker of the highlighted point.\n        // Renderer will assimilate attributes from the data point being highlighted,\n        // so no attributes need set on the renderer directly.\n        // Default is to turn off shadow drawing on the highlighted point.\n        this.markerRenderer = new $.jqplot.MarkerRenderer({shadow:false});\n        // prop: showMarker\n        // true to show the marker\n        this.showMarker  = true;\n        // prop: lineWidthAdjust\n        // Pixels to add to the lineWidth of the highlight.\n        this.lineWidthAdjust = 2.5;\n        // prop: sizeAdjust\n        // Pixels to add to the overall size of the highlight.\n        this.sizeAdjust = 5;\n        // prop: showTooltip\n        // Show a tooltip with data point values.\n        this.showTooltip = true;\n        // prop: tooltipLocation\n        // Where to position tooltip, 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'\n        this.tooltipLocation = 'nw';\n        // prop: fadeTooltip\n        // true = fade in/out tooltip, flase = show/hide tooltip\n        this.fadeTooltip = true;\n        // prop: tooltipFadeSpeed\n        // 'slow', 'def', 'fast', or number of milliseconds.\n        this.tooltipFadeSpeed = \"fast\";\n        // prop: tooltipOffset\n        // Pixel offset of tooltip from the highlight.\n        this.tooltipOffset = 2;\n        // prop: tooltipAxes\n        // Which axes to display in tooltip, 'x', 'y' or 'both', 'xy' or 'yx'\n        // 'both' and 'xy' are equivalent, 'yx' reverses order of labels.\n        this.tooltipAxes = 'both';\n        // prop; tooltipSeparator\n        // String to use to separate x and y axes in tooltip.\n        this.tooltipSeparator = ', ';\n        // prop; tooltipContentEditor\n        // Function used to edit/augment/replace the formatted tooltip contents.\n        // Called as str = tooltipContentEditor(str, seriesIndex, pointIndex)\n        // where str is the generated tooltip html and seriesIndex and pointIndex identify\n        // the data point being highlighted. Should return the html for the tooltip contents.\n        this.tooltipContentEditor = null;\n        // prop: useAxesFormatters\n        // Use the x and y axes formatters to format the text in the tooltip.\n        this.useAxesFormatters = true;\n        // prop: tooltipFormatString\n        // sprintf format string for the tooltip.\n        // Uses Ash Searle's javascript sprintf implementation\n        // found here: http://hexmen.com/blog/2007/03/printf-sprintf/\n        // See http://perldoc.perl.org/functions/sprintf.html for reference.\n        // Additional \"p\" and \"P\" format specifiers added by Chris Leonello.\n        this.tooltipFormatString = '%.5P';\n        // prop: formatString\n        // alternative to tooltipFormatString\n        // will format the whole tooltip text, populating with x, y values as\n        // indicated by tooltipAxes option.  So, you could have a tooltip like:\n        // 'Date: %s, number of cats: %d' to format the whole tooltip at one go.\n        // If useAxesFormatters is true, values will be formatted according to\n        // Axes formatters and you can populate your tooltip string with \n        // %s placeholders.\n        this.formatString = null;\n        // prop: yvalues\n        // Number of y values to expect in the data point array.\n        // Typically this is 1.  Certain plots, like OHLC, will\n        // have more y values in each data point array.\n        this.yvalues = 1;\n        // prop: bringSeriesToFront\n        // This option requires jQuery 1.4+\n        // True to bring the series of the highlighted point to the front\n        // of other series.\n        this.bringSeriesToFront = false;\n        this._tooltipElem;\n        this.isHighlighting = false;\n        this.currentNeighbor = null;\n\n        $.extend(true, this, options);\n    };\n    \n    var locations = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n    var locationIndicies = {'nw':0, 'n':1, 'ne':2, 'e':3, 'se':4, 's':5, 'sw':6, 'w':7};\n    var oppositeLocations = ['se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n    \n    // axis.renderer.tickrenderer.formatter\n    \n    // called with scope of plot\n    $.jqplot.Highlighter.init = function (target, data, opts){\n        var options = opts || {};\n        // add a highlighter attribute to the plot\n        this.plugins.highlighter = new $.jqplot.Highlighter(options.highlighter);\n    };\n    \n    // called within scope of series\n    $.jqplot.Highlighter.parseOptions = function (defaults, options) {\n        // Add a showHighlight option to the series \n        // and set it to true by default.\n        this.showHighlight = true;\n    };\n    \n    // called within context of plot\n    // create a canvas which we can draw on.\n    // insert it before the eventCanvas, so eventCanvas will still capture events.\n    $.jqplot.Highlighter.postPlotDraw = function() {\n        // Memory Leaks patch    \n        if (this.plugins.highlighter && this.plugins.highlighter.highlightCanvas) {\n            this.plugins.highlighter.highlightCanvas.resetCanvas();\n            this.plugins.highlighter.highlightCanvas = null;\n        }\n\n        if (this.plugins.highlighter && this.plugins.highlighter._tooltipElem) {\n            this.plugins.highlighter._tooltipElem.emptyForce();\n            this.plugins.highlighter._tooltipElem = null;\n        }\n\n        this.plugins.highlighter.highlightCanvas = new $.jqplot.GenericCanvas();\n        \n        this.eventCanvas._elem.before(this.plugins.highlighter.highlightCanvas.createElement(this._gridPadding, 'jqplot-highlight-canvas', this._plotDimensions, this));\n        this.plugins.highlighter.highlightCanvas.setContext();\n\n        var elem = document.createElement('div');\n        this.plugins.highlighter._tooltipElem = $(elem);\n        elem = null;\n        this.plugins.highlighter._tooltipElem.addClass('jqplot-highlighter-tooltip');\n        this.plugins.highlighter._tooltipElem.css({position:'absolute', display:'none'});\n        \n        this.eventCanvas._elem.before(this.plugins.highlighter._tooltipElem);\n    };\n    \n    $.jqplot.preInitHooks.push($.jqplot.Highlighter.init);\n    $.jqplot.preParseSeriesOptionsHooks.push($.jqplot.Highlighter.parseOptions);\n    $.jqplot.postDrawHooks.push($.jqplot.Highlighter.postPlotDraw);\n    \n    function draw(plot, neighbor) {\n        var hl = plot.plugins.highlighter;\n        var s = plot.series[neighbor.seriesIndex];\n        var smr = s.markerRenderer;\n        var mr = hl.markerRenderer;\n        mr.style = smr.style;\n        mr.lineWidth = smr.lineWidth + hl.lineWidthAdjust;\n        mr.size = smr.size + hl.sizeAdjust;\n        var rgba = $.jqplot.getColorComponents(smr.color);\n        var newrgb = [rgba[0], rgba[1], rgba[2]];\n        var alpha = (rgba[3] >= 0.6) ? rgba[3]*0.6 : rgba[3]*(2-rgba[3]);\n        mr.color = 'rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+alpha+')';\n        mr.init();\n        mr.draw(s.gridData[neighbor.pointIndex][0], s.gridData[neighbor.pointIndex][1], hl.highlightCanvas._ctx);\n    }\n    \n    function showTooltip(plot, series, neighbor) {\n        // neighbor looks like: {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]}\n        // gridData should be x,y pixel coords on the grid.\n        // add the plot._gridPadding to that to get x,y in the target.\n        var hl = plot.plugins.highlighter;\n        var elem = hl._tooltipElem;\n        var serieshl = series.highlighter || {};\n\n        var opts = $.extend(true, {}, hl, serieshl);\n\n        if (opts.useAxesFormatters) {\n            var xf = series._xaxis._ticks[0].formatter;\n            var yf = series._yaxis._ticks[0].formatter;\n            var xfstr = series._xaxis._ticks[0].formatString;\n            var yfstr = series._yaxis._ticks[0].formatString;\n            var str;\n            var xstr = xf(xfstr, neighbor.data[0]);\n            var ystrs = [];\n            for (var i=1; i<opts.yvalues+1; i++) {\n                ystrs.push(yf(yfstr, neighbor.data[i]));\n            }\n            if (typeof opts.formatString === 'string') {\n                switch (opts.tooltipAxes) {\n                    case 'both':\n                    case 'xy':\n                        ystrs.unshift(xstr);\n                        ystrs.unshift(opts.formatString);\n                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);\n                        break;\n                    case 'yx':\n                        ystrs.push(xstr);\n                        ystrs.unshift(opts.formatString);\n                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);\n                        break;\n                    case 'x':\n                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, [opts.formatString, xstr]);\n                        break;\n                    case 'y':\n                        ystrs.unshift(opts.formatString);\n                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);\n                        break;\n                    default: // same as xy\n                        ystrs.unshift(xstr);\n                        ystrs.unshift(opts.formatString);\n                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);\n                        break;\n                } \n            }\n            else {\n                switch (opts.tooltipAxes) {\n                    case 'both':\n                    case 'xy':\n                        str = xstr;\n                        for (var i=0; i<ystrs.length; i++) {\n                            str += opts.tooltipSeparator + ystrs[i];\n                        }\n                        break;\n                    case 'yx':\n                        str = '';\n                        for (var i=0; i<ystrs.length; i++) {\n                            str += ystrs[i] + opts.tooltipSeparator;\n                        }\n                        str += xstr;\n                        break;\n                    case 'x':\n                        str = xstr;\n                        break;\n                    case 'y':\n                        str = ystrs.join(opts.tooltipSeparator);\n                        break;\n                    default: // same as 'xy'\n                        str = xstr;\n                        for (var i=0; i<ystrs.length; i++) {\n                            str += opts.tooltipSeparator + ystrs[i];\n                        }\n                        break;\n                    \n                }                \n            }\n        }\n        else {\n            var str;\n            if (typeof opts.formatString ===  'string') {\n                str = $.jqplot.sprintf.apply($.jqplot.sprintf, [opts.formatString].concat(neighbor.data));\n            }\n\n            else {\n                if (opts.tooltipAxes == 'both' || opts.tooltipAxes == 'xy') {\n                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]);\n                }\n                else if (opts.tooltipAxes == 'yx') {\n                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]);\n                }\n                else if (opts.tooltipAxes == 'x') {\n                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]);\n                }\n                else if (opts.tooltipAxes == 'y') {\n                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]);\n                } \n            }\n        }\n        if ($.isFunction(opts.tooltipContentEditor)) {\n            // args str, seriesIndex, pointIndex are essential so the hook can look up\n            // extra data for the point.\n            str = opts.tooltipContentEditor(str, neighbor.seriesIndex, neighbor.pointIndex, plot);\n        }\n        elem.html(str);\n        var gridpos = {x:neighbor.gridData[0], y:neighbor.gridData[1]};\n        var ms = 0;\n        var fact = 0.707;\n        if (series.markerRenderer.show == true) { \n            ms = (series.markerRenderer.size + opts.sizeAdjust)/2;\n        }\n\n        var loc = locations;\n        if (series.fillToZero && series.fill && neighbor.data[1] < 0) {\n          loc = oppositeLocations;\n        }\n\n        switch (loc[locationIndicies[opts.tooltipLocation]]) {\n            case 'nw':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;\n                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;\n                break;\n            case 'n':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;\n                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - ms;\n                break;\n            case 'ne':\n                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms;\n                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;\n                break;\n            case 'e':\n                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + ms;\n                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;\n                break;\n            case 'se':\n                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms;\n                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;\n                break;\n            case 's':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;\n                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + ms;\n                break;\n            case 'sw':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;\n                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;\n                break;\n            case 'w':\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - ms;\n                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;\n                break;\n            default: // same as 'nw'\n                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;\n                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;\n                break;\n        }\n        elem.css('left', x);\n        elem.css('top', y);\n        if (opts.fadeTooltip) {\n            // Fix for stacked up animations.  Thnanks Trevor!\n            elem.stop(true,true).fadeIn(opts.tooltipFadeSpeed);\n        }\n        else {\n            elem.show();\n        }\n        elem = null;\n        \n    }\n    \n    function handleMove(ev, gridpos, datapos, neighbor, plot) {\n        var hl = plot.plugins.highlighter;\n        var c = plot.plugins.cursor;\n        if (hl.show) {\n            if (neighbor == null && hl.isHighlighting) {\n                var evt = jQuery.Event('jqplotHighlighterUnhighlight');\n                plot.target.trigger(evt);\n\n                var ctx = hl.highlightCanvas._ctx;\n                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                if (hl.fadeTooltip) {\n                    hl._tooltipElem.fadeOut(hl.tooltipFadeSpeed);\n                }\n                else {\n                    hl._tooltipElem.hide();\n                }\n                if (hl.bringSeriesToFront) {\n                    plot.restorePreviousSeriesOrder();\n                }\n                hl.isHighlighting = false;\n                hl.currentNeighbor = null;\n                ctx = null;\n            }\n            else if (neighbor != null && plot.series[neighbor.seriesIndex].showHighlight && !hl.isHighlighting) {\n                var evt = jQuery.Event('jqplotHighlighterHighlight');\n                evt.which = ev.which;\n                evt.pageX = ev.pageX;\n                evt.pageY = ev.pageY;\n                var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data, plot];\n                plot.target.trigger(evt, ins);\n\n                hl.isHighlighting = true;\n                hl.currentNeighbor = neighbor;\n                if (hl.showMarker) {\n                    draw(plot, neighbor);\n                }\n                if (plot.series[neighbor.seriesIndex].show && hl.showTooltip && (!c || !c._zoom.started)) {\n                    showTooltip(plot, plot.series[neighbor.seriesIndex], neighbor);\n                }\n                if (hl.bringSeriesToFront) {\n                    plot.moveSeriesToFront(neighbor.seriesIndex);\n                }\n            }\n            // check to see if we're highlighting the wrong point.\n            else if (neighbor != null && hl.isHighlighting && hl.currentNeighbor != neighbor) {\n                // highlighting the wrong point.\n\n                // if new series allows highlighting, highlight new point.\n                if (plot.series[neighbor.seriesIndex].showHighlight) {\n                    var ctx = hl.highlightCanvas._ctx;\n                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n                    hl.isHighlighting = true;\n                    hl.currentNeighbor = neighbor;\n                    if (hl.showMarker) {\n                        draw(plot, neighbor);\n                    }\n                    if (plot.series[neighbor.seriesIndex].show && hl.showTooltip && (!c || !c._zoom.started)) {\n                        showTooltip(plot, plot.series[neighbor.seriesIndex], neighbor);\n                    }\n                    if (hl.bringSeriesToFront) {\n                        plot.moveSeriesToFront(neighbor.seriesIndex);\n                    }                    \n                }                \n            }\n        }\n    }\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    /**\n    *  class: $.jqplot.LogAxisRenderer\n    *  A plugin for a jqPlot to render a logarithmic axis.\n    * \n    *  To use this renderer, include the plugin in your source\n    *  > <script type=\"text/javascript\" language=\"javascript\" src=\"plugins/jqplot.logAxisRenderer.js\"></script>\n    *  \n    *  and supply the appropriate options to your plot\n    *  \n    *  > {axes:{xaxis:{renderer:$.jqplot.LogAxisRenderer}}}\n    **/ \n    $.jqplot.LogAxisRenderer = function() {\n        $.jqplot.LinearAxisRenderer.call(this);\n        // prop: axisDefaults\n        // Default properties which will be applied directly to the series.\n        //\n        // Group: Properties\n        //\n        // Properties\n        //\n        // base - the logarithmic base, commonly 2, 10 or Math.E\n        // tickDistribution - Deprecated.  \"power\" distribution of ticks\n        // always used.  Option has no effect.\n        this.axisDefaults = {\n            base : 10,\n            tickDistribution :'power'\n        };\n    };\n    \n    $.jqplot.LogAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();\n    $.jqplot.LogAxisRenderer.prototype.constructor = $.jqplot.LogAxisRenderer;\n    \n    $.jqplot.LogAxisRenderer.prototype.init = function(options) {\n        // prop: drawBaseline\n        // True to draw the axis baseline.\n        this.drawBaseline = true;\n        // prop: minorTicks\n        // Number of ticks to add between \"major\" ticks.\n        // Major ticks are ticks supplied by user or auto computed.\n        // Minor ticks cannot be created by user.\n        this.minorTicks = 'auto';\n        this._scalefact = 1.0;\n\n        $.extend(true, this, options);\n\n        this._autoFormatString = '%d';\n        this._overrideFormatString = false;\n\n        for (var d in this.renderer.axisDefaults) {\n            if (this[d] == null) {\n                this[d] = this.renderer.axisDefaults[d];\n            }\n        }\n\n        this.resetDataBounds();\n    };\n    \n    $.jqplot.LogAxisRenderer.prototype.createTicks = function(plot) {\n        // we're are operating on an axis here\n        var ticks = this._ticks;\n        var userTicks = this.ticks;\n        var name = this.name;\n        var db = this._dataBounds;\n        var dim = (this.name.charAt(0) === 'x') ? this._plotDimensions.width : this._plotDimensions.height;\n        var interval;\n        var min, max;\n        var pos1, pos2;\n        var tt, i;\n\n        var threshold = 30;\n        // For some reason scalefactor is screwing up ticks.\n        this._scalefact =  (Math.max(dim, threshold+1) - threshold)/300;\n\n        // if we already have ticks, use them.\n        // ticks must be in order of increasing value.\n        if (userTicks.length) {\n            // ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed\n            for (i=0; i<userTicks.length; i++){\n                var ut = userTicks[i];\n                var t = new this.tickRenderer(this.tickOptions);\n                if (ut.constructor == Array) {\n                    t.value = ut[0];\n                    t.label = ut[1];\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    t.setTick(ut[0], this.name);\n                    this._ticks.push(t);\n                }\n\n                else if ($.isPlainObject(ut)) {\n                    $.extend(true, t, ut);\n                    t.axis = this.name;\n                    this._ticks.push(t);\n                }\n                \n                else {\n                    t.value = ut;\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    t.setTick(ut, this.name);\n                    this._ticks.push(t);\n                }\n            }\n            this.numberTicks = userTicks.length;\n            this.min = this._ticks[0].value;\n            this.max = this._ticks[this.numberTicks-1].value;\n        }\n        \n        // we don't have any ticks yet, let's make some!\n        else if (this.min == null && this.max == null) {\n            min = db.min * (2 - this.padMin);\n            max = db.max * this.padMax;\n            \n            // if min and max are same, space them out a bit\n            if (min == max) {\n                var adj = 0.05;\n                min = min*(1-adj);\n                max = max*(1+adj);\n            }\n            \n            // perform some checks\n            if (this.min != null && this.min <= 0) {\n                throw new Error(\"Log axis minimum must be greater than 0\");\n            }\n            if (this.max != null && this.max <= 0) {\n                throw new Error(\"Log axis maximum must be greater than 0\");\n            }\n\n            function findCeil (val) {\n                var order = Math.pow(10, Math.floor(Math.log(val)/Math.LN10));\n                return Math.ceil(val/order) * order;\n            }\n\n            function findFloor(val) {\n                var order = Math.pow(10, Math.floor(Math.log(val)/Math.LN10));\n                return Math.floor(val/order) * order;\n            }\n\n            // var range = max - min;\n            var rmin, rmax;\n\n            // for power distribution, open up range to get a nice power of axis.renderer.base.\n            // power distribution won't respect the user's min/max settings.\n            rmin = Math.pow(this.base, Math.floor(Math.log(min)/Math.log(this.base)));\n            rmax = Math.pow(this.base, Math.ceil(Math.log(max)/Math.log(this.base)));\n\n            // // if min and max are same, space them out a bit\n            // if (rmin === rmax) {\n            //     var adj = 0.05;\n            //     rmin = rmin*(1-adj);\n            //     rmax = rmax*(1+adj);\n            // }\n\n            // Handle case where a data value was zero\n            if (rmin === 0) {\n              rmin = 1;\n            }\n\n            var order = Math.round(Math.log(rmin)/Math.LN10);\n\n            if (this.tickOptions == null || !this.tickOptions.formatString) {\n                this._overrideFormatString = true;\n            }\n\n            this.min = rmin;\n            this.max = rmax;\n            var range = this.max - this.min;            \n\n            var minorTicks = (this.minorTicks === 'auto') ? 0 : this.minorTicks;\n            var numberTicks;\n            if (this.numberTicks == null){\n                if (dim > 140) {\n                    numberTicks = Math.round(Math.log(this.max/this.min)/Math.log(this.base) + 1);\n                    if (numberTicks < 2) {\n                        numberTicks = 2;\n                    }\n                    if (minorTicks === 0) {\n                        var temp = dim/(numberTicks - 1);\n                        if (temp < 100) {\n                            minorTicks = 0;\n                        }\n                        else if (temp < 190) {\n                            minorTicks = 1;\n                        }\n                        else if (temp < 250) {\n                            minorTicks = 3;\n                        }\n                        else if (temp < 600) {\n                            minorTicks = 4;\n                        }\n                        else {\n                            minorTicks = 9;\n                        }\n                    }\n                }\n                else {\n                    numberTicks = 2;\n                    if (minorTicks === 0) {\n                        minorTicks = 1;\n                    }\n                    minorTicks = 0;\n                }\n            }\n            else {\n                numberTicks = this.numberTicks;\n            }\n\n            if (order >= 0 && minorTicks !== 3) {\n                this._autoFormatString = '%d';\n            }\n            // Adjust format string for case with 3 ticks where we'll have like 1, 2.5, 5, 7.5, 10\n            else if (order <= 0 && minorTicks === 3) {\n                var temp = -(order - 1);\n                this._autoFormatString = '%.'+ Math.abs(order-1) + 'f';\n            }\n\n            // Adjust format string for values less than 1.\n            else if (order < 0) {\n                var temp = -order;\n                this._autoFormatString = '%.'+ Math.abs(order) + 'f';\n            }\n\n            else {\n                this._autoFormatString = '%d';\n            }\n\n            var to, t, val, tt1, spread, interval;\n            for (var i=0; i<numberTicks; i++){\n                tt = Math.pow(this.base, i - numberTicks + 1) * this.max;\n\n                t = new this.tickRenderer(this.tickOptions);\n            \n                if (this._overrideFormatString) {\n                    t.formatString = this._autoFormatString;\n                }\n                \n                if (!this.showTicks) {\n                    t.showLabel = false;\n                    t.showMark = false;\n                }\n                else if (!this.showTickMarks) {\n                    t.showMark = false;\n                }\n                t.setTick(tt, this.name);\n                this._ticks.push(t);\n\n                if (minorTicks && i<numberTicks-1) {\n                    tt1 = Math.pow(this.base, i - numberTicks + 2) * this.max;\n                    spread = tt1 - tt;\n                    interval = tt1 / (minorTicks+1);\n                    for (var j=minorTicks-1; j>=0; j--) {\n                        val = tt1-interval*(j+1);\n                        t = new this.tickRenderer(this.tickOptions);\n            \n                        if (this._overrideFormatString && this._autoFormatString != '') {\n                            t.formatString = this._autoFormatString;\n                        }\n                        if (!this.showTicks) {\n                            t.showLabel = false;\n                            t.showMark = false;\n                        }\n                        else if (!this.showTickMarks) {\n                            t.showMark = false;\n                        }\n                        t.setTick(val, this.name);\n                        this._ticks.push(t);\n                    }\n                }       \n            }     \n        }\n\n        // min and max are set as would be the case with zooming\n        else if (this.min != null && this.max != null) {\n            var opts = $.extend(true, {}, this.tickOptions, {name: this.name, value: null});\n            var nt, ti;\n            // don't have an interval yet, pick one that gives the most\n            // \"round\" ticks we can get.\n            if (this.numberTicks == null && this.tickInterval == null) {\n                // var threshold = 30;\n                var tdim = Math.max(dim, threshold+1);\n                var nttarget =  Math.ceil((tdim-threshold)/35 + 1);\n\n                var ret = $.jqplot.LinearTickGenerator.bestConstrainedInterval(this.min, this.max, nttarget);\n\n                this._autoFormatString = ret[3];\n                nt = ret[2];\n                ti = ret[4];\n\n                for (var i=0; i<nt; i++) {\n                    opts.value = this.min + i * ti;\n                    t = new this.tickRenderer(opts);\n                    \n                    if (this._overrideFormatString && this._autoFormatString != '') {\n                        t.formatString = this._autoFormatString;\n                    }\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    this._ticks.push(t);\n                }\n            }\n\n            // for loose zoom, number ticks and interval are also set.\n            else if (this.numberTicks != null && this.tickInterval != null) {\n                nt = this.numberTicks;\n                for (var i=0; i<nt; i++) {\n                    opts.value = this.min + i * this.tickInterval;\n                    t = new this.tickRenderer(opts);\n                    \n                    if (this._overrideFormatString && this._autoFormatString != '') {\n                        t.formatString = this._autoFormatString;\n                    }\n                    if (!this.showTicks) {\n                        t.showLabel = false;\n                        t.showMark = false;\n                    }\n                    else if (!this.showTickMarks) {\n                        t.showMark = false;\n                    }\n                    this._ticks.push(t);\n                }\n            }\n        }\n    };\n    \n    $.jqplot.LogAxisRenderer.prototype.pack = function(pos, offsets) {\n        var lb = parseInt(this.base, 10);\n        var ticks = this._ticks;\n        var trans = function (v) { return Math.log(v)/Math.log(lb); };\n        var invtrans = function (v) { return Math.pow(Math.E, (Math.log(lb)*v)); };\n        var max = trans(this.max);\n        var min = trans(this.min);\n        var offmax = offsets.max;\n        var offmin = offsets.min;\n        var lshow = (this._label == null) ? false : this._label.show;\n        \n        for (var p in pos) {\n            this._elem.css(p, pos[p]);\n        }\n        \n        this._offsets = offsets;\n        // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.\n        var pixellength = offmax - offmin;\n        var unitlength = max - min;\n        \n        // point to unit and unit to point conversions references to Plot DOM element top left corner.\n        this.p2u = function(p){\n            return invtrans((p - offmin) * unitlength / pixellength + min);\n        };\n        \n        this.u2p = function(u){\n            return (trans(u) - min) * pixellength / unitlength + offmin;\n        };\n        \n        if (this.name == 'xaxis' || this.name == 'x2axis'){\n            this.series_u2p = function(u){\n                return (trans(u) - min) * pixellength / unitlength;\n            };\n            this.series_p2u = function(p){\n                return invtrans(p * unitlength / pixellength + min);\n            };\n        }\n        // yaxis is max at top of canvas.\n        else {\n            this.series_u2p = function(u){\n                return (trans(u) - max) * pixellength / unitlength;\n            };\n            this.series_p2u = function(p){\n                return invtrans(p * unitlength / pixellength + max);\n            };\n        }\n        \n        if (this.show) {\n            if (this.name == 'xaxis' || this.name == 'x2axis') {\n                for (var i=0; i<ticks.length; i++) {\n                    var t = ticks[i];\n                    if (t.show && t.showLabel) {\n                        var shim;\n                        \n                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                            switch (t.labelPosition) {\n                                case 'auto':\n                                    // position at end\n                                    if (t.angle < 0) {\n                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    }\n                                    // position at start\n                                    else {\n                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'end':\n                                    shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                                case 'start':\n                                    shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    break;\n                                case 'middle':\n                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                                default:\n                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    break;\n                            }\n                        }\n                        else {\n                            shim = -t.getWidth()/2;\n                        }\n                        // var shim = t.getWidth()/2;\n                        var val = this.u2p(t.value) + shim + 'px';\n                        t._elem.css('left', val);\n                        t.pack();\n                    }\n                }\n                if (lshow) {\n                    var w = this._label._elem.outerWidth(true);\n                    this._label._elem.css('left', offmin + pixellength/2 - w/2 + 'px');\n                    if (this.name == 'xaxis') {\n                        this._label._elem.css('bottom', '0px');\n                    }\n                    else {\n                        this._label._elem.css('top', '0px');\n                    }\n                    this._label.pack();\n                }\n            }\n            else {\n                for (var i=0; i<ticks.length; i++) {\n                    var t = ticks[i];\n                    if (t.show && t.showLabel) {                        \n                        var shim;\n                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {\n                            switch (t.labelPosition) {\n                                case 'auto':\n                                    // position at end\n                                case 'end':\n                                    if (t.angle < 0) {\n                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                    }\n                                    else {\n                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'start':\n                                    if (t.angle > 0) {\n                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;\n                                    }\n                                    else {\n                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;\n                                    }\n                                    break;\n                                case 'middle':\n                                    // if (t.angle > 0) {\n                                    //     shim = -t.getHeight()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;\n                                    // }\n                                    // else {\n                                    //     shim = -t.getHeight()/2 - t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;\n                                    // }\n                                    shim = -t.getHeight()/2;\n                                    break;\n                                default:\n                                    shim = -t.getHeight()/2;\n                                    break;\n                            }\n                        }\n                        else {\n                            shim = -t.getHeight()/2;\n                        }\n                        \n                        var val = this.u2p(t.value) + shim + 'px';\n                        t._elem.css('top', val);\n                        t.pack();\n                    }\n                }\n                if (lshow) {\n                    var h = this._label._elem.outerHeight(true);\n                    this._label._elem.css('top', offmax - pixellength/2 - h/2 + 'px');\n                    if (this.name == 'yaxis') {\n                        this._label._elem.css('left', '0px');\n                    }\n                    else {\n                        this._label._elem.css('right', '0px');\n                    }   \n                    this._label.pack();\n                }\n            }\n        }        \n    };\n})(jQuery);","/**\n * jqPlot\n * Pure JavaScript plotting plugin using jQuery\n *\n * Version: @VERSION\n * Revision: @REVISION\n *\n * Copyright (c) 2009-2016 Chris Leonello\n * jqPlot is currently available for use in all personal or commercial projects \n * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL \n * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can \n * choose the license that best suits your project and use it accordingly. \n *\n * Although not required, the author would appreciate an email letting him \n * know of any substantial use of jqPlot.  You can reach the author at: \n * chris at jqplot dot com or see http://www.jqplot.com/info.php .\n *\n * If you are feeling kind and generous, consider supporting the project by\n * making a donation at: http://www.jqplot.com/donate.php .\n *\n * sprintf functions contained in jqplot.sprintf.js by Ash Searle:\n *\n *     version 2007.04.27\n *     author Ash Searle\n *     http://hexmen.com/blog/2007/03/printf-sprintf/\n *     http://hexmen.com/js/sprintf.js\n *     The author (Ash Searle) has placed this code in the public domain:\n *     \"This code is unrestricted: you are free to use it however you like.\"\n * \n */\n(function($) {\n    \n    /**\n     * Class: $.jqplot.PointLabels\n     * Plugin for putting labels at the data points.\n     * \n     * To use this plugin, include the js\n     * file in your source:\n     * \n     * > <script type=\"text/javascript\" src=\"plugins/jqplot.pointLabels.js\"></script>\n     * \n     * By default, the last value in the data ponit array in the data series is used\n     * for the label.  For most series renderers, extra data can be added to the \n     * data point arrays and the last value will be used as the label.\n     * \n     * For instance, \n     * this series:\n     * \n     * > [[1,4], [3,5], [7,2]]\n     * \n     * Would, by default, use the y values in the labels.\n     * Extra data can be added to the series like so:\n     * \n     * > [[1,4,'mid'], [3 5,'hi'], [7,2,'low']]\n     * \n     * And now the point labels would be 'mid', 'low', and 'hi'.\n     * \n     * Options to the point labels and a custom labels array can be passed into the\n     * \"pointLabels\" option on the series option like so:\n     * \n     * > series:[{pointLabels:{\n     * >    labels:['mid', 'hi', 'low'],\n     * >    location:'se',\n     * >    ypadding: 12\n     * >    }\n     * > }]\n     * \n     * A custom labels array in the options takes precendence over any labels\n     * in the series data.  If you have a custom labels array in the options,\n     * but still want to use values from the series array as labels, set the\n     * \"labelsFromSeries\" option to true.\n     * \n     * By default, html entities (<, >, etc.) are escaped in point labels.  \n     * If you want to include actual html markup in the labels, \n     * set the \"escapeHTML\" option to false.\n     * \n     */\n    $.jqplot.PointLabels = function(options) {\n        // Group: Properties\n        //\n        // prop: show\n        // show the labels or not.\n        this.show = $.jqplot.config.enablePlugins;\n        // prop: location\n        // compass location where to position the label around the point.\n        // 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'\n        this.location = 'n';\n        // prop: labelsFromSeries\n        // true to use labels within data point arrays.\n        this.labelsFromSeries = false;\n        // prop: seriesLabelIndex\n        // array index for location of labels within data point arrays.\n        // if null, will use the last element of the data point array.\n        this.seriesLabelIndex = null;\n        // prop: labels\n        // array of arrays of labels, one array for each series.\n        this.labels = [];\n        // actual labels that will get displayed.\n        // needed to preserve user specified labels in labels array.\n        this._labels = [];\n        // prop: stackedValue\n        // true to display value as stacked in a stacked plot.\n        // no effect if labels is specified.\n        this.stackedValue = false;\n        // prop: ypadding\n        // vertical padding in pixels between point and label\n        this.ypadding = 6;\n        // prop: xpadding\n        // horizontal padding in pixels between point and label\n        this.xpadding = 6;\n        // prop: escapeHTML\n        // true to escape html entities in the labels.\n        // If you want to include markup in the labels, set to false.\n        this.escapeHTML = true;\n        // prop: edgeTolerance\n        // Number of pixels that the label must be away from an axis\n        // boundary in order to be drawn.  Negative values will allow overlap\n        // with the grid boundaries.\n        this.edgeTolerance = -5;\n        // prop: formatter\n        // A class of a formatter for the tick text.  sprintf by default.\n        this.formatter = $.jqplot.DefaultTickFormatter;\n        // prop: formatString\n        // string passed to the formatter.\n        this.formatString = '';\n        // prop: hideZeros\n        // true to not show a label for a value which is 0.\n        this.hideZeros = false;\n        this._elems = [];\n        \n        $.extend(true, this, options);\n    };\n    \n    var locations = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];\n    var locationIndicies = {'nw':0, 'n':1, 'ne':2, 'e':3, 'se':4, 's':5, 'sw':6, 'w':7};\n    var oppositeLocations = ['se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n    \n    // called with scope of a series\n    $.jqplot.PointLabels.init = function (target, data, seriesDefaults, opts, plot){\n        var options = $.extend(true, {}, seriesDefaults, opts);\n        options.pointLabels = options.pointLabels || {};\n        if (this.renderer.constructor === $.jqplot.BarRenderer && this.barDirection === 'horizontal' && !options.pointLabels.location) {\n            options.pointLabels.location = 'e';\n        }\n        // add a pointLabels attribute to the series plugins\n        this.plugins.pointLabels = new $.jqplot.PointLabels(options.pointLabels);\n        this.plugins.pointLabels.setLabels.call(this);\n    };\n    \n    // called with scope of series\n    $.jqplot.PointLabels.prototype.setLabels = function() {   \n        var p = this.plugins.pointLabels; \n        var labelIdx;\n        if (p.seriesLabelIndex != null) {\n            labelIdx = p.seriesLabelIndex;\n        }\n        else if (this.renderer.constructor === $.jqplot.BarRenderer && this.barDirection === 'horizontal') {\n           labelIdx = (this._plotData[0].length < 3) ? 0 : this._plotData[0].length -1;\n        }\n        else {\n            labelIdx = (this._plotData.length === 0) ? 0 : this._plotData[0].length -1;\n        }\n        p._labels = [];\n        if (p.labels.length === 0 || p.labelsFromSeries) {    \n            if (p.stackedValue) {\n                if (this._plotData.length && this._plotData[0].length){\n                    // var idx = p.seriesLabelIndex || this._plotData[0].length -1;\n                    for (var i=0; i<this._plotData.length; i++) {\n                        p._labels.push(this._plotData[i][labelIdx]);\n                    }\n                }\n            }\n            else {\n                // var d = this._plotData;\n                var d = this.data;\n                if (this.renderer.constructor === $.jqplot.BarRenderer && this.waterfall) {\n                    d = this._data;\n                }\n                if (d.length && d[0].length) {\n                    // var idx = p.seriesLabelIndex || d[0].length -1;\n                    for (var i=0; i<d.length; i++) {\n                        p._labels.push(d[i][labelIdx]);\n                    }\n                }\n                d = null;\n            }\n        }\n        else if (p.labels.length){\n            p._labels = p.labels;\n        }\n    };\n    \n    $.jqplot.PointLabels.prototype.xOffset = function(elem, location, padding) {\n        location = location || this.location;\n        padding = padding || this.xpadding;\n        var offset;\n        \n        switch (location) {\n            case 'nw':\n                offset = -elem.outerWidth(true) - this.xpadding;\n                break;\n            case 'n':\n                offset = -elem.outerWidth(true)/2;\n                break;\n            case 'ne':\n                offset =  this.xpadding;\n                break;\n            case 'e':\n                offset = this.xpadding;\n                break;\n            case 'se':\n                offset = this.xpadding;\n                break;\n            case 's':\n                offset = -elem.outerWidth(true)/2;\n                break;\n            case 'sw':\n                offset = -elem.outerWidth(true) - this.xpadding;\n                break;\n            case 'w':\n                offset = -elem.outerWidth(true) - this.xpadding;\n                break;\n            default: // same as 'nw'\n                offset = -elem.outerWidth(true) - this.xpadding;\n                break;\n        }\n        return offset; \n    };\n    \n    $.jqplot.PointLabels.prototype.yOffset = function(elem, location, padding) {\n        location = location || this.location;\n        padding = padding || this.xpadding;\n        var offset;\n        \n        switch (location) {\n            case 'nw':\n                offset = -elem.outerHeight(true) - this.ypadding;\n                break;\n            case 'n':\n                offset = -elem.outerHeight(true) - this.ypadding;\n                break;\n            case 'ne':\n                offset = -elem.outerHeight(true) - this.ypadding;\n                break;\n            case 'e':\n                offset = -elem.outerHeight(true)/2;\n                break;\n            case 'se':\n                offset = this.ypadding;\n                break;\n            case 's':\n                offset = this.ypadding;\n                break;\n            case 'sw':\n                offset = this.ypadding;\n                break;\n            case 'w':\n                offset = -elem.outerHeight(true)/2;\n                break;\n            default: // same as 'nw'\n                offset = -elem.outerHeight(true) - this.ypadding;\n                break;\n        }\n        return offset; \n    };\n    \n    // called with scope of series\n    $.jqplot.PointLabels.draw = function (sctx, options, plot) {\n        var p = this.plugins.pointLabels;\n        // set labels again in case they have changed.\n        p.setLabels.call(this);\n        // remove any previous labels\n        for (var i=0; i<p._elems.length; i++) {\n            // Memory Leaks patch\n            // p._elems[i].remove();\n            if(p._elems[i]) {\n                p._elems[i].emptyForce();\n            }\n        }\n        p._elems.splice(0, p._elems.length);\n\n        if (p.show) {\n            var ax = '_'+this._stackAxis+'axis';\n        \n            if (!p.formatString) {\n                p.formatString = this[ax]._ticks[0].formatString;\n                p.formatter = this[ax]._ticks[0].formatter;\n            }\n        \n            var pd = this._plotData;\n            var ppd = this._prevPlotData;\n            var xax = this._xaxis;\n            var yax = this._yaxis;\n            var elem, helem;\n\n            for (var i=0, l=p._labels.length; i < l; i++) {\n                var label = p._labels[i];\n                \n                if (label == null || (p.hideZeros && parseFloat(label) == 0)) {\n                    continue;\n                }\n                \n                label = p.formatter(p.formatString, label);\n\n                helem = document.createElement('div');\n                p._elems[i] = $(helem);\n\n                elem = p._elems[i];\n\n\n                elem.addClass('jqplot-point-label jqplot-series-'+this.index+' jqplot-point-'+i);\n                elem.css('position', 'absolute');\n                elem.insertAfter(sctx.canvas);\n\n                if (p.escapeHTML) {\n                    elem.text(label);\n                }\n                else {\n                    elem.html(label);\n                }\n                var location = p.location;\n                if ((this.fillToZero && pd[i][1] < 0) || (this.fillToZero && this._type === 'bar' && this.barDirection === 'horizontal' && pd[i][0] < 0) || (this.waterfall && parseInt(label, 10)) < 0) {\n                    location = oppositeLocations[locationIndicies[location]];\n                }\n\n\n                var ell = xax.u2p(pd[i][0]) + p.xOffset(elem, location);\n                var elt = yax.u2p(pd[i][1]) + p.yOffset(elem, location);\n\n                // we have stacked chart but are not showing stacked values,\n                // place labels in center.\n                if (this._stack && !p.stackedValue) {\n                    if (this.barDirection === \"vertical\") {\n                        elt = (this._barPoints[i][0][1] + this._barPoints[i][1][1]) / 2 + plot._gridPadding.top - 0.5 * elem.outerHeight(true);\n                    }\n                    else {\n                        ell = (this._barPoints[i][2][0] + this._barPoints[i][0][0]) / 2 + plot._gridPadding.left - 0.5 * elem.outerWidth(true);\n                    }\n                }\n\n                if (this.renderer.constructor == $.jqplot.BarRenderer) {\n                    if (this.barDirection == \"vertical\") {\n                        ell += this._barNudge;\n                    }\n                    else {\n                        elt -= this._barNudge;\n                    }\n                }\n                elem.css('left', ell);\n                elem.css('top', elt);\n                var elr = ell + elem.width();\n                var elb = elt + elem.height();\n                var et = p.edgeTolerance;\n                var scl = $(sctx.canvas).position().left;\n                var sct = $(sctx.canvas).position().top;\n                var scr = sctx.canvas.width + scl;\n                var scb = sctx.canvas.height + sct;\n                // if label is outside of allowed area, remove it\n                if (ell - et < scl || elt - et < sct || elr + et > scr || elb + et > scb) {\n                    elem.remove();\n                }\n\n                elem = null;\n                helem = null;\n            }\n\n            // finally, animate them if the series is animated\n            // if (this.renderer.animation && this.renderer.animation._supported && this.renderer.animation.show && plot._drawCount < 2) {\n            //     var sel = '.jqplot-point-label.jqplot-series-'+this.index;\n            //     $(sel).hide();\n            //     $(sel).fadeIn(1000);\n            // }\n\n        }\n    };\n    \n    $.jqplot.postSeriesInitHooks.push($.jqplot.PointLabels.init);\n    $.jqplot.postDrawSeriesHooks.push($.jqplot.PointLabels.draw);\n})(jQuery);\n","\"use strict\";\nexports.__esModule = true;\nvar DataLoader = /** @class */ (function () {\n    function DataLoader(treeWidget) {\n        this.treeWidget = treeWidget;\n    }\n    DataLoader.prototype.loadFromUrl = function (urlInfo, parentNode, onFinished) {\n        var _this = this;\n        if (!urlInfo) {\n            return;\n        }\n        var $el = this.getDomElement(parentNode);\n        this.addLoadingClass($el);\n        this.notifyLoading(true, parentNode, $el);\n        var stopLoading = function () {\n            _this.removeLoadingClass($el);\n            _this.notifyLoading(false, parentNode, $el);\n        };\n        var handleSuccess = function (data) {\n            stopLoading();\n            _this.treeWidget.loadData(_this.parseData(data), parentNode);\n            if (onFinished && typeof onFinished === \"function\") {\n                onFinished();\n            }\n        };\n        var handleError = function (jqXHR) {\n            stopLoading();\n            var onLoadFailed = _this.treeWidget.options.onLoadFailed;\n            if (onLoadFailed) {\n                onLoadFailed(jqXHR);\n            }\n        };\n        this.submitRequest(urlInfo, handleSuccess, handleError);\n    };\n    DataLoader.prototype.addLoadingClass = function ($el) {\n        if ($el) {\n            $el.addClass(\"jqtree-loading\");\n        }\n    };\n    DataLoader.prototype.removeLoadingClass = function ($el) {\n        if ($el) {\n            $el.removeClass(\"jqtree-loading\");\n        }\n    };\n    DataLoader.prototype.getDomElement = function (parentNode) {\n        if (parentNode) {\n            return jQuery(parentNode.element);\n        }\n        else {\n            return this.treeWidget.element;\n        }\n    };\n    DataLoader.prototype.notifyLoading = function (isLoading, node, $el) {\n        var onLoading = this.treeWidget.options.onLoading;\n        if (onLoading) {\n            onLoading(isLoading, node, $el);\n        }\n        this.treeWidget._triggerEvent(\"tree.loading_data\", {\n            isLoading: isLoading,\n            node: node,\n            $el: $el\n        });\n    };\n    DataLoader.prototype.submitRequest = function (urlInfo, handleSuccess, handleError) {\n        var ajaxSettings = jQuery.extend({ method: \"GET\" }, typeof urlInfo === \"string\" ? { url: urlInfo } : urlInfo, {\n            cache: false,\n            dataType: \"json\",\n            success: handleSuccess,\n            error: handleError\n        });\n        ajaxSettings.method = ajaxSettings.method.toUpperCase();\n        jQuery.ajax(ajaxSettings);\n    };\n    DataLoader.prototype.parseData = function (data) {\n        var dataFilter = this.treeWidget.options.dataFilter;\n        var parsedData = data instanceof Array || typeof data === \"object\"\n            ? data\n            : data != null\n                ? jQuery.parseJSON(data)\n                : [];\n        return dataFilter ? dataFilter(parsedData) : parsedData;\n    };\n    return DataLoader;\n}());\nexports[\"default\"] = DataLoader;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar jQuery = require(\"jquery\");\nvar node_1 = require(\"./node\");\nvar util_1 = require(\"./util\");\nvar DragAndDropHandler = /** @class */ (function () {\n    function DragAndDropHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.hovered_area = null;\n        this.hit_areas = [];\n        this.is_dragging = false;\n        this.current_item = null;\n        this.position_info = null;\n    }\n    DragAndDropHandler.prototype.mouseCapture = function (position_info) {\n        var $element = jQuery(position_info.target);\n        if (!this.mustCaptureElement($element)) {\n            return null;\n        }\n        if (this.tree_widget.options.onIsMoveHandle &&\n            !this.tree_widget.options.onIsMoveHandle($element)) {\n            return null;\n        }\n        var node_element = this.tree_widget._getNodeElement($element);\n        if (node_element && this.tree_widget.options.onCanMove) {\n            if (!this.tree_widget.options.onCanMove(node_element.node)) {\n                node_element = null;\n            }\n        }\n        this.current_item = node_element;\n        return this.current_item != null;\n    };\n    DragAndDropHandler.prototype.generateHitAreas = function () {\n        if (!this.current_item) {\n            this.hit_areas = [];\n        }\n        else {\n            var hit_areas_generator = new HitAreasGenerator(this.tree_widget.tree, this.current_item.node, this.getTreeDimensions().bottom);\n            this.hit_areas = hit_areas_generator.generate();\n        }\n    };\n    DragAndDropHandler.prototype.mouseStart = function (position_info) {\n        if (!this.current_item) {\n            return false;\n        }\n        else {\n            this.refresh();\n            var offset = jQuery(position_info.target).offset();\n            var left = offset ? offset.left : 0;\n            var top_1 = offset ? offset.top : 0;\n            var node = this.current_item.node;\n            var node_name = this.tree_widget.options.autoEscape\n                ? util_1.htmlEscape(node.name)\n                : node.name;\n            this.drag_element = new DragElement(node_name, position_info.page_x - left, position_info.page_y - top_1, this.tree_widget.element);\n            this.is_dragging = true;\n            this.position_info = position_info;\n            this.current_item.$element.addClass(\"jqtree-moving\");\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.mouseDrag = function (position_info) {\n        if (!this.current_item || !this.drag_element) {\n            return false;\n        }\n        else {\n            this.drag_element.move(position_info.page_x, position_info.page_y);\n            this.position_info = position_info;\n            var area = this.findHoveredArea(position_info.page_x, position_info.page_y);\n            var can_move_to = this.canMoveToArea(area);\n            if (can_move_to && area) {\n                if (!area.node.isFolder()) {\n                    this.stopOpenFolderTimer();\n                }\n                if (this.hovered_area !== area) {\n                    this.hovered_area = area;\n                    // If this is a closed folder, start timer to open it\n                    if (this.mustOpenFolderTimer(area)) {\n                        this.startOpenFolderTimer(area.node);\n                    }\n                    else {\n                        this.stopOpenFolderTimer();\n                    }\n                    this.updateDropHint();\n                }\n            }\n            else {\n                this.removeHover();\n                this.removeDropHint();\n                this.stopOpenFolderTimer();\n            }\n            if (!area) {\n                if (this.tree_widget.options.onDragMove) {\n                    this.tree_widget.options.onDragMove(this.current_item.node, position_info.original_event);\n                }\n            }\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.mouseStop = function (position_info) {\n        this.moveItem(position_info);\n        this.clear();\n        this.removeHover();\n        this.removeDropHint();\n        this.removeHitAreas();\n        var current_item = this.current_item;\n        if (this.current_item) {\n            this.current_item.$element.removeClass(\"jqtree-moving\");\n            this.current_item = null;\n        }\n        this.is_dragging = false;\n        this.position_info = null;\n        if (!this.hovered_area && current_item) {\n            if (this.tree_widget.options.onDragStop) {\n                this.tree_widget.options.onDragStop(current_item.node, position_info.original_event);\n            }\n        }\n        return false;\n    };\n    DragAndDropHandler.prototype.refresh = function () {\n        this.removeHitAreas();\n        if (this.current_item) {\n            this.generateHitAreas();\n            this.current_item = this.tree_widget._getNodeElementForNode(this.current_item.node);\n            if (this.is_dragging) {\n                this.current_item.$element.addClass(\"jqtree-moving\");\n            }\n        }\n    };\n    DragAndDropHandler.prototype.mustCaptureElement = function ($element) {\n        return !$element.is(\"input,select,textarea\");\n    };\n    DragAndDropHandler.prototype.canMoveToArea = function (area) {\n        if (!area || !this.current_item) {\n            return false;\n        }\n        else if (this.tree_widget.options.onCanMoveTo) {\n            var position_name = node_1.getPositionName(area.position);\n            return this.tree_widget.options.onCanMoveTo(this.current_item.node, area.node, position_name);\n        }\n        else {\n            return true;\n        }\n    };\n    DragAndDropHandler.prototype.removeHitAreas = function () {\n        this.hit_areas = [];\n    };\n    DragAndDropHandler.prototype.clear = function () {\n        if (this.drag_element) {\n            this.drag_element.remove();\n            this.drag_element = null;\n        }\n    };\n    DragAndDropHandler.prototype.removeDropHint = function () {\n        if (this.previous_ghost) {\n            this.previous_ghost.remove();\n        }\n    };\n    DragAndDropHandler.prototype.removeHover = function () {\n        this.hovered_area = null;\n    };\n    DragAndDropHandler.prototype.findHoveredArea = function (x, y) {\n        var dimensions = this.getTreeDimensions();\n        if (x < dimensions.left ||\n            y < dimensions.top ||\n            x > dimensions.right ||\n            y > dimensions.bottom) {\n            return null;\n        }\n        var low = 0;\n        var high = this.hit_areas.length;\n        while (low < high) {\n            // tslint:disable-next-line: no-bitwise\n            var mid = (low + high) >> 1;\n            var area = this.hit_areas[mid];\n            if (y < area.top) {\n                high = mid;\n            }\n            else if (y > area.bottom) {\n                low = mid + 1;\n            }\n            else {\n                return area;\n            }\n        }\n        return null;\n    };\n    DragAndDropHandler.prototype.mustOpenFolderTimer = function (area) {\n        var node = area.node;\n        return (node.isFolder() &&\n            !node.is_open &&\n            area.position === node_1.Position.Inside);\n    };\n    DragAndDropHandler.prototype.updateDropHint = function () {\n        if (!this.hovered_area) {\n            return;\n        }\n        // remove previous drop hint\n        this.removeDropHint();\n        // add new drop hint\n        var node_element = this.tree_widget._getNodeElementForNode(this.hovered_area.node);\n        this.previous_ghost = node_element.addDropHint(this.hovered_area.position);\n    };\n    DragAndDropHandler.prototype.startOpenFolderTimer = function (folder) {\n        var _this = this;\n        var openFolder = function () {\n            _this.tree_widget._openNode(folder, _this.tree_widget.options.slide, function () {\n                _this.refresh();\n                _this.updateDropHint();\n            });\n        };\n        this.stopOpenFolderTimer();\n        this.open_folder_timer = setTimeout(openFolder, this.tree_widget.options.openFolderDelay);\n    };\n    DragAndDropHandler.prototype.stopOpenFolderTimer = function () {\n        if (this.open_folder_timer) {\n            clearTimeout(this.open_folder_timer);\n            this.open_folder_timer = null;\n        }\n    };\n    DragAndDropHandler.prototype.moveItem = function (position_info) {\n        var _this = this;\n        if (this.current_item &&\n            this.hovered_area &&\n            this.hovered_area.position !== node_1.Position.None &&\n            this.canMoveToArea(this.hovered_area)) {\n            var moved_node_1 = this.current_item.node;\n            var target_node_1 = this.hovered_area.node;\n            var position_1 = this.hovered_area.position;\n            var previous_parent = moved_node_1.parent;\n            if (position_1 === node_1.Position.Inside) {\n                this.hovered_area.node.is_open = true;\n            }\n            var doMove = function () {\n                _this.tree_widget.tree.moveNode(moved_node_1, target_node_1, position_1);\n                _this.tree_widget.element.empty();\n                _this.tree_widget._refreshElements(null);\n            };\n            var event_1 = this.tree_widget._triggerEvent(\"tree.move\", {\n                move_info: {\n                    moved_node: moved_node_1,\n                    target_node: target_node_1,\n                    position: node_1.getPositionName(position_1),\n                    previous_parent: previous_parent,\n                    do_move: doMove,\n                    original_event: position_info.original_event\n                }\n            });\n            if (!event_1.isDefaultPrevented()) {\n                doMove();\n            }\n        }\n    };\n    DragAndDropHandler.prototype.getTreeDimensions = function () {\n        // Return the dimensions of the tree. Add a margin to the bottom to allow\n        // to drag-and-drop after the last element.\n        var offset = this.tree_widget.element.offset();\n        if (!offset) {\n            return { left: 0, top: 0, right: 0, bottom: 0 };\n        }\n        else {\n            var el = this.tree_widget.element;\n            var width = el.width() || 0;\n            var height = el.height() || 0;\n            var left = offset.left + this.tree_widget._getScrollLeft();\n            return {\n                left: left,\n                top: offset.top,\n                right: left + width,\n                bottom: offset.top + height + 16\n            };\n        }\n    };\n    return DragAndDropHandler;\n}());\nexports.DragAndDropHandler = DragAndDropHandler;\nvar VisibleNodeIterator = /** @class */ (function () {\n    function VisibleNodeIterator(tree) {\n        this.tree = tree;\n    }\n    VisibleNodeIterator.prototype.iterate = function () {\n        var _this = this;\n        var is_first_node = true;\n        var _iterateNode = function (node, next_node) {\n            var must_iterate_inside = (node.is_open || !node.element) && node.hasChildren();\n            var $element = null;\n            if (node.element) {\n                $element = jQuery(node.element);\n                if (!$element.is(\":visible\")) {\n                    return;\n                }\n                if (is_first_node) {\n                    _this.handleFirstNode(node);\n                    is_first_node = false;\n                }\n                if (!node.hasChildren()) {\n                    _this.handleNode(node, next_node, $element);\n                }\n                else if (node.is_open) {\n                    if (!_this.handleOpenFolder(node, $element)) {\n                        must_iterate_inside = false;\n                    }\n                }\n                else {\n                    _this.handleClosedFolder(node, next_node, $element);\n                }\n            }\n            if (must_iterate_inside) {\n                var children_length_1 = node.children.length;\n                node.children.forEach(function (_, i) {\n                    if (i === children_length_1 - 1) {\n                        _iterateNode(node.children[i], null);\n                    }\n                    else {\n                        _iterateNode(node.children[i], node.children[i + 1]);\n                    }\n                });\n                if (node.is_open && $element) {\n                    _this.handleAfterOpenFolder(node, next_node);\n                }\n            }\n        };\n        _iterateNode(this.tree, null);\n    };\n    return VisibleNodeIterator;\n}());\nvar HitAreasGenerator = /** @class */ (function (_super) {\n    __extends(HitAreasGenerator, _super);\n    function HitAreasGenerator(tree, current_node, tree_bottom) {\n        var _this = _super.call(this, tree) || this;\n        _this.current_node = current_node;\n        _this.tree_bottom = tree_bottom;\n        return _this;\n    }\n    HitAreasGenerator.prototype.generate = function () {\n        this.positions = [];\n        this.last_top = 0;\n        this.iterate();\n        return this.generateHitAreas(this.positions);\n    };\n    HitAreasGenerator.prototype.generateHitAreas = function (positions) {\n        var previous_top = -1;\n        var group = [];\n        var hit_areas = [];\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n            var position = positions_1[_i];\n            if (position.top !== previous_top && group.length) {\n                if (group.length) {\n                    this.generateHitAreasForGroup(hit_areas, group, previous_top, position.top);\n                }\n                previous_top = position.top;\n                group = [];\n            }\n            group.push(position);\n        }\n        this.generateHitAreasForGroup(hit_areas, group, previous_top, this.tree_bottom);\n        return hit_areas;\n    };\n    HitAreasGenerator.prototype.handleOpenFolder = function (node, $element) {\n        if (node === this.current_node) {\n            // Cannot move inside current item\n            // Stop iterating\n            return false;\n        }\n        // Cannot move before current item\n        if (node.children[0] !== this.current_node) {\n            this.addPosition(node, node_1.Position.Inside, this.getTop($element));\n        }\n        // Continue iterating\n        return true;\n    };\n    HitAreasGenerator.prototype.handleClosedFolder = function (node, next_node, $element) {\n        var top = this.getTop($element);\n        if (node === this.current_node) {\n            // Cannot move after current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.Inside, top);\n            // Cannot move before current item\n            if (next_node !== this.current_node) {\n                this.addPosition(node, node_1.Position.After, top);\n            }\n        }\n    };\n    HitAreasGenerator.prototype.handleFirstNode = function (node) {\n        if (node !== this.current_node) {\n            this.addPosition(node, node_1.Position.Before, this.getTop(jQuery(node.element)));\n        }\n    };\n    HitAreasGenerator.prototype.handleAfterOpenFolder = function (node, next_node) {\n        if (node === this.current_node || next_node === this.current_node) {\n            // Cannot move before or after current item\n            this.addPosition(node, node_1.Position.None, this.last_top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.After, this.last_top);\n        }\n    };\n    HitAreasGenerator.prototype.handleNode = function (node, next_node, $element) {\n        var top = this.getTop($element);\n        if (node === this.current_node) {\n            // Cannot move inside current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.Inside, top);\n        }\n        if (next_node === this.current_node || node === this.current_node) {\n            // Cannot move before or after current item\n            this.addPosition(node, node_1.Position.None, top);\n        }\n        else {\n            this.addPosition(node, node_1.Position.After, top);\n        }\n    };\n    HitAreasGenerator.prototype.getTop = function ($element) {\n        var offset = $element.offset();\n        return offset ? offset.top : 0;\n    };\n    HitAreasGenerator.prototype.addPosition = function (node, position, top) {\n        var area = {\n            top: top,\n            bottom: 0,\n            node: node,\n            position: position\n        };\n        this.positions.push(area);\n        this.last_top = top;\n    };\n    HitAreasGenerator.prototype.generateHitAreasForGroup = function (hit_areas, positions_in_group, top, bottom) {\n        // limit positions in group\n        var position_count = Math.min(positions_in_group.length, 4);\n        var area_height = Math.round((bottom - top) / position_count);\n        var area_top = top;\n        var i = 0;\n        while (i < position_count) {\n            var position = positions_in_group[i];\n            hit_areas.push({\n                top: area_top,\n                bottom: area_top + area_height,\n                node: position.node,\n                position: position.position\n            });\n            area_top += area_height;\n            i += 1;\n        }\n    };\n    return HitAreasGenerator;\n}(VisibleNodeIterator));\nexports.HitAreasGenerator = HitAreasGenerator;\nvar DragElement = /** @class */ (function () {\n    function DragElement(node_name, offset_x, offset_y, $tree) {\n        this.offset_x = offset_x;\n        this.offset_y = offset_y;\n        this.$element = jQuery(\"<span class=\\\"jqtree-title jqtree-dragging\\\">\" + node_name + \"</span>\");\n        this.$element.css(\"position\", \"absolute\");\n        $tree.append(this.$element);\n    }\n    DragElement.prototype.move = function (page_x, page_y) {\n        this.$element.offset({\n            left: page_x - this.offset_x,\n            top: page_y - this.offset_y\n        });\n    };\n    DragElement.prototype.remove = function () {\n        this.$element.remove();\n    };\n    return DragElement;\n}());\n","\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar ElementsRenderer = /** @class */ (function () {\n    function ElementsRenderer(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.opened_icon_element = this.createButtonElement(tree_widget.options.openedIcon);\n        this.closed_icon_element = this.createButtonElement(tree_widget.options.closedIcon);\n    }\n    ElementsRenderer.prototype.render = function (from_node) {\n        if (from_node && from_node.parent) {\n            this.renderFromNode(from_node);\n        }\n        else {\n            this.renderFromRoot();\n        }\n    };\n    ElementsRenderer.prototype.renderFromRoot = function () {\n        var $element = this.tree_widget.element;\n        $element.empty();\n        this.createDomElements($element[0], this.tree_widget.tree.children, true, 1);\n    };\n    ElementsRenderer.prototype.renderFromNode = function (node) {\n        // remember current li\n        var $previous_li = jQuery(node.element);\n        // create element\n        var li = this.createLi(node, node.getLevel());\n        this.attachNodeData(node, li);\n        // add element to dom\n        $previous_li.after(li);\n        // remove previous li\n        $previous_li.remove();\n        // create children\n        if (node.children) {\n            this.createDomElements(li, node.children, false, node.getLevel() + 1);\n        }\n    };\n    ElementsRenderer.prototype.createDomElements = function (element, children, is_root_node, level) {\n        var ul = this.createUl(is_root_node);\n        element.appendChild(ul);\n        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n            var child = children_1[_i];\n            var li = this.createLi(child, level);\n            ul.appendChild(li);\n            this.attachNodeData(child, li);\n            if (child.hasChildren()) {\n                this.createDomElements(li, child.children, false, level + 1);\n            }\n        }\n    };\n    ElementsRenderer.prototype.attachNodeData = function (node, li) {\n        node.element = li;\n        jQuery(li).data(\"node\", node);\n    };\n    ElementsRenderer.prototype.createUl = function (is_root_node) {\n        var class_string;\n        var role;\n        if (!is_root_node) {\n            class_string = \"\";\n            role = \"group\";\n        }\n        else {\n            class_string = \"jqtree-tree\";\n            role = \"tree\";\n            if (this.tree_widget.options.rtl) {\n                class_string += \" jqtree-rtl\";\n            }\n        }\n        var ul = document.createElement(\"ul\");\n        ul.className = \"jqtree_common \" + class_string;\n        ul.setAttribute(\"role\", role);\n        return ul;\n    };\n    ElementsRenderer.prototype.createLi = function (node, level) {\n        var is_selected = Boolean(this.tree_widget.select_node_handler &&\n            this.tree_widget.select_node_handler.isNodeSelected(node));\n        var li = node.isFolder()\n            ? this.createFolderLi(node, level, is_selected)\n            : this.createNodeLi(node, level, is_selected);\n        if (this.tree_widget.options.onCreateLi) {\n            this.tree_widget.options.onCreateLi(node, jQuery(li), is_selected);\n        }\n        return li;\n    };\n    ElementsRenderer.prototype.createFolderLi = function (node, level, is_selected) {\n        var button_classes = this.getButtonClasses(node);\n        var folder_classes = this.getFolderClasses(node, is_selected);\n        var icon_element = node.is_open\n            ? this.opened_icon_element\n            : this.closed_icon_element;\n        // li\n        var li = document.createElement(\"li\");\n        li.className = \"jqtree_common \" + folder_classes;\n        li.setAttribute(\"role\", \"presentation\");\n        // div\n        var div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n        li.appendChild(div);\n        // button link\n        var button_link = document.createElement(\"a\");\n        button_link.className = button_classes;\n        button_link.appendChild(icon_element.cloneNode(true));\n        button_link.setAttribute(\"role\", \"presentation\");\n        button_link.setAttribute(\"aria-hidden\", \"true\");\n        if (this.tree_widget.options.buttonLeft) {\n            div.appendChild(button_link);\n        }\n        // title span\n        div.appendChild(this.createTitleSpan(node.name, level, is_selected, node.is_open, true));\n        if (!this.tree_widget.options.buttonLeft) {\n            div.appendChild(button_link);\n        }\n        return li;\n    };\n    ElementsRenderer.prototype.createNodeLi = function (node, level, is_selected) {\n        var li_classes = [\"jqtree_common\"];\n        if (is_selected) {\n            li_classes.push(\"jqtree-selected\");\n        }\n        var class_string = li_classes.join(\" \");\n        // li\n        var li = document.createElement(\"li\");\n        li.className = class_string;\n        li.setAttribute(\"role\", \"presentation\");\n        // div\n        var div = document.createElement(\"div\");\n        div.className = \"jqtree-element jqtree_common\";\n        div.setAttribute(\"role\", \"presentation\");\n        li.appendChild(div);\n        // title span\n        div.appendChild(this.createTitleSpan(node.name, level, is_selected, node.is_open, false));\n        return li;\n    };\n    ElementsRenderer.prototype.createTitleSpan = function (node_name, level, is_selected, is_open, is_folder) {\n        var title_span = document.createElement(\"span\");\n        var classes = \"jqtree-title jqtree_common\";\n        if (is_folder) {\n            classes += \" jqtree-title-folder\";\n        }\n        title_span.className = classes;\n        title_span.setAttribute(\"role\", \"treeitem\");\n        title_span.setAttribute(\"aria-level\", \"\" + level);\n        title_span.setAttribute(\"aria-selected\", util_1.getBoolString(is_selected));\n        title_span.setAttribute(\"aria-expanded\", util_1.getBoolString(is_open));\n        if (is_selected) {\n            title_span.setAttribute(\"tabindex\", this.tree_widget.options.tabIndex);\n        }\n        title_span.innerHTML = this.escapeIfNecessary(node_name);\n        return title_span;\n    };\n    ElementsRenderer.prototype.getButtonClasses = function (node) {\n        var classes = [\"jqtree-toggler\", \"jqtree_common\"];\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n        if (this.tree_widget.options.buttonLeft) {\n            classes.push(\"jqtree-toggler-left\");\n        }\n        else {\n            classes.push(\"jqtree-toggler-right\");\n        }\n        return classes.join(\" \");\n    };\n    ElementsRenderer.prototype.getFolderClasses = function (node, is_selected) {\n        var classes = [\"jqtree-folder\"];\n        if (!node.is_open) {\n            classes.push(\"jqtree-closed\");\n        }\n        if (is_selected) {\n            classes.push(\"jqtree-selected\");\n        }\n        if (node.is_loading) {\n            classes.push(\"jqtree-loading\");\n        }\n        return classes.join(\" \");\n    };\n    ElementsRenderer.prototype.escapeIfNecessary = function (value) {\n        if (this.tree_widget.options.autoEscape) {\n            return util_1.htmlEscape(value);\n        }\n        else {\n            return value;\n        }\n    };\n    ElementsRenderer.prototype.createButtonElement = function (value) {\n        if (typeof value === \"string\") {\n            // convert value to html\n            var div = document.createElement(\"div\");\n            div.innerHTML = value;\n            return document.createTextNode(div.innerHTML);\n        }\n        else {\n            return jQuery(value)[0];\n        }\n    };\n    return ElementsRenderer;\n}());\nexports[\"default\"] = ElementsRenderer;\n","\"use strict\";\nexports.__esModule = true;\nvar KeyHandler = /** @class */ (function () {\n    function KeyHandler(tree_widget) {\n        var _this = this;\n        this.handleKeyDown = function (e) {\n            if (!_this.canHandleKeyboard()) {\n                return true;\n            }\n            else {\n                var key = e.which;\n                switch (key) {\n                    case KeyHandler.DOWN:\n                        return _this.moveDown();\n                    case KeyHandler.UP:\n                        return _this.moveUp();\n                    case KeyHandler.RIGHT:\n                        return _this.moveRight();\n                    case KeyHandler.LEFT:\n                        return _this.moveLeft();\n                    default:\n                        return true;\n                }\n            }\n        };\n        this.tree_widget = tree_widget;\n        if (tree_widget.options.keyboardSupport) {\n            jQuery(document).on(\"keydown.jqtree\", this.handleKeyDown);\n        }\n    }\n    KeyHandler.prototype.deinit = function () {\n        jQuery(document).off(\"keydown.jqtree\");\n    };\n    KeyHandler.prototype.moveDown = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (node) {\n            return this.selectNode(node.getNextNode());\n        }\n        else {\n            return false;\n        }\n    };\n    KeyHandler.prototype.moveUp = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (node) {\n            return this.selectNode(node.getPreviousNode());\n        }\n        else {\n            return false;\n        }\n    };\n    KeyHandler.prototype.moveRight = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (!node) {\n            return true;\n        }\n        else if (!node.isFolder()) {\n            return true;\n        }\n        else {\n            // folder node\n            if (node.is_open) {\n                // Right moves to the first child of an open node\n                return this.selectNode(node.getNextNode());\n            }\n            else {\n                // Right expands a closed node\n                this.tree_widget.openNode(node);\n                return false;\n            }\n        }\n    };\n    KeyHandler.prototype.moveLeft = function () {\n        var node = this.tree_widget.getSelectedNode();\n        if (!node) {\n            return true;\n        }\n        else if (node.isFolder() && node.is_open) {\n            // Left on an open node closes the node\n            this.tree_widget.closeNode(node);\n            return false;\n        }\n        else {\n            // Left on a closed or end node moves focus to the node's parent\n            return this.selectNode(node.getParent());\n        }\n    };\n    KeyHandler.prototype.selectNode = function (node) {\n        if (!node) {\n            return true;\n        }\n        else {\n            this.tree_widget.selectNode(node);\n            if (this.tree_widget.scroll_handler &&\n                !this.tree_widget.scroll_handler.isScrolledIntoView(jQuery(node.element).find(\".jqtree-element\"))) {\n                this.tree_widget.scrollToNode(node);\n            }\n            return false;\n        }\n    };\n    KeyHandler.prototype.canHandleKeyboard = function () {\n        return (this.tree_widget.options.keyboardSupport &&\n            this.isFocusOnTree() &&\n            this.tree_widget.getSelectedNode() != null);\n    };\n    KeyHandler.prototype.isFocusOnTree = function () {\n        var active_element = document.activeElement;\n        return (active_element &&\n            active_element.tagName === \"SPAN\" &&\n            this.tree_widget._containsElement(active_element));\n    };\n    KeyHandler.LEFT = 37;\n    KeyHandler.UP = 38;\n    KeyHandler.RIGHT = 39;\n    KeyHandler.DOWN = 40;\n    return KeyHandler;\n}());\nexports[\"default\"] = KeyHandler;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\n/*\nThis widget does the same a the mouse widget in jqueryui.\n*/\nvar simple_widget_1 = require(\"./simple.widget\");\nvar MouseWidget = /** @class */ (function (_super) {\n    __extends(MouseWidget, _super);\n    function MouseWidget() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.mouseDown = function (e) {\n            // Is left mouse button?\n            if (e.which !== 1) {\n                return;\n            }\n            var result = _this._handleMouseDown(_this._getPositionInfo(e));\n            if (result) {\n                e.preventDefault();\n            }\n            return result;\n        };\n        _this.mouseMove = function (e) {\n            return _this._handleMouseMove(e, _this._getPositionInfo(e));\n        };\n        _this.mouseUp = function (e) {\n            return _this._handleMouseUp(_this._getPositionInfo(e));\n        };\n        _this.touchStart = function (e) {\n            var touch_event = e.originalEvent;\n            if (touch_event.touches.length > 1) {\n                return;\n            }\n            var touch = touch_event.changedTouches[0];\n            return _this._handleMouseDown(_this._getPositionInfo(touch));\n        };\n        _this.touchMove = function (e) {\n            var touch_event = e.originalEvent;\n            if (touch_event.touches.length > 1) {\n                return;\n            }\n            var touch = touch_event.changedTouches[0];\n            return _this._handleMouseMove(e, _this._getPositionInfo(touch));\n        };\n        _this.touchEnd = function (e) {\n            var touch_event = e.originalEvent;\n            if (touch_event.touches.length > 1) {\n                return;\n            }\n            var touch = touch_event.changedTouches[0];\n            return _this._handleMouseUp(_this._getPositionInfo(touch));\n        };\n        return _this;\n    }\n    MouseWidget.prototype.setMouseDelay = function (mouse_delay) {\n        this.mouse_delay = mouse_delay;\n    };\n    MouseWidget.prototype._init = function () {\n        this.$el.on(\"mousedown.mousewidget\", this.mouseDown);\n        this.$el.on(\"touchstart.mousewidget\", this.touchStart);\n        this.is_mouse_started = false;\n        this.mouse_delay = 0;\n        this._mouse_delay_timer = null;\n        this._is_mouse_delay_met = true;\n        this.mouse_down_info = null;\n    };\n    MouseWidget.prototype._deinit = function () {\n        this.$el.off(\"mousedown.mousewidget\");\n        this.$el.off(\"touchstart.mousewidget\");\n        var $document = jQuery(document);\n        $document.off(\"mousemove.mousewidget\");\n        $document.off(\"mouseup.mousewidget\");\n    };\n    MouseWidget.prototype._handleMouseDown = function (position_info) {\n        // We may have missed mouseup (out of window)\n        if (this.is_mouse_started) {\n            this._handleMouseUp(position_info);\n        }\n        this.mouse_down_info = position_info;\n        if (!this._mouseCapture(position_info)) {\n            return;\n        }\n        this._handleStartMouse();\n        return true;\n    };\n    MouseWidget.prototype._handleStartMouse = function () {\n        var $document = jQuery(document);\n        $document.on(\"mousemove.mousewidget\", this.mouseMove);\n        $document.on(\"touchmove.mousewidget\", this.touchMove);\n        $document.on(\"mouseup.mousewidget\", this.mouseUp);\n        $document.on(\"touchend.mousewidget\", this.touchEnd);\n        if (this.mouse_delay) {\n            this._startMouseDelayTimer();\n        }\n    };\n    MouseWidget.prototype._startMouseDelayTimer = function () {\n        var _this = this;\n        if (this._mouse_delay_timer) {\n            clearTimeout(this._mouse_delay_timer);\n        }\n        this._mouse_delay_timer = setTimeout(function () {\n            _this._is_mouse_delay_met = true;\n        }, this.mouse_delay);\n        this._is_mouse_delay_met = false;\n    };\n    MouseWidget.prototype._handleMouseMove = function (e, position_info) {\n        if (this.is_mouse_started) {\n            this._mouseDrag(position_info);\n            return e.preventDefault();\n        }\n        if (this.mouse_delay && !this._is_mouse_delay_met) {\n            return true;\n        }\n        if (this.mouse_down_info) {\n            this.is_mouse_started =\n                this._mouseStart(this.mouse_down_info) !== false;\n        }\n        if (this.is_mouse_started) {\n            this._mouseDrag(position_info);\n        }\n        else {\n            this._handleMouseUp(position_info);\n        }\n        return !this.is_mouse_started;\n    };\n    MouseWidget.prototype._getPositionInfo = function (e) {\n        return {\n            page_x: e.pageX,\n            page_y: e.pageY,\n            target: e.target,\n            original_event: e\n        };\n    };\n    MouseWidget.prototype._handleMouseUp = function (position_info) {\n        var $document = jQuery(document);\n        $document.off(\"mousemove.mousewidget\");\n        $document.off(\"touchmove.mousewidget\");\n        $document.off(\"mouseup.mousewidget\");\n        $document.off(\"touchend.mousewidget\");\n        if (this.is_mouse_started) {\n            this.is_mouse_started = false;\n            this._mouseStop(position_info);\n        }\n    };\n    return MouseWidget;\n}(simple_widget_1[\"default\"]));\nexports[\"default\"] = MouseWidget;\n","\"use strict\";\nexports.__esModule = true;\nvar Position;\n(function (Position) {\n    Position[Position[\"Before\"] = 1] = \"Before\";\n    Position[Position[\"After\"] = 2] = \"After\";\n    Position[Position[\"Inside\"] = 3] = \"Inside\";\n    Position[Position[\"None\"] = 4] = \"None\";\n})(Position = exports.Position || (exports.Position = {}));\nvar positionNames = {\n    before: Position.Before,\n    after: Position.After,\n    inside: Position.Inside,\n    none: Position.None\n};\nfunction getPositionName(position) {\n    for (var name_1 in positionNames) {\n        if (positionNames.hasOwnProperty(name_1)) {\n            if (positionNames[name_1] === position) {\n                return name_1;\n            }\n        }\n    }\n    return \"\";\n}\nexports.getPositionName = getPositionName;\nexports.getPosition = function (name) { return positionNames[name]; };\nvar Node = /** @class */ (function () {\n    function Node(o, is_root, node_class) {\n        if (is_root === void 0) { is_root = false; }\n        if (node_class === void 0) { node_class = Node; }\n        this.name = \"\";\n        this.setData(o);\n        this.children = [];\n        this.parent = null;\n        if (is_root) {\n            this.id_mapping = {};\n            this.tree = this;\n            this.node_class = node_class;\n        }\n    }\n    /*\n    Set the data of this node.\n\n    setData(string): set the name of the node\n    setdata(object): set attributes of the node\n\n    Examples:\n        setdata('node1')\n\n        setData({ name: 'node1', id: 1});\n\n        setData({ name: 'node2', id: 2, color: 'green'});\n\n    * This is an internal function; it is not in the docs\n    * Does not remove existing node values\n    */\n    Node.prototype.setData = function (o) {\n        var _this = this;\n        var setName = function (name) {\n            if (name != null) {\n                _this.name = name;\n            }\n        };\n        if (!o) {\n            return;\n        }\n        else if (typeof o !== \"object\") {\n            setName(o);\n        }\n        else {\n            for (var key in o) {\n                if (o.hasOwnProperty(key)) {\n                    var value = o[key];\n                    if (key === \"label\") {\n                        // You can use the 'label' key instead of 'name'; this is a legacy feature\n                        setName(value);\n                    }\n                    else if (key !== \"children\") {\n                        // You can't update the children using this function\n                        this[key] = value;\n                    }\n                }\n            }\n        }\n    };\n    /*\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            name: 'node1',\n            children: [\n                { name: 'child1' },\n                { name: 'child2' }\n            ]\n        },\n        {\n            name: 'node2'\n        }\n    ]\n    */\n    Node.prototype.loadFromData = function (data) {\n        this.removeChildren();\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var o = data_1[_i];\n            var node = new this.tree.node_class(o);\n            this.addChild(node);\n            if (typeof o === \"object\" && o[\"children\"]) {\n                node.loadFromData(o[\"children\"]);\n            }\n        }\n    };\n    /*\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    */\n    Node.prototype.addChild = function (node) {\n        this.children.push(node);\n        node._setParent(this);\n    };\n    /*\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    */\n    Node.prototype.addChildAtPosition = function (node, index) {\n        this.children.splice(index, 0, node);\n        node._setParent(this);\n    };\n    /*\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    */\n    Node.prototype.removeChild = function (node) {\n        // remove children from the index\n        node.removeChildren();\n        this._removeChild(node);\n    };\n    /*\n    Get child index.\n\n    var index = getChildIndex(node);\n    */\n    Node.prototype.getChildIndex = function (node) {\n        return jQuery.inArray(node, this.children);\n    };\n    /*\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    */\n    Node.prototype.hasChildren = function () {\n        return this.children.length !== 0;\n    };\n    Node.prototype.isFolder = function () {\n        return this.hasChildren() || this.load_on_demand;\n    };\n    /*\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    */\n    Node.prototype.iterate = function (callback) {\n        var _iterate = function (node, level) {\n            if (node.children) {\n                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    var result = callback(child, level);\n                    if (result && child.hasChildren()) {\n                        _iterate(child, level + 1);\n                    }\n                }\n            }\n        };\n        _iterate(this, 0);\n    };\n    /*\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    */\n    Node.prototype.moveNode = function (moved_node, target_node, position) {\n        if (!moved_node.parent || moved_node.isParentOf(target_node)) {\n            // - Node is parent of target node\n            // - Or, parent is empty\n            return;\n        }\n        else {\n            moved_node.parent._removeChild(moved_node);\n            if (position === Position.After) {\n                if (target_node.parent) {\n                    target_node.parent.addChildAtPosition(moved_node, target_node.parent.getChildIndex(target_node) + 1);\n                }\n            }\n            else if (position === Position.Before) {\n                if (target_node.parent) {\n                    target_node.parent.addChildAtPosition(moved_node, target_node.parent.getChildIndex(target_node));\n                }\n            }\n            else if (position === Position.Inside) {\n                // move inside as first child\n                target_node.addChildAtPosition(moved_node, 0);\n            }\n        }\n    };\n    /*\n    Get the tree as data.\n    */\n    Node.prototype.getData = function (include_parent) {\n        if (include_parent === void 0) { include_parent = false; }\n        function getDataFromNodes(nodes) {\n            return nodes.map(function (node) {\n                var tmp_node = {};\n                for (var k in node) {\n                    if ([\"parent\", \"children\", \"element\", \"tree\"].indexOf(k) ===\n                        -1 &&\n                        Object.prototype.hasOwnProperty.call(node, k)) {\n                        var v = node[k];\n                        tmp_node[k] = v;\n                    }\n                }\n                if (node.hasChildren()) {\n                    tmp_node[\"children\"] = getDataFromNodes(node.children);\n                }\n                return tmp_node;\n            });\n        }\n        if (include_parent) {\n            return getDataFromNodes([this]);\n        }\n        else {\n            return getDataFromNodes(this.children);\n        }\n    };\n    Node.prototype.getNodeByName = function (name) {\n        return this.getNodeByCallback(function (node) { return node.name === name; });\n    };\n    Node.prototype.getNodeByCallback = function (callback) {\n        var result = null;\n        this.iterate(function (node) {\n            if (callback(node)) {\n                result = node;\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        return result;\n    };\n    Node.prototype.addAfter = function (node_info) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var node = new this.tree.node_class(node_info);\n            var child_index = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, child_index + 1);\n            if (typeof node_info === \"object\" &&\n                node_info[\"children\"] &&\n                node_info[\"children\"].length) {\n                node.loadFromData(node_info[\"children\"]);\n            }\n            return node;\n        }\n    };\n    Node.prototype.addBefore = function (node_info) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var node = new this.tree.node_class(node_info);\n            var child_index = this.parent.getChildIndex(this);\n            this.parent.addChildAtPosition(node, child_index);\n            if (typeof node_info === \"object\" &&\n                node_info[\"children\"] &&\n                node_info[\"children\"].length) {\n                node.loadFromData(node_info[\"children\"]);\n            }\n            return node;\n        }\n    };\n    Node.prototype.addParent = function (node_info) {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var new_parent = new this.tree.node_class(node_info);\n            new_parent._setParent(this.tree);\n            var original_parent = this.parent;\n            for (var _i = 0, _a = original_parent.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                new_parent.addChild(child);\n            }\n            original_parent.children = [];\n            original_parent.addChild(new_parent);\n            return new_parent;\n        }\n    };\n    Node.prototype.remove = function () {\n        if (this.parent) {\n            this.parent.removeChild(this);\n            this.parent = null;\n        }\n    };\n    Node.prototype.append = function (node_info) {\n        var node = new this.tree.node_class(node_info);\n        this.addChild(node);\n        if (typeof node_info === \"object\" &&\n            node_info[\"children\"] &&\n            node_info[\"children\"].length) {\n            node.loadFromData(node_info[\"children\"]);\n        }\n        return node;\n    };\n    Node.prototype.prepend = function (node_info) {\n        var node = new this.tree.node_class(node_info);\n        this.addChildAtPosition(node, 0);\n        if (typeof node_info === \"object\" &&\n            node_info[\"children\"] &&\n            node_info[\"children\"].length) {\n            node.loadFromData(node_info[\"children\"]);\n        }\n        return node;\n    };\n    Node.prototype.isParentOf = function (node) {\n        var parent = node.parent;\n        while (parent) {\n            if (parent === this) {\n                return true;\n            }\n            parent = parent.parent;\n        }\n        return false;\n    };\n    Node.prototype.getLevel = function () {\n        var level = 0;\n        var node = this;\n        while (node.parent) {\n            level += 1;\n            node = node.parent;\n        }\n        return level;\n    };\n    Node.prototype.getNodeById = function (node_id) {\n        return this.id_mapping[node_id];\n    };\n    Node.prototype.addNodeToIndex = function (node) {\n        if (node.id != null) {\n            this.id_mapping[node.id] = node;\n        }\n    };\n    Node.prototype.removeNodeFromIndex = function (node) {\n        if (node.id != null) {\n            delete this.id_mapping[node.id];\n        }\n    };\n    Node.prototype.removeChildren = function () {\n        var _this = this;\n        this.iterate(function (child) {\n            _this.tree.removeNodeFromIndex(child);\n            return true;\n        });\n        this.children = [];\n    };\n    Node.prototype.getPreviousSibling = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var previous_index = this.parent.getChildIndex(this) - 1;\n            if (previous_index >= 0) {\n                return this.parent.children[previous_index];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    Node.prototype.getNextSibling = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var next_index = this.parent.getChildIndex(this) + 1;\n            if (next_index < this.parent.children.length) {\n                return this.parent.children[next_index];\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    Node.prototype.getNodesByProperty = function (key, value) {\n        return this.filter(function (node) { return node[key] === value; });\n    };\n    Node.prototype.filter = function (f) {\n        var result = [];\n        this.iterate(function (node) {\n            if (f(node)) {\n                result.push(node);\n            }\n            return true;\n        });\n        return result;\n    };\n    Node.prototype.getNextNode = function (include_children) {\n        if (include_children === void 0) { include_children = true; }\n        if (include_children && this.hasChildren() && this.is_open) {\n            // First child\n            return this.children[0];\n        }\n        else {\n            if (!this.parent) {\n                return null;\n            }\n            else {\n                var next_sibling = this.getNextSibling();\n                if (next_sibling) {\n                    // Next sibling\n                    return next_sibling;\n                }\n                else {\n                    // Next node of parent\n                    return this.parent.getNextNode(false);\n                }\n            }\n        }\n    };\n    Node.prototype.getPreviousNode = function () {\n        if (!this.parent) {\n            return null;\n        }\n        else {\n            var previous_sibling = this.getPreviousSibling();\n            if (previous_sibling) {\n                if (!previous_sibling.hasChildren() ||\n                    !previous_sibling.is_open) {\n                    // Previous sibling\n                    return previous_sibling;\n                }\n                else {\n                    // Last child of previous sibling\n                    return previous_sibling.getLastChild();\n                }\n            }\n            else {\n                return this.getParent();\n            }\n        }\n    };\n    Node.prototype.getParent = function () {\n        // Return parent except if it is the root node\n        if (!this.parent) {\n            return null;\n        }\n        else if (!this.parent.parent) {\n            // Root node -> null\n            return null;\n        }\n        else {\n            return this.parent;\n        }\n    };\n    Node.prototype.getLastChild = function () {\n        if (!this.hasChildren()) {\n            return null;\n        }\n        else {\n            var last_child = this.children[this.children.length - 1];\n            if (!last_child.hasChildren() || !last_child.is_open) {\n                return last_child;\n            }\n            else {\n                return last_child.getLastChild();\n            }\n        }\n    };\n    // Init Node from data without making it the root of the tree\n    Node.prototype.initFromData = function (data) {\n        var _this = this;\n        var addNode = function (node_data) {\n            _this.setData(node_data);\n            if (node_data[\"children\"]) {\n                addChildren(node_data[\"children\"]);\n            }\n        };\n        var addChildren = function (children_data) {\n            for (var _i = 0, children_data_1 = children_data; _i < children_data_1.length; _i++) {\n                var child = children_data_1[_i];\n                var node = new _this.tree.node_class(\"\");\n                node.initFromData(child);\n                _this.addChild(node);\n            }\n        };\n        addNode(data);\n    };\n    Node.prototype._setParent = function (parent) {\n        this.parent = parent;\n        this.tree = parent.tree;\n        this.tree.addNodeToIndex(this);\n    };\n    Node.prototype._removeChild = function (node) {\n        this.children.splice(this.getChildIndex(node), 1);\n        this.tree.removeNodeFromIndex(node);\n    };\n    return Node;\n}());\nexports.Node = Node;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar node_1 = require(\"./node\");\nvar NodeElement = /** @class */ (function () {\n    function NodeElement(node, tree_widget) {\n        this.init(node, tree_widget);\n    }\n    NodeElement.prototype.init = function (node, tree_widget) {\n        this.node = node;\n        this.tree_widget = tree_widget;\n        if (!node.element) {\n            node.element = this.tree_widget.element.get(0);\n        }\n        this.$element = jQuery(node.element);\n    };\n    NodeElement.prototype.addDropHint = function (position) {\n        if (this.mustShowBorderDropHint(position)) {\n            return new BorderDropHint(this.$element, this.tree_widget._getScrollLeft());\n        }\n        else {\n            return new GhostDropHint(this.node, this.$element, position);\n        }\n    };\n    NodeElement.prototype.select = function (mustSetFocus) {\n        var $li = this.getLi();\n        $li.addClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"true\");\n        var $span = this.getSpan();\n        $span.attr(\"tabindex\", this.tree_widget.options.tabIndex);\n        if (mustSetFocus) {\n            $span.focus();\n        }\n    };\n    NodeElement.prototype.deselect = function () {\n        var $li = this.getLi();\n        $li.removeClass(\"jqtree-selected\");\n        $li.attr(\"aria-selected\", \"false\");\n        var $span = this.getSpan();\n        $span.removeAttr(\"tabindex\");\n        $span.blur();\n    };\n    NodeElement.prototype.getUl = function () {\n        return this.$element.children(\"ul:first\");\n    };\n    NodeElement.prototype.getSpan = function () {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"span.jqtree-title\");\n    };\n    NodeElement.prototype.getLi = function () {\n        return this.$element;\n    };\n    NodeElement.prototype.mustShowBorderDropHint = function (position) {\n        return position === node_1.Position.Inside;\n    };\n    return NodeElement;\n}());\nexports.NodeElement = NodeElement;\nvar FolderElement = /** @class */ (function (_super) {\n    __extends(FolderElement, _super);\n    function FolderElement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FolderElement.prototype.open = function (on_finished, slide, animationSpeed) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        if (animationSpeed === void 0) { animationSpeed = \"fast\"; }\n        if (!this.node.is_open) {\n            this.node.is_open = true;\n            var $button = this.getButton();\n            $button.removeClass(\"jqtree-closed\");\n            $button.html(\"\");\n            var button_el = $button.get(0);\n            if (button_el) {\n                var icon = this.tree_widget.renderer.opened_icon_element.cloneNode(true);\n                button_el.appendChild(icon);\n            }\n            var doOpen = function () {\n                var $li = _this.getLi();\n                $li.removeClass(\"jqtree-closed\");\n                var $span = _this.getSpan();\n                $span.attr(\"aria-expanded\", \"true\");\n                if (on_finished) {\n                    on_finished(_this.node);\n                }\n                _this.tree_widget._triggerEvent(\"tree.open\", {\n                    node: _this.node\n                });\n            };\n            if (slide) {\n                this.getUl().slideDown(animationSpeed, doOpen);\n            }\n            else {\n                this.getUl().show();\n                doOpen();\n            }\n        }\n    };\n    FolderElement.prototype.close = function (slide, animationSpeed) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        if (animationSpeed === void 0) { animationSpeed = \"fast\"; }\n        if (this.node.is_open) {\n            this.node.is_open = false;\n            var $button = this.getButton();\n            $button.addClass(\"jqtree-closed\");\n            $button.html(\"\");\n            var button_el = $button.get(0);\n            if (button_el) {\n                var icon = this.tree_widget.renderer.closed_icon_element.cloneNode(true);\n                button_el.appendChild(icon);\n            }\n            var doClose = function () {\n                var $li = _this.getLi();\n                $li.addClass(\"jqtree-closed\");\n                var $span = _this.getSpan();\n                $span.attr(\"aria-expanded\", \"false\");\n                _this.tree_widget._triggerEvent(\"tree.close\", {\n                    node: _this.node\n                });\n            };\n            if (slide) {\n                this.getUl().slideUp(animationSpeed, doClose);\n            }\n            else {\n                this.getUl().hide();\n                doClose();\n            }\n        }\n    };\n    FolderElement.prototype.mustShowBorderDropHint = function (position) {\n        return !this.node.is_open && position === node_1.Position.Inside;\n    };\n    FolderElement.prototype.getButton = function () {\n        return this.$element\n            .children(\".jqtree-element\")\n            .find(\"a.jqtree-toggler\");\n    };\n    return FolderElement;\n}(NodeElement));\nexports.FolderElement = FolderElement;\nvar BorderDropHint = /** @class */ (function () {\n    function BorderDropHint($element, scroll_left) {\n        var $div = $element.children(\".jqtree-element\");\n        var el_width = $element.width() || 0;\n        var width = Math.max(el_width + scroll_left - 4, 0);\n        var el_height = $div.outerHeight() || 0;\n        var height = Math.max(el_height - 4, 0);\n        this.$hint = jQuery('<span class=\"jqtree-border\"></span>');\n        $div.append(this.$hint);\n        this.$hint.css({ width: width, height: height });\n    }\n    BorderDropHint.prototype.remove = function () {\n        this.$hint.remove();\n    };\n    return BorderDropHint;\n}());\nexports.BorderDropHint = BorderDropHint;\nvar GhostDropHint = /** @class */ (function () {\n    function GhostDropHint(node, $element, position) {\n        this.$element = $element;\n        this.node = node;\n        this.$ghost = jQuery(\"<li class=\\\"jqtree_common jqtree-ghost\\\"><span class=\\\"jqtree_common jqtree-circle\\\"></span>\\n            <span class=\\\"jqtree_common jqtree-line\\\"></span></li>\");\n        if (position === node_1.Position.After) {\n            this.moveAfter();\n        }\n        else if (position === node_1.Position.Before) {\n            this.moveBefore();\n        }\n        else if (position === node_1.Position.Inside) {\n            if (node.isFolder() && node.is_open) {\n                this.moveInsideOpenFolder();\n            }\n            else {\n                this.moveInside();\n            }\n        }\n    }\n    GhostDropHint.prototype.remove = function () {\n        this.$ghost.remove();\n    };\n    GhostDropHint.prototype.moveAfter = function () {\n        this.$element.after(this.$ghost);\n    };\n    GhostDropHint.prototype.moveBefore = function () {\n        this.$element.before(this.$ghost);\n    };\n    GhostDropHint.prototype.moveInsideOpenFolder = function () {\n        jQuery(this.node.children[0].element).before(this.$ghost);\n    };\n    GhostDropHint.prototype.moveInside = function () {\n        this.$element.after(this.$ghost);\n        this.$ghost.addClass(\"jqtree-inside\");\n    };\n    return GhostDropHint;\n}());\n","\"use strict\";\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar SaveStateHandler = /** @class */ (function () {\n    function SaveStateHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n    }\n    SaveStateHandler.prototype.saveState = function () {\n        var state = JSON.stringify(this.getState());\n        if (this.tree_widget.options.onSetStateFromStorage) {\n            this.tree_widget.options.onSetStateFromStorage(state);\n        }\n        else if (this.supportsLocalStorage()) {\n            localStorage.setItem(this.getKeyName(), state);\n        }\n    };\n    SaveStateHandler.prototype.getStateFromStorage = function () {\n        var json_data = this._loadFromStorage();\n        if (json_data) {\n            return this._parseState(json_data);\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype.getState = function () {\n        var _this = this;\n        var getOpenNodeIds = function () {\n            var open_nodes = [];\n            _this.tree_widget.tree.iterate(function (node) {\n                if (node.is_open && node.id && node.hasChildren()) {\n                    open_nodes.push(node.id);\n                }\n                return true;\n            });\n            return open_nodes;\n        };\n        var getSelectedNodeIds = function () {\n            return _this.tree_widget.getSelectedNodes().map(function (n) { return n.id; });\n        };\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds()\n        };\n    };\n    /*\n    Set initial state\n    Don't handle nodes that are loaded on demand\n\n    result: must load on demand\n    */\n    SaveStateHandler.prototype.setInitialState = function (state) {\n        if (!state) {\n            return false;\n        }\n        else {\n            var must_load_on_demand = false;\n            if (state.open_nodes) {\n                must_load_on_demand = this._openInitialNodes(state.open_nodes);\n            }\n            if (state.selected_node) {\n                this._resetSelection();\n                this._selectInitialNodes(state.selected_node);\n            }\n            return must_load_on_demand;\n        }\n    };\n    SaveStateHandler.prototype.setInitialStateOnDemand = function (state, cb_finished) {\n        if (state) {\n            this._setInitialStateOnDemand(state.open_nodes, state.selected_node, cb_finished);\n        }\n        else {\n            cb_finished();\n        }\n    };\n    SaveStateHandler.prototype.getNodeIdToBeSelected = function () {\n        var state = this.getStateFromStorage();\n        if (state && state.selected_node) {\n            return state.selected_node[0];\n        }\n        else {\n            return null;\n        }\n    };\n    SaveStateHandler.prototype._parseState = function (json_data) {\n        var state = jQuery.parseJSON(json_data);\n        // Check if selected_node is an int (instead of an array)\n        if (state && state.selected_node && util_1.isInt(state.selected_node)) {\n            // Convert to array\n            state.selected_node = [state.selected_node];\n        }\n        return state;\n    };\n    SaveStateHandler.prototype._loadFromStorage = function () {\n        if (this.tree_widget.options.onGetStateFromStorage) {\n            return this.tree_widget.options.onGetStateFromStorage();\n        }\n        else if (this.supportsLocalStorage()) {\n            return localStorage.getItem(this.getKeyName());\n        }\n    };\n    SaveStateHandler.prototype._openInitialNodes = function (node_ids) {\n        var must_load_on_demand = false;\n        for (var _i = 0, node_ids_1 = node_ids; _i < node_ids_1.length; _i++) {\n            var node_id = node_ids_1[_i];\n            var node = this.tree_widget.getNodeById(node_id);\n            if (node) {\n                if (!node.load_on_demand) {\n                    node.is_open = true;\n                }\n                else {\n                    must_load_on_demand = true;\n                }\n            }\n        }\n        return must_load_on_demand;\n    };\n    SaveStateHandler.prototype._selectInitialNodes = function (node_ids) {\n        var select_count = 0;\n        for (var _i = 0, node_ids_2 = node_ids; _i < node_ids_2.length; _i++) {\n            var node_id = node_ids_2[_i];\n            var node = this.tree_widget.getNodeById(node_id);\n            if (node) {\n                select_count += 1;\n                if (this.tree_widget.select_node_handler) {\n                    this.tree_widget.select_node_handler.addToSelection(node);\n                }\n            }\n        }\n        return select_count !== 0;\n    };\n    SaveStateHandler.prototype._resetSelection = function () {\n        var select_node_handler = this.tree_widget.select_node_handler;\n        if (select_node_handler) {\n            var selected_nodes = select_node_handler.getSelectedNodes();\n            selected_nodes.forEach(function (node) {\n                select_node_handler.removeFromSelection(node);\n            });\n        }\n    };\n    SaveStateHandler.prototype._setInitialStateOnDemand = function (node_ids_param, selected_nodes, cb_finished) {\n        var _this = this;\n        var loading_count = 0;\n        var node_ids = node_ids_param;\n        var openNodes = function () {\n            var new_nodes_ids = [];\n            for (var _i = 0, node_ids_3 = node_ids; _i < node_ids_3.length; _i++) {\n                var node_id = node_ids_3[_i];\n                var node = _this.tree_widget.getNodeById(node_id);\n                if (!node) {\n                    new_nodes_ids.push(node_id);\n                }\n                else {\n                    if (!node.is_loading) {\n                        if (node.load_on_demand) {\n                            loadAndOpenNode(node);\n                        }\n                        else {\n                            _this.tree_widget._openNode(node, false, null);\n                        }\n                    }\n                }\n            }\n            node_ids = new_nodes_ids;\n            if (_this._selectInitialNodes(selected_nodes)) {\n                _this.tree_widget._refreshElements(null);\n            }\n            if (loading_count === 0) {\n                cb_finished();\n            }\n        };\n        var loadAndOpenNode = function (node) {\n            loading_count += 1;\n            _this.tree_widget._openNode(node, false, function () {\n                loading_count -= 1;\n                openNodes();\n            });\n        };\n        openNodes();\n    };\n    SaveStateHandler.prototype.getKeyName = function () {\n        if (typeof this.tree_widget.options.saveState === \"string\") {\n            return this.tree_widget.options.saveState;\n        }\n        else {\n            return \"tree\";\n        }\n    };\n    SaveStateHandler.prototype.supportsLocalStorage = function () {\n        var testSupport = function () {\n            // Is local storage supported?\n            if (localStorage == null) {\n                return false;\n            }\n            else {\n                // Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try {\n                    var key = \"_storage_test\";\n                    sessionStorage.setItem(key, \"value\");\n                    sessionStorage.removeItem(key);\n                }\n                catch (error) {\n                    return false;\n                }\n                return true;\n            }\n        };\n        if (this._supportsLocalStorage == null) {\n            this._supportsLocalStorage = testSupport();\n        }\n        return this._supportsLocalStorage;\n    };\n    return SaveStateHandler;\n}());\nexports[\"default\"] = SaveStateHandler;\n","\"use strict\";\nexports.__esModule = true;\nvar ScrollHandler = /** @class */ (function () {\n    function ScrollHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.previous_top = -1;\n        this.is_initialized = false;\n    }\n    ScrollHandler.prototype.checkScrolling = function () {\n        this.ensureInit();\n        this.checkVerticalScrolling();\n        this.checkHorizontalScrolling();\n    };\n    ScrollHandler.prototype.scrollToY = function (top) {\n        this.ensureInit();\n        if (this.$scroll_parent) {\n            this.$scroll_parent[0].scrollTop = top;\n        }\n        else {\n            var offset = this.tree_widget.$el.offset();\n            var tree_top = offset ? offset.top : 0;\n            jQuery(document).scrollTop(top + tree_top);\n        }\n    };\n    ScrollHandler.prototype.isScrolledIntoView = function ($element) {\n        this.ensureInit();\n        var element_bottom;\n        var view_bottom;\n        var element_top;\n        var view_top;\n        var el_height = $element.height() || 0;\n        if (this.$scroll_parent) {\n            view_top = 0;\n            view_bottom = this.$scroll_parent.height() || 0;\n            var offset = $element.offset();\n            var original_top = offset ? offset.top : 0;\n            element_top = original_top - this.scroll_parent_top;\n            element_bottom = element_top + el_height;\n        }\n        else {\n            view_top = jQuery(window).scrollTop() || 0;\n            var window_height = jQuery(window).height() || 0;\n            view_bottom = view_top + window_height;\n            var offset = $element.offset();\n            element_top = offset ? offset.top : 0;\n            element_bottom = element_top + el_height;\n        }\n        return element_bottom <= view_bottom && element_top >= view_top;\n    };\n    ScrollHandler.prototype.getScrollLeft = function () {\n        if (!this.$scroll_parent) {\n            return 0;\n        }\n        else {\n            return this.$scroll_parent.scrollLeft() || 0;\n        }\n    };\n    ScrollHandler.prototype.initScrollParent = function () {\n        var _this = this;\n        var getParentWithOverflow = function () {\n            var css_attributes = [\"overflow\", \"overflow-y\"];\n            var hasOverFlow = function ($el) {\n                for (var _i = 0, css_attributes_1 = css_attributes; _i < css_attributes_1.length; _i++) {\n                    var attr = css_attributes_1[_i];\n                    var overflow_value = $el.css(attr);\n                    if (overflow_value === \"auto\" ||\n                        overflow_value === \"scroll\") {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            if (hasOverFlow(_this.tree_widget.$el)) {\n                return _this.tree_widget.$el;\n            }\n            for (var _i = 0, _a = _this.tree_widget.$el.parents().get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var $el = jQuery(el);\n                if (hasOverFlow($el)) {\n                    return $el;\n                }\n            }\n            return null;\n        };\n        var setDocumentAsScrollParent = function () {\n            _this.scroll_parent_top = 0;\n            _this.$scroll_parent = null;\n        };\n        if (this.tree_widget.$el.css(\"position\") === \"fixed\") {\n            setDocumentAsScrollParent();\n        }\n        var $scroll_parent = getParentWithOverflow();\n        if ($scroll_parent &&\n            $scroll_parent.length &&\n            $scroll_parent[0].tagName !== \"HTML\") {\n            this.$scroll_parent = $scroll_parent;\n            var offset = this.$scroll_parent.offset();\n            this.scroll_parent_top = offset ? offset.top : 0;\n        }\n        else {\n            setDocumentAsScrollParent();\n        }\n        this.is_initialized = true;\n    };\n    ScrollHandler.prototype.ensureInit = function () {\n        if (!this.is_initialized) {\n            this.initScrollParent();\n        }\n    };\n    ScrollHandler.prototype.handleVerticalScrollingWithScrollParent = function (area) {\n        var scroll_parent = this.$scroll_parent && this.$scroll_parent[0];\n        if (!scroll_parent) {\n            return;\n        }\n        var distance_bottom = this.scroll_parent_top + scroll_parent.offsetHeight - area.bottom;\n        if (distance_bottom < 20) {\n            scroll_parent.scrollTop += 20;\n            this.tree_widget.refreshHitAreas();\n            this.previous_top = -1;\n        }\n        else if (area.top - this.scroll_parent_top < 20) {\n            scroll_parent.scrollTop -= 20;\n            this.tree_widget.refreshHitAreas();\n            this.previous_top = -1;\n        }\n    };\n    ScrollHandler.prototype.handleVerticalScrollingWithDocument = function (area) {\n        var scroll_top = jQuery(document).scrollTop() || 0;\n        var distance_top = area.top - scroll_top;\n        if (distance_top < 20) {\n            jQuery(document).scrollTop(scroll_top - 20);\n        }\n        else {\n            var window_height = jQuery(window).height() || 0;\n            if (window_height - (area.bottom - scroll_top) < 20) {\n                jQuery(document).scrollTop(scroll_top + 20);\n            }\n        }\n    };\n    ScrollHandler.prototype.checkVerticalScrolling = function () {\n        var hovered_area = this.tree_widget.dnd_handler &&\n            this.tree_widget.dnd_handler.hovered_area;\n        if (hovered_area && hovered_area.top !== this.previous_top) {\n            this.previous_top = hovered_area.top;\n            if (this.$scroll_parent) {\n                this.handleVerticalScrollingWithScrollParent(hovered_area);\n            }\n            else {\n                this.handleVerticalScrollingWithDocument(hovered_area);\n            }\n        }\n    };\n    ScrollHandler.prototype.checkHorizontalScrolling = function () {\n        var position_info = this.tree_widget.dnd_handler &&\n            this.tree_widget.dnd_handler.position_info;\n        if (!position_info) {\n            return;\n        }\n        if (this.$scroll_parent) {\n            this.handleHorizontalScrollingWithParent(position_info);\n        }\n        else {\n            this.handleHorizontalScrollingWithDocument(position_info);\n        }\n    };\n    ScrollHandler.prototype.handleHorizontalScrollingWithParent = function (position_info) {\n        var $scroll_parent = this.$scroll_parent;\n        var scroll_parent_offset = $scroll_parent && $scroll_parent.offset();\n        if (!($scroll_parent && scroll_parent_offset)) {\n            return;\n        }\n        var scroll_parent = $scroll_parent[0];\n        var can_scroll_right = scroll_parent.scrollLeft + scroll_parent.clientWidth <\n            scroll_parent.scrollWidth;\n        var can_scroll_left = scroll_parent.scrollLeft > 0;\n        var right_edge = scroll_parent_offset.left + scroll_parent.clientWidth;\n        var left_edge = scroll_parent_offset.left;\n        var is_near_right_edge = position_info.page_x > right_edge - 20;\n        var is_near_left_edge = position_info.page_x < left_edge + 20;\n        if (is_near_right_edge && can_scroll_right) {\n            scroll_parent.scrollLeft = Math.min(scroll_parent.scrollLeft + 20, scroll_parent.scrollWidth);\n        }\n        else if (is_near_left_edge && can_scroll_left) {\n            scroll_parent.scrollLeft = Math.max(scroll_parent.scrollLeft - 20, 0);\n        }\n    };\n    ScrollHandler.prototype.handleHorizontalScrollingWithDocument = function (position_info) {\n        var $document = jQuery(document);\n        var scroll_left = $document.scrollLeft() || 0;\n        var window_width = jQuery(window).width() || 0;\n        var can_scroll_left = scroll_left > 0;\n        var is_near_right_edge = position_info.page_x > window_width - 20;\n        var is_near_left_edge = position_info.page_x - scroll_left < 20;\n        if (is_near_right_edge) {\n            $document.scrollLeft(scroll_left + 20);\n        }\n        else if (is_near_left_edge && can_scroll_left) {\n            $document.scrollLeft(Math.max(scroll_left - 20, 0));\n        }\n    };\n    return ScrollHandler;\n}());\nexports[\"default\"] = ScrollHandler;\n","\"use strict\";\nexports.__esModule = true;\nvar SelectNodeHandler = /** @class */ (function () {\n    function SelectNodeHandler(tree_widget) {\n        this.tree_widget = tree_widget;\n        this.clear();\n    }\n    SelectNodeHandler.prototype.getSelectedNode = function () {\n        var selected_nodes = this.getSelectedNodes();\n        if (selected_nodes.length) {\n            return selected_nodes[0];\n        }\n        else {\n            return false;\n        }\n    };\n    SelectNodeHandler.prototype.getSelectedNodes = function () {\n        if (this.selected_single_node) {\n            return [this.selected_single_node];\n        }\n        else {\n            var selected_nodes = [];\n            for (var id in this.selected_nodes) {\n                if (this.selected_nodes.hasOwnProperty(id)) {\n                    var node = this.tree_widget.getNodeById(id);\n                    if (node) {\n                        selected_nodes.push(node);\n                    }\n                }\n            }\n            return selected_nodes;\n        }\n    };\n    SelectNodeHandler.prototype.getSelectedNodesUnder = function (parent) {\n        if (this.selected_single_node) {\n            if (parent.isParentOf(this.selected_single_node)) {\n                return [this.selected_single_node];\n            }\n            else {\n                return [];\n            }\n        }\n        else {\n            var selected_nodes = [];\n            for (var id in this.selected_nodes) {\n                if (this.selected_nodes.hasOwnProperty(id)) {\n                    var node = this.tree_widget.getNodeById(id);\n                    if (node && parent.isParentOf(node)) {\n                        selected_nodes.push(node);\n                    }\n                }\n            }\n            return selected_nodes;\n        }\n    };\n    SelectNodeHandler.prototype.isNodeSelected = function (node) {\n        if (!node) {\n            return false;\n        }\n        else if (node.id != null) {\n            if (this.selected_nodes[node.id]) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (this.selected_single_node) {\n            return this.selected_single_node.element === node.element;\n        }\n        else {\n            return false;\n        }\n    };\n    SelectNodeHandler.prototype.clear = function () {\n        this.selected_nodes = {};\n        this.selected_single_node = null;\n    };\n    SelectNodeHandler.prototype.removeFromSelection = function (node, include_children) {\n        var _this = this;\n        if (include_children === void 0) { include_children = false; }\n        if (node.id == null) {\n            if (this.selected_single_node &&\n                node.element === this.selected_single_node.element) {\n                this.selected_single_node = null;\n            }\n        }\n        else {\n            delete this.selected_nodes[node.id];\n            if (include_children) {\n                node.iterate(function () {\n                    delete _this.selected_nodes[node.id];\n                    return true;\n                });\n            }\n        }\n    };\n    SelectNodeHandler.prototype.addToSelection = function (node) {\n        if (node.id != null) {\n            this.selected_nodes[node.id] = true;\n        }\n        else {\n            this.selected_single_node = node;\n        }\n    };\n    return SelectNodeHandler;\n}());\nexports[\"default\"] = SelectNodeHandler;\n","\"use strict\";\nexports.__esModule = true;\nvar SimpleWidget = /** @class */ (function () {\n    function SimpleWidget(el, options) {\n        this.$el = jQuery(el);\n        var defaults = this.constructor.defaults;\n        this.options = jQuery.extend({}, defaults, options);\n    }\n    SimpleWidget.register = function (widget_class, widget_name) {\n        var getDataKey = function () { return \"simple_widget_\" + widget_name; };\n        function getWidgetData(el, data_key) {\n            var widget = jQuery.data(el, data_key);\n            if (widget && widget instanceof SimpleWidget) {\n                return widget;\n            }\n            else {\n                return null;\n            }\n        }\n        function createWidget($el, options) {\n            var data_key = getDataKey();\n            for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var existing_widget = getWidgetData(el, data_key);\n                if (!existing_widget) {\n                    var widget = new widget_class(el, options);\n                    if (!jQuery.data(el, data_key)) {\n                        jQuery.data(el, data_key, widget);\n                    }\n                    // Call init after setting data, so we can call methods\n                    widget._init();\n                }\n            }\n            return $el;\n        }\n        function destroyWidget($el) {\n            var data_key = getDataKey();\n            for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var widget = getWidgetData(el, data_key);\n                if (widget) {\n                    widget.destroy();\n                }\n                jQuery.removeData(el, data_key);\n            }\n        }\n        function callFunction($el, function_name, args) {\n            var result = null;\n            for (var _i = 0, _a = $el.get(); _i < _a.length; _i++) {\n                var el = _a[_i];\n                var widget = jQuery.data(el, getDataKey());\n                if (widget && widget instanceof SimpleWidget) {\n                    var widget_function = widget[function_name];\n                    if (widget_function &&\n                        typeof widget_function === \"function\") {\n                        result = widget_function.apply(widget, args);\n                    }\n                }\n            }\n            return result;\n        }\n        // tslint:disable-next-line: only-arrow-functions\n        jQuery.fn[widget_name] = function (argument1) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var $el = this;\n            if (argument1 === undefined || typeof argument1 === \"object\") {\n                var options = argument1;\n                return createWidget($el, options);\n            }\n            else if (typeof argument1 === \"string\" && argument1[0] !== \"_\") {\n                var function_name = argument1;\n                if (function_name === \"destroy\") {\n                    return destroyWidget($el);\n                }\n                else if (function_name === \"get_widget_class\") {\n                    return widget_class;\n                }\n                else {\n                    return callFunction($el, function_name, args);\n                }\n            }\n        };\n    };\n    SimpleWidget.prototype.destroy = function () {\n        this._deinit();\n    };\n    SimpleWidget.prototype._init = function () {\n        //\n    };\n    SimpleWidget.prototype._deinit = function () {\n        //\n    };\n    SimpleWidget.defaults = {};\n    return SimpleWidget;\n}());\nexports[\"default\"] = SimpleWidget;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar version_1 = require(\"./version\");\nvar jQuery = require(\"jquery\");\nvar drag_and_drop_handler_1 = require(\"./drag_and_drop_handler\");\nvar elements_renderer_1 = require(\"./elements_renderer\");\nvar data_loader_1 = require(\"./data_loader\");\nvar key_handler_1 = require(\"./key_handler\");\nvar mouse_widget_1 = require(\"./mouse.widget\");\nvar save_state_handler_1 = require(\"./save_state_handler\");\nvar scroll_handler_1 = require(\"./scroll_handler\");\nvar select_node_handler_1 = require(\"./select_node_handler\");\nvar simple_widget_1 = require(\"./simple.widget\");\nvar node_1 = require(\"./node\");\nvar util_1 = require(\"./util\");\nvar node_element_1 = require(\"./node_element\");\nvar JqTreeWidget = /** @class */ (function (_super) {\n    __extends(JqTreeWidget, _super);\n    function JqTreeWidget() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._handleClick = function (e) {\n            var click_target = _this._getClickTarget(e.target);\n            if (click_target) {\n                if (click_target.type === \"button\") {\n                    _this.toggle(click_target.node, _this.options.slide);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                else if (click_target.type === \"label\") {\n                    var node = click_target.node;\n                    var event_1 = _this._triggerEvent(\"tree.click\", {\n                        node: node,\n                        click_event: e\n                    });\n                    if (!event_1.isDefaultPrevented()) {\n                        _this._selectNode(node, true);\n                    }\n                }\n            }\n        };\n        _this._handleDblclick = function (e) {\n            var click_target = _this._getClickTarget(e.target);\n            if (click_target && click_target.type === \"label\") {\n                _this._triggerEvent(\"tree.dblclick\", {\n                    node: click_target.node,\n                    click_event: e\n                });\n            }\n        };\n        _this._handleContextmenu = function (e) {\n            var $div = jQuery(e.target).closest(\"ul.jqtree-tree .jqtree-element\");\n            if ($div.length) {\n                var node = _this._getNode($div);\n                if (node) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    _this._triggerEvent(\"tree.contextmenu\", {\n                        node: node,\n                        click_event: e\n                    });\n                    return false;\n                }\n            }\n            return null;\n        };\n        return _this;\n    }\n    JqTreeWidget.prototype.toggle = function (node, slide_param) {\n        var slide = slide_param == null ? this.options.slide : slide_param;\n        if (node.is_open) {\n            this.closeNode(node, slide);\n        }\n        else {\n            this.openNode(node, slide);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getTree = function () {\n        return this.tree;\n    };\n    JqTreeWidget.prototype.selectNode = function (node) {\n        this._selectNode(node, false);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getSelectedNode = function () {\n        if (this.select_node_handler) {\n            return this.select_node_handler.getSelectedNode();\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.toJson = function () {\n        return JSON.stringify(this.tree.getData());\n    };\n    JqTreeWidget.prototype.loadData = function (data, parent_node) {\n        this._loadData(data, parent_node);\n        return this.element;\n    };\n    /*\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    */\n    JqTreeWidget.prototype.loadDataFromUrl = function (param1, param2, param3) {\n        if (typeof param1 === \"string\") {\n            // first parameter is url\n            this._loadDataFromUrl(param1, param2, param3);\n        }\n        else {\n            // first parameter is not url\n            this._loadDataFromUrl(null, param1, param2);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.reload = function (on_finished) {\n        this._loadDataFromUrl(null, null, on_finished);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getNodeById = function (node_id) {\n        return this.tree.getNodeById(node_id);\n    };\n    JqTreeWidget.prototype.getNodeByName = function (name) {\n        return this.tree.getNodeByName(name);\n    };\n    JqTreeWidget.prototype.getNodesByProperty = function (key, value) {\n        return this.tree.getNodesByProperty(key, value);\n    };\n    JqTreeWidget.prototype.getNodeByHtmlElement = function (element) {\n        return this._getNode(jQuery(element));\n    };\n    JqTreeWidget.prototype.getNodeByCallback = function (callback) {\n        return this.tree.getNodeByCallback(callback);\n    };\n    JqTreeWidget.prototype.openNode = function (node, param1, param2) {\n        var _this = this;\n        var parseParams = function () {\n            var on_finished;\n            var slide;\n            if (util_1.isFunction(param1)) {\n                on_finished = param1;\n                slide = null;\n            }\n            else {\n                slide = param1;\n                on_finished = param2;\n            }\n            if (slide == null) {\n                slide = _this.options.slide;\n            }\n            return [slide, on_finished];\n        };\n        var _a = parseParams(), slide = _a[0], on_finished = _a[1];\n        if (node) {\n            this._openNode(node, slide, on_finished);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.closeNode = function (node, slide_param) {\n        var slide = slide_param == null ? this.options.slide : slide_param;\n        if (node.isFolder()) {\n            new node_element_1.FolderElement(node, this).close(slide, this.options.animationSpeed);\n            this._saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.isDragging = function () {\n        if (this.dnd_handler) {\n            return this.dnd_handler.is_dragging;\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype.refreshHitAreas = function () {\n        if (this.dnd_handler) {\n            this.dnd_handler.refresh();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.addNodeAfter = function (new_node_info, existing_node) {\n        var new_node = existing_node.addAfter(new_node_info);\n        if (new_node) {\n            this._refreshElements(existing_node.parent);\n        }\n        return new_node;\n    };\n    JqTreeWidget.prototype.addNodeBefore = function (new_node_info, existing_node) {\n        var new_node = existing_node.addBefore(new_node_info);\n        if (new_node) {\n            this._refreshElements(existing_node.parent);\n        }\n        return new_node;\n    };\n    JqTreeWidget.prototype.addParentNode = function (new_node_info, existing_node) {\n        var new_node = existing_node.addParent(new_node_info);\n        if (new_node) {\n            this._refreshElements(new_node.parent);\n        }\n        return new_node;\n    };\n    JqTreeWidget.prototype.removeNode = function (inode) {\n        var node = inode;\n        if (node.parent && this.select_node_handler) {\n            this.select_node_handler.removeFromSelection(node, true); // including children\n            node.remove();\n            this._refreshElements(node.parent);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.appendNode = function (new_node_info, parent_node_param) {\n        var parent_node = parent_node_param || this.tree;\n        var node = parent_node.append(new_node_info);\n        this._refreshElements(parent_node);\n        return node;\n    };\n    JqTreeWidget.prototype.prependNode = function (new_node_info, parent_node_param) {\n        var parent_node = !parent_node_param\n            ? this.tree\n            : parent_node_param;\n        var node = parent_node.prepend(new_node_info);\n        this._refreshElements(parent_node);\n        return node;\n    };\n    JqTreeWidget.prototype.updateNode = function (node, data) {\n        var id_is_changed = data.id && data.id !== node.id;\n        if (id_is_changed) {\n            this.tree.removeNodeFromIndex(node);\n        }\n        node.setData(data);\n        if (id_is_changed) {\n            this.tree.addNodeToIndex(node);\n        }\n        if (typeof data === \"object\" && data.children) {\n            node.removeChildren();\n            if (data.children.length) {\n                node.loadFromData(data.children);\n            }\n        }\n        this._refreshElements(node);\n        this._selectCurrentNode();\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveNode = function (node, target_node, position) {\n        var position_index = node_1.getPosition(position);\n        this.tree.moveNode(node, target_node, position_index);\n        this._refreshElements(null);\n        return this.element;\n    };\n    JqTreeWidget.prototype.getStateFromStorage = function () {\n        if (this.save_state_handler) {\n            return this.save_state_handler.getStateFromStorage();\n        }\n    };\n    JqTreeWidget.prototype.addToSelection = function (node, mustSetFocus) {\n        if (mustSetFocus === void 0) { mustSetFocus = true; }\n        if (node && this.select_node_handler) {\n            this.select_node_handler.addToSelection(node);\n            this._getNodeElementForNode(node).select(mustSetFocus);\n            this._saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getSelectedNodes = function () {\n        if (!this.select_node_handler) {\n            return [];\n        }\n        else {\n            return this.select_node_handler.getSelectedNodes();\n        }\n    };\n    JqTreeWidget.prototype.isNodeSelected = function (node) {\n        if (!this.select_node_handler) {\n            return false;\n        }\n        else {\n            return this.select_node_handler.isNodeSelected(node);\n        }\n    };\n    JqTreeWidget.prototype.removeFromSelection = function (node) {\n        if (this.select_node_handler) {\n            this.select_node_handler.removeFromSelection(node);\n            this._getNodeElementForNode(node).deselect();\n            this._saveState();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.scrollToNode = function (node) {\n        if (this.scroll_handler) {\n            var node_offset = jQuery(node.element).offset();\n            var node_top = node_offset ? node_offset.top : 0;\n            var tree_offset = this.$el.offset();\n            var tree_top = tree_offset ? tree_offset.top : 0;\n            var top_1 = node_top - tree_top;\n            this.scroll_handler.scrollToY(top_1);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getState = function () {\n        if (this.save_state_handler) {\n            return this.save_state_handler.getState();\n        }\n    };\n    JqTreeWidget.prototype.setState = function (state) {\n        if (this.save_state_handler) {\n            this.save_state_handler.setInitialState(state);\n            this._refreshElements(null);\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.setOption = function (option, value) {\n        this.options[option] = value;\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveDown = function () {\n        if (this.key_handler) {\n            this.key_handler.moveDown();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.moveUp = function () {\n        if (this.key_handler) {\n            this.key_handler.moveUp();\n        }\n        return this.element;\n    };\n    JqTreeWidget.prototype.getVersion = function () {\n        return version_1[\"default\"];\n    };\n    JqTreeWidget.prototype.testGenerateHitAreas = function (moving_node) {\n        if (!this.dnd_handler) {\n            return [];\n        }\n        else {\n            this.dnd_handler.current_item = this._getNodeElementForNode(moving_node);\n            this.dnd_handler.generateHitAreas();\n            return this.dnd_handler.hit_areas;\n        }\n    };\n    JqTreeWidget.prototype._triggerEvent = function (event_name, values) {\n        var event = jQuery.Event(event_name);\n        jQuery.extend(event, values);\n        this.element.trigger(event);\n        return event;\n    };\n    JqTreeWidget.prototype._openNode = function (node, slide, on_finished) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        var doOpenNode = function (_node, _slide, _on_finished) {\n            var folder_element = new node_element_1.FolderElement(_node, _this);\n            folder_element.open(_on_finished, _slide, _this.options.animationSpeed);\n        };\n        if (node.isFolder()) {\n            if (node.load_on_demand) {\n                this._loadFolderOnDemand(node, slide, on_finished);\n            }\n            else {\n                var parent_1 = node.parent;\n                while (parent_1) {\n                    // nb: do not open root element\n                    if (parent_1.parent) {\n                        doOpenNode(parent_1, false, null);\n                    }\n                    parent_1 = parent_1.parent;\n                }\n                doOpenNode(node, slide, on_finished);\n                this._saveState();\n            }\n        }\n    };\n    /*\n    Redraw the tree or part of the tree.\n     from_node: redraw this subtree\n    */\n    JqTreeWidget.prototype._refreshElements = function (from_node) {\n        this.renderer.render(from_node);\n        this._triggerEvent(\"tree.refresh\");\n    };\n    JqTreeWidget.prototype._getNodeElementForNode = function (node) {\n        if (node.isFolder()) {\n            return new node_element_1.FolderElement(node, this);\n        }\n        else {\n            return new node_element_1.NodeElement(node, this);\n        }\n    };\n    JqTreeWidget.prototype._getNodeElement = function ($element) {\n        var node = this._getNode($element);\n        if (node) {\n            return this._getNodeElementForNode(node);\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype._containsElement = function (element) {\n        var node = this._getNode(jQuery(element));\n        return node != null && node.tree === this.tree;\n    };\n    JqTreeWidget.prototype._getScrollLeft = function () {\n        return ((this.scroll_handler && this.scroll_handler.getScrollLeft()) || 0);\n    };\n    JqTreeWidget.prototype._init = function () {\n        _super.prototype._init.call(this);\n        this.element = this.$el;\n        this.mouse_delay = 300;\n        this.is_initialized = false;\n        this.options.rtl = this._getRtlOption();\n        if (this.options.closedIcon === null) {\n            this.options.closedIcon = this._getDefaultClosedIcon();\n        }\n        this.renderer = new elements_renderer_1[\"default\"](this);\n        this.dataLoader = new data_loader_1[\"default\"](this);\n        if (save_state_handler_1[\"default\"] != null) {\n            this.save_state_handler = new save_state_handler_1[\"default\"](this);\n        }\n        else {\n            this.options.saveState = false;\n        }\n        if (select_node_handler_1[\"default\"] != null) {\n            this.select_node_handler = new select_node_handler_1[\"default\"](this);\n        }\n        if (drag_and_drop_handler_1.DragAndDropHandler != null) {\n            this.dnd_handler = new drag_and_drop_handler_1.DragAndDropHandler(this);\n        }\n        else {\n            this.options.dragAndDrop = false;\n        }\n        if (scroll_handler_1[\"default\"] != null) {\n            this.scroll_handler = new scroll_handler_1[\"default\"](this);\n        }\n        if (key_handler_1[\"default\"] != null && select_node_handler_1[\"default\"] != null) {\n            this.key_handler = new key_handler_1[\"default\"](this);\n        }\n        this._initData();\n        this.element.click(this._handleClick);\n        this.element.dblclick(this._handleDblclick);\n        if (this.options.useContextMenu) {\n            this.element.on(\"contextmenu\", this._handleContextmenu);\n        }\n    };\n    JqTreeWidget.prototype._deinit = function () {\n        this.element.empty();\n        this.element.off();\n        if (this.key_handler) {\n            this.key_handler.deinit();\n        }\n        this.tree = new node_1.Node({}, true);\n        _super.prototype._deinit.call(this);\n    };\n    JqTreeWidget.prototype._mouseCapture = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            return this.dnd_handler.mouseCapture(position_info);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._mouseStart = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            return this.dnd_handler.mouseStart(position_info);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._mouseDrag = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            var result = this.dnd_handler.mouseDrag(position_info);\n            if (this.scroll_handler) {\n                this.scroll_handler.checkScrolling();\n            }\n            return result;\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._mouseStop = function (position_info) {\n        if (this.options.dragAndDrop && this.dnd_handler) {\n            return this.dnd_handler.mouseStop(position_info);\n        }\n        else {\n            return false;\n        }\n    };\n    JqTreeWidget.prototype._initData = function () {\n        if (this.options.data) {\n            this._loadData(this.options.data, null);\n        }\n        else {\n            var data_url = this._getDataUrlInfo(null);\n            if (data_url) {\n                this._loadDataFromUrl(null, null, null);\n            }\n            else {\n                this._loadData([], null);\n            }\n        }\n    };\n    JqTreeWidget.prototype._getDataUrlInfo = function (node) {\n        var _this = this;\n        var data_url = this.options.dataUrl || this.element.data(\"url\");\n        var getUrlFromString = function () {\n            var url_info = { url: data_url };\n            setUrlInfoData(url_info);\n            return url_info;\n        };\n        var setUrlInfoData = function (url_info) {\n            if (node && node.id) {\n                // Load on demand of a subtree; add node parameter\n                var data = { node: node.id };\n                // tslint:disable-next-line: no-string-literal\n                url_info[\"data\"] = data;\n            }\n            else {\n                // Add selected_node parameter\n                var selected_node_id = _this._getNodeIdToBeSelected();\n                if (selected_node_id) {\n                    var data = { selected_node: selected_node_id };\n                    // tslint:disable-next-line: no-string-literal\n                    url_info[\"data\"] = data;\n                }\n            }\n        };\n        if (typeof data_url === \"function\") {\n            return data_url(node);\n        }\n        else if (typeof data_url === \"string\") {\n            return getUrlFromString();\n        }\n        else if (typeof data_url === \"object\") {\n            setUrlInfoData(data_url);\n            return data_url;\n        }\n        else {\n            return data_url;\n        }\n    };\n    JqTreeWidget.prototype._getNodeIdToBeSelected = function () {\n        if (this.options.saveState && this.save_state_handler) {\n            return this.save_state_handler.getNodeIdToBeSelected();\n        }\n        else {\n            return null;\n        }\n    };\n    JqTreeWidget.prototype._initTree = function (data) {\n        var _this = this;\n        var doInit = function () {\n            if (!_this.is_initialized) {\n                _this.is_initialized = true;\n                _this._triggerEvent(\"tree.init\");\n            }\n        };\n        this.tree = new this.options.nodeClass(null, true, this.options.nodeClass);\n        if (this.select_node_handler) {\n            this.select_node_handler.clear();\n        }\n        this.tree.loadFromData(data);\n        var must_load_on_demand = this._setInitialState();\n        this._refreshElements(null);\n        if (!must_load_on_demand) {\n            doInit();\n        }\n        else {\n            // Load data on demand and then init the tree\n            this._setInitialStateOnDemand(doInit);\n        }\n    };\n    // Set initial state, either by restoring the state or auto-opening nodes\n    // result: must load nodes on demand?\n    JqTreeWidget.prototype._setInitialState = function () {\n        var _this = this;\n        var restoreState = function () {\n            // result: is state restored, must load on demand?\n            if (!(_this.options.saveState && _this.save_state_handler)) {\n                return [false, false];\n            }\n            else {\n                var state = _this.save_state_handler.getStateFromStorage();\n                if (!state) {\n                    return [false, false];\n                }\n                else {\n                    var must_load_on_demand_1 = _this.save_state_handler.setInitialState(state);\n                    // return true: the state is restored\n                    return [true, must_load_on_demand_1];\n                }\n            }\n        };\n        var autoOpenNodes = function () {\n            // result: must load on demand?\n            if (_this.options.autoOpen === false) {\n                return false;\n            }\n            var max_level = _this._getAutoOpenMaxLevel();\n            var must_load_on_demand = false;\n            _this.tree.iterate(function (node, level) {\n                if (node.load_on_demand) {\n                    must_load_on_demand = true;\n                    return false;\n                }\n                else if (!node.hasChildren()) {\n                    return false;\n                }\n                else {\n                    node.is_open = true;\n                    return level !== max_level;\n                }\n            });\n            return must_load_on_demand;\n        };\n        // tslint:disable-next-line: prefer-const\n        var _a = restoreState(), is_restored = _a[0], must_load_on_demand = _a[1];\n        if (!is_restored) {\n            must_load_on_demand = autoOpenNodes();\n        }\n        return must_load_on_demand;\n    };\n    // Set the initial state for nodes that are loaded on demand\n    // Call cb_finished when done\n    JqTreeWidget.prototype._setInitialStateOnDemand = function (cb_finished) {\n        var _this = this;\n        var restoreState = function () {\n            if (!(_this.options.saveState && _this.save_state_handler)) {\n                return false;\n            }\n            else {\n                var state = _this.save_state_handler.getStateFromStorage();\n                if (!state) {\n                    return false;\n                }\n                else {\n                    _this.save_state_handler.setInitialStateOnDemand(state, cb_finished);\n                    return true;\n                }\n            }\n        };\n        var autoOpenNodes = function () {\n            var max_level = _this._getAutoOpenMaxLevel();\n            var loading_count = 0;\n            var loadAndOpenNode = function (node) {\n                loading_count += 1;\n                _this._openNode(node, false, function () {\n                    loading_count -= 1;\n                    openNodes();\n                });\n            };\n            var openNodes = function () {\n                _this.tree.iterate(function (node, level) {\n                    if (node.load_on_demand) {\n                        if (!node.is_loading) {\n                            loadAndOpenNode(node);\n                        }\n                        return false;\n                    }\n                    else {\n                        _this._openNode(node, false, null);\n                        return level !== max_level;\n                    }\n                });\n                if (loading_count === 0) {\n                    cb_finished();\n                }\n            };\n            openNodes();\n        };\n        if (!restoreState()) {\n            autoOpenNodes();\n        }\n    };\n    JqTreeWidget.prototype._getAutoOpenMaxLevel = function () {\n        if (this.options.autoOpen === true) {\n            return -1;\n        }\n        else {\n            return parseInt(this.options.autoOpen, 10);\n        }\n    };\n    JqTreeWidget.prototype._getClickTarget = function (element) {\n        var $target = jQuery(element);\n        var $button = $target.closest(\".jqtree-toggler\");\n        if ($button.length) {\n            var node = this._getNode($button);\n            if (node) {\n                return {\n                    type: \"button\",\n                    node: node\n                };\n            }\n        }\n        else {\n            var $el = $target.closest(\".jqtree-element\");\n            if ($el.length) {\n                var node = this._getNode($el);\n                if (node) {\n                    return {\n                        type: \"label\",\n                        node: node\n                    };\n                }\n            }\n        }\n        return null;\n    };\n    JqTreeWidget.prototype._getNode = function ($element) {\n        var $li = $element.closest(\"li.jqtree_common\");\n        if ($li.length === 0) {\n            return null;\n        }\n        else {\n            return $li.data(\"node\");\n        }\n    };\n    JqTreeWidget.prototype._saveState = function () {\n        if (this.options.saveState && this.save_state_handler) {\n            this.save_state_handler.saveState();\n        }\n    };\n    JqTreeWidget.prototype._selectCurrentNode = function () {\n        var node = this.getSelectedNode();\n        if (node) {\n            var node_element = this._getNodeElementForNode(node);\n            if (node_element) {\n                node_element.select(true);\n            }\n        }\n    };\n    JqTreeWidget.prototype._deselectCurrentNode = function () {\n        var node = this.getSelectedNode();\n        if (node) {\n            this.removeFromSelection(node);\n        }\n    };\n    JqTreeWidget.prototype._getDefaultClosedIcon = function () {\n        if (this.options.rtl) {\n            // triangle to the left\n            return \"&#x25c0;\";\n        }\n        else {\n            // triangle to the right\n            return \"&#x25ba;\";\n        }\n    };\n    JqTreeWidget.prototype._getRtlOption = function () {\n        if (this.options.rtl != null) {\n            return this.options.rtl;\n        }\n        else {\n            var data_rtl = this.element.data(\"rtl\");\n            if (data_rtl != null && data_rtl !== false) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    JqTreeWidget.prototype._selectNode = function (inode, must_toggle) {\n        var _this = this;\n        if (must_toggle === void 0) { must_toggle = false; }\n        var node = inode;\n        if (!this.select_node_handler) {\n            return;\n        }\n        var canSelect = function () {\n            if (_this.options.onCanSelectNode) {\n                return (_this.options.selectable &&\n                    _this.options.onCanSelectNode(node));\n            }\n            else {\n                return _this.options.selectable;\n            }\n        };\n        var openParents = function () {\n            var parent = node.parent;\n            if (parent && parent.parent && !parent.is_open) {\n                _this.openNode(parent, false);\n            }\n        };\n        var saveState = function () {\n            if (_this.options.saveState && _this.save_state_handler) {\n                _this.save_state_handler.saveState();\n            }\n        };\n        if (!node) {\n            // Called with empty node -> deselect current node\n            this._deselectCurrentNode();\n            saveState();\n            return;\n        }\n        if (!canSelect()) {\n            return;\n        }\n        if (this.select_node_handler.isNodeSelected(node)) {\n            if (must_toggle) {\n                this._deselectCurrentNode();\n                this._triggerEvent(\"tree.select\", {\n                    node: null,\n                    previous_node: node\n                });\n            }\n        }\n        else {\n            var deselected_node = this.getSelectedNode();\n            this._deselectCurrentNode();\n            this.addToSelection(node);\n            this._triggerEvent(\"tree.select\", {\n                node: node,\n                deselected_node: deselected_node\n            });\n            openParents();\n        }\n        saveState();\n    };\n    JqTreeWidget.prototype._loadData = function (data, parent_node) {\n        if (!data) {\n            return;\n        }\n        else {\n            this._triggerEvent(\"tree.load_data\", { tree_data: data });\n            if (parent_node) {\n                this._deselectNodes(parent_node);\n                this._loadSubtree(data, parent_node);\n            }\n            else {\n                this._initTree(data);\n            }\n            if (this.isDragging() && this.dnd_handler) {\n                this.dnd_handler.refresh();\n            }\n        }\n    };\n    JqTreeWidget.prototype._deselectNodes = function (parent_node) {\n        if (this.select_node_handler) {\n            var selected_nodes_under_parent = this.select_node_handler.getSelectedNodesUnder(parent_node);\n            for (var _i = 0, selected_nodes_under_parent_1 = selected_nodes_under_parent; _i < selected_nodes_under_parent_1.length; _i++) {\n                var n = selected_nodes_under_parent_1[_i];\n                this.select_node_handler.removeFromSelection(n);\n            }\n        }\n    };\n    JqTreeWidget.prototype._loadSubtree = function (data, parent_node) {\n        parent_node.loadFromData(data);\n        parent_node.load_on_demand = false;\n        parent_node.is_loading = false;\n        this._refreshElements(parent_node);\n    };\n    JqTreeWidget.prototype._loadDataFromUrl = function (urlInfoParam, parentNode, onFinished) {\n        var urlInfo = urlInfoParam || this._getDataUrlInfo(parentNode);\n        this.dataLoader.loadFromUrl(urlInfo, parentNode, onFinished);\n    };\n    JqTreeWidget.prototype._loadFolderOnDemand = function (node, slide, on_finished) {\n        var _this = this;\n        if (slide === void 0) { slide = true; }\n        node.is_loading = true;\n        this._loadDataFromUrl(null, node, function () {\n            _this._openNode(node, slide, on_finished);\n        });\n    };\n    JqTreeWidget.defaults = {\n        animationSpeed: \"fast\",\n        autoOpen: false,\n        saveState: false,\n        dragAndDrop: false,\n        selectable: true,\n        useContextMenu: true,\n        onCanSelectNode: null,\n        onSetStateFromStorage: null,\n        onGetStateFromStorage: null,\n        onCreateLi: null,\n        onIsMoveHandle: null,\n        // Can this node be moved?\n        onCanMove: null,\n        // Can this node be moved to this position? function(moved_node, target_node, position)\n        onCanMoveTo: null,\n        onLoadFailed: null,\n        autoEscape: true,\n        dataUrl: null,\n        // The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER\n        // http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        closedIcon: null,\n        // The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE\n        // http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        openedIcon: \"&#x25bc;\",\n        slide: true,\n        nodeClass: node_1.Node,\n        dataFilter: null,\n        keyboardSupport: true,\n        openFolderDelay: 500,\n        rtl: false,\n        onDragMove: null,\n        onDragStop: null,\n        buttonLeft: true,\n        onLoading: null,\n        tabIndex: 0\n    };\n    return JqTreeWidget;\n}(mouse_widget_1[\"default\"]));\nsimple_widget_1[\"default\"].register(JqTreeWidget, \"tree\");\n","\"use strict\";\nexports.__esModule = true;\nexports.isInt = function (n) { return typeof n === \"number\" && n % 1 === 0; };\nexports.isFunction = function (v) { return typeof v === \"function\"; };\n// Escape a string for HTML interpolation; copied from underscore js\nexports.htmlEscape = function (text) {\n    return (\"\" + text)\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#x27;\")\n        .replace(/\\//g, \"&#x2F;\");\n};\nexports.getBoolString = function (value) { return (value ? \"true\" : \"false\"); };\n","\"use strict\";\nexports.__esModule = true;\nvar version = \"1.4.9\";\nexports[\"default\"] = version;\n","import 'jqtree';\nimport 'jquery';\nimport './main.css';\nimport 'indico/jquery/compat/jqplot';\n\n$(function() {\n    var $t = $T.domain('piwik');\n    var treeDOMTarget = '#materialTree';\n\n    /**\n     * Clears the DOM element for the graph and then initiates a jqPlot render\n     * in the target area.\n     *\n     * @param source - JSON of dates: {total / unique} hits\n     */\n    var draw_jqplot_graph = function(source, DOMTarget, replot) {\n        $('#' + DOMTarget).html('');\n\n        var plotOptions = {\n            axes: {\n                xaxis: {\n                    renderer: $.jqplot.DateAxisRenderer,\n                    min: window.piwikReportDates.start,\n                    max: window.piwikReportDates.end\n                },\n                yaxis: {\n                    min: 0,\n                    numberTicks: 10\n                }\n            },\n            cursor: {\n                show: true,\n                zoom: true,\n                showTooltip: false\n            },\n            highlighter: {\n                show: true,\n                sizeAdjust: 5\n            },\n            legend: {\n                show: true,\n                location: 'nw'\n            },\n            grid: {\n                background: '#FFFFFF',\n                shadow: false\n            },\n            series: [{\n                showMarker:false,\n                lineWidth: 1,\n                color: '#CCCCCC',\n                label: $t.gettext('Total Hits')\n            }, {\n                showMarker:false,\n                lineWidth: 1,\n                color: '#0B63A5',\n                label: $t.gettext('Unique Hits')\n            }]\n        };\n\n        if (replot) {\n            $.jqplot(DOMTarget, source, plotOptions).replot();\n        } else {\n            $.jqplot(DOMTarget, source, plotOptions);\n        }\n    };\n\n    /**\n     * Draw a customized jqTree\n     */\n    var draw_jqTree = function(treeData) {\n        $(treeDOMTarget).tree({\n            data: treeData,\n            autoOpen: 0,\n            saveState: true,\n            onCanSelectNode: function(node) {\n                // Leaf node (material) can be selected\n                return (node.children.length === 0);\n            },\n            onCreateLi: function(node, $li) {\n                if (node.id !== undefined) {\n                    $li.find('.title').addClass('selectableNode');\n                }\n            }\n        });\n    };\n\n    /**\n     * Get base values for API requests\n     */\n    var get_api_params = function() {\n        var params = {'confId': $('#confId').val(),\n                      'start_date' : $('#statsFilterStartDate').val(),\n                      'end_date' : $('#statsFilterEndDate').val()};\n\n        var contrib_id = $('#contribId').val();\n        if (contrib_id != 'None') {\n            params.contrib_id = contrib_id;\n        }\n\n        return params;\n    };\n\n    /**\n     * Build URI for page update\n     */\n    var get_updated_uri = function() {\n        var params = {'start_date' : $('#statsFilterStartDate').val(),\n                      'end_date' : $('#statsFilterEndDate').val()};\n        var contrib_id = $('#updateContribution').val();\n        if (contrib_id != 'None') {\n            params.contrib_id = contrib_id;\n        }\n        return $.param(params);\n    };\n\n    /**\n     * Extract data from a JSON object returned via the API into\n     * the jqPlot array format. If 'with_date' is true\n     * each element will be a key-pair value of date-hits.\n     */\n    var get_jqplot_array_values = function(data, key, with_date) {\n        const output = [];\n        with_date = typeof with_date !== 'undefined' ? with_date : true;\n\n        for (var date in data) {\n            const hits = data[date];\n            const value = (with_date) ? [date, hits[key]] : hits[key];\n            output.push(value);\n        }\n\n        return output;\n    };\n\n    /**\n     * Load material downloads data via AJAX and draw its graph\n     */\n    var load_material_graph = function(uri, replot) {\n        replot = typeof replot !== 'undefined' ? replot : false;\n        var DOMTarget = 'materialDownloadChart';\n        var graph_params = get_api_params();\n        graph_params.download_url = uri;\n\n        $.ajax({\n            url: build_url(PiwikPlugin.urls.data_downloads, graph_params),\n            type: 'POST',\n            dataType: 'json',\n            success: function(data) {\n                if (handleAjaxError(data)) {\n                    return;\n                }\n                var materialHits = [get_jqplot_array_values(data.metrics.downloads.individual, 'total'),\n                                    get_jqplot_array_values(data.metrics.downloads.individual, 'unique')];\n                draw_jqplot_graph(materialHits, DOMTarget, replot);\n                $('#materialTotalDownloads').html(data.metrics.downloads.cumulative.total);\n            }\n        });\n    };\n\n    /**\n     * Load the material files data and draw its jqTree\n     */\n    var load_material_tree = function() {\n        $(treeDOMTarget).html(progressIndicator(true, true).dom);\n\n        $.ajax({\n            url: build_url(PiwikPlugin.urls.material, get_api_params()),\n            type: 'POST',\n            dataType: 'json',\n            success: function(data) {\n                if (handleAjaxError(data)) {\n                    return;\n                }\n                if (data.material.tree !== null) {\n                    draw_jqTree(data.material.tree);\n                } else {\n                    $(treeDOMTarget).html($t.gettext('No material found'));\n                }\n            }\n        });\n    };\n\n    /**\n     * Loads visits data and draw its graph\n     */\n    var load_visits_graph = function(data) {\n        var DOMTarget = 'visitorChart';\n        $('#' + DOMTarget).html(progressIndicator(true, true).dom);\n\n        $.ajax({\n            url: build_url(PiwikPlugin.urls.data_visits, get_api_params()),\n            type: 'POST',\n            dataType: 'json',\n            success: function(data) {\n                if (handleAjaxError(data)) {\n                    return;\n                }\n                var source = [get_jqplot_array_values(data.metrics, 'total'),\n                              get_jqplot_array_values(data.metrics, 'unique')];\n                draw_jqplot_graph(source, DOMTarget, false);\n            }\n        });\n    };\n\n    /**\n     * Load static graphs via ajax\n     */\n    var load_graphs = function() {\n        var graph_requests = [{'endpoint': 'graph_countries', 'report': 'countries'},\n                              {'endpoint': 'graph_devices', 'report': 'devices'}];\n        $.each(graph_requests, function(index, request) {\n            $.ajax({\n                url: build_url(PiwikPlugin.urls[request.endpoint], get_api_params()),\n                type: 'POST',\n                dataType: 'json',\n                success: function(data) {\n                    if (handleAjaxError(data)) {\n                        return;\n                    }\n                    var graph_holder =  $('#' + request.endpoint);\n                    if (data.graphs[request.report] !== null) {\n                        graph_holder.attr('src', data.graphs[request.report]);\n                    } else {\n                        var error = $('<div>').text($t.gettext(\"No graph data received\"));\n                        graph_holder.replaceWith(error);\n                    }\n                }\n            });\n        });\n    };\n\n    var init = function() {\n        $('#statsModify').click(function(e) {\n            e.preventDefault();\n            var $this = $(this);\n            var filter = $('#statsFilter');\n            if (filter.is(':visible')) {  // hiding it\n                $this.text($this.data('msgShow'));\n            } else {\n                $this.text($this.data('msgHide'));\n            }\n            filter.slideToggle('fast');\n        });\n\n        $('.statsDates').datepicker({\n            dateFormat : 'yy-mm-dd',\n            defaultDate : $(this).attr('data-default')\n        });\n\n        $('#updateQuery').click(function() {\n            var url = '?{0}'.format(get_updated_uri());\n            window.location.href = url;\n        });\n\n        // Event handler for clicking 'selectable' elements from the jqTree.\n        $(treeDOMTarget).bind('tree.click', function(event) {\n            $('#materialTitle').html(event.node.name);\n            $('#materialDownloadChart').html(progressIndicator(true, true).dom);\n            load_material_graph(event.node.id, true);\n        });\n\n        // jQuery UI Dialog if no data is received via AJAX (timeout)\n        $('#dialogNoGraphData').dialog({\n            modal: true,\n            resizable: false,\n            autoOpen: false,\n            buttons: {\n                Ok: function() {\n                    $(this).dialog('close');\n                }\n            }\n        });\n\n        load_graphs();\n        load_visits_graph();\n        load_material_tree();\n    };\n\n    init();\n});\n","// removed by extract-text-webpack-plugin","module.exports = jQuery;"],"sourceRoot":""}